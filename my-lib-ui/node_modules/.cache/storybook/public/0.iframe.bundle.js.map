{"version":3,"file":"0.iframe.bundle.js","sources":["webpack:///./node_modules/@storybook/components/dist/esm/syntaxhighlighter-b07b042a.js","webpack:///./node_modules/core-js/modules/es.regexp.flags.js","webpack:///./node_modules/core-js/modules/es.string.from-code-point.js"],"sourcesContent":["import \"regenerator-runtime/runtime.js\";\r\n\r\nfunction _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest(); }\r\n\r\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }\r\n\r\nfunction _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\r\n\r\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\r\n\r\nimport \"core-js/modules/es.regexp.exec.js\";\r\nimport \"core-js/modules/es.string.replace.js\";\r\nimport \"core-js/modules/es.regexp.constructor.js\";\r\nimport \"core-js/modules/es.regexp.to-string.js\";\r\nimport \"core-js/modules/es.array.join.js\";\r\nimport \"core-js/modules/es.array.map.js\";\r\nimport \"core-js/modules/es.array.splice.js\";\r\nimport \"core-js/modules/es.array.filter.js\";\r\nimport \"core-js/modules/es.object.to-string.js\";\r\nimport \"core-js/modules/es.string.from-code-point.js\";\r\nimport \"core-js/modules/es.array.slice.js\";\r\nimport \"core-js/modules/es.number.constructor.js\";\r\nimport \"core-js/modules/es.regexp.flags.js\";\r\nimport \"core-js/modules/es.symbol.js\";\r\nimport \"core-js/modules/es.symbol.description.js\";\r\nimport \"core-js/modules/es.symbol.iterator.js\";\r\nimport \"core-js/modules/es.array.iterator.js\";\r\nimport \"core-js/modules/es.string.iterator.js\";\r\nimport \"core-js/modules/web.dom-collections.iterator.js\";\r\nimport \"core-js/modules/es.array.from.js\";\r\nimport \"core-js/modules/es.function.name.js\";\r\nimport \"core-js/modules/es.object.keys.js\";\r\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\r\nimport \"core-js/modules/web.dom-collections.for-each.js\";\r\nimport \"core-js/modules/es.array.concat.js\";\r\nimport \"core-js/modules/es.string.split.js\";\r\nimport \"core-js/modules/es.array.includes.js\";\r\nimport \"core-js/modules/es.string.includes.js\";\r\nimport \"core-js/modules/es.object.assign.js\";\r\nimport \"core-js/modules/es.string.match.js\";\r\nimport \"core-js/modules/es.set.js\";\r\nimport \"core-js/modules/es.string.trim.js\";\r\nimport \"core-js/modules/esnext.global-this.js\";\r\nimport \"core-js/modules/es.object.entries.js\";\r\nimport { _ as _objectWithoutPropertiesLoose, a as _extends, c as commonjsGlobal, b as __awaiter, S as ScrollArea, d as __rest, A as ActionBar, w as window_1 } from './index-681e4b07.js';\r\nimport React__default, { useState, useCallback } from 'react';\r\nimport { logger } from '@storybook/client-logger';\r\nimport { styled } from '@storybook/theming';\r\nimport memoize from 'memoizerific';\r\nimport '@storybook/csf';\r\nimport 'qs';\r\nvar jsx_1 = jsx;\r\njsx.displayName = 'jsx';\r\njsx.aliases = [];\r\n\r\nfunction jsx(Prism) {\r\n  (function (Prism) {\r\n    var javascript = Prism.util.clone(Prism.languages.javascript);\r\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\r\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\r\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\r\n    /**\r\n     * @param {string} source\r\n     * @param {string} [flags]\r\n     */\r\n\r\n    function re(source, flags) {\r\n      source = source.replace(/<S>/g, function () {\r\n        return space;\r\n      }).replace(/<BRACES>/g, function () {\r\n        return braces;\r\n      }).replace(/<SPREAD>/g, function () {\r\n        return spread;\r\n      });\r\n      return RegExp(source, flags);\r\n    }\r\n\r\n    spread = re(spread).source;\r\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript);\r\n    Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\r\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\r\n    Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\r\n    Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\r\n    Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\r\n    Prism.languages.insertBefore('inside', 'attr-name', {\r\n      spread: {\r\n        pattern: re(/<SPREAD>/.source),\r\n        inside: Prism.languages.jsx\r\n      }\r\n    }, Prism.languages.jsx.tag);\r\n    Prism.languages.insertBefore('inside', 'special-attr', {\r\n      script: {\r\n        // Allow for two levels of nesting\r\n        pattern: re(/=<BRACES>/.source),\r\n        alias: 'language-javascript',\r\n        inside: {\r\n          'script-punctuation': {\r\n            pattern: /^=(?=\\{)/,\r\n            alias: 'punctuation'\r\n          },\r\n          rest: Prism.languages.jsx\r\n        }\r\n      }\r\n    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\r\n\r\n    var stringifyToken = function stringifyToken(token) {\r\n      if (!token) {\r\n        return '';\r\n      }\r\n\r\n      if (typeof token === 'string') {\r\n        return token;\r\n      }\r\n\r\n      if (typeof token.content === 'string') {\r\n        return token.content;\r\n      }\r\n\r\n      return token.content.map(stringifyToken).join('');\r\n    };\r\n\r\n    var walkTokens = function walkTokens(tokens) {\r\n      var openedTags = [];\r\n\r\n      for (var i = 0; i < tokens.length; i++) {\r\n        var token = tokens[i];\r\n        var notTagNorBrace = false;\r\n\r\n        if (typeof token !== 'string') {\r\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\r\n            // We found a tag, now find its kind\r\n            if (token.content[0].content[0].content === '</') {\r\n              // Closing tag\r\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\r\n                // Pop matching opening tag\r\n                openedTags.pop();\r\n              }\r\n            } else {\r\n              if (token.content[token.content.length - 1].content === '/>') ;else {\r\n                // Opening tag\r\n                openedTags.push({\r\n                  tagName: stringifyToken(token.content[0].content[1]),\r\n                  openedBraces: 0\r\n                });\r\n              }\r\n            }\r\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\r\n            // Here we might have entered a JSX context inside a tag\r\n            openedTags[openedTags.length - 1].openedBraces++;\r\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\r\n            // Here we might have left a JSX context inside a tag\r\n            openedTags[openedTags.length - 1].openedBraces--;\r\n          } else {\r\n            notTagNorBrace = true;\r\n          }\r\n        }\r\n\r\n        if (notTagNorBrace || typeof token === 'string') {\r\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\r\n            // Here we are inside a tag, and not inside a JSX context.\r\n            // That's plain text: drop any tokens matched.\r\n            var plainText = stringifyToken(token); // And merge text with adjacent text\r\n\r\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\r\n              plainText += stringifyToken(tokens[i + 1]);\r\n              tokens.splice(i + 1, 1);\r\n            }\r\n\r\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\r\n              plainText = stringifyToken(tokens[i - 1]) + plainText;\r\n              tokens.splice(i - 1, 1);\r\n              i--;\r\n            }\r\n\r\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\r\n          }\r\n        }\r\n\r\n        if (token.content && typeof token.content !== 'string') {\r\n          walkTokens(token.content);\r\n        }\r\n      }\r\n    };\r\n\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\r\n        return;\r\n      }\r\n\r\n      walkTokens(env.tokens);\r\n    });\r\n  })(Prism);\r\n}\r\n\r\nvar jsx$1 = jsx_1;\r\nvar bash_1 = bash;\r\nbash.displayName = 'bash';\r\nbash.aliases = ['shell'];\r\n\r\nfunction bash(Prism) {\r\n  (function (Prism) {\r\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\r\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\r\n    // + make sure PS1..4 are here as they are not always set,\r\n    // - some useless things.\r\n    var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\r\n    var commandAfterHeredoc = {\r\n      pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\r\n      lookbehind: true,\r\n      alias: 'punctuation',\r\n      // this looks reasonably well in all themes\r\n      inside: null // see below\r\n\r\n    };\r\n    var insideString = {\r\n      bash: commandAfterHeredoc,\r\n      environment: {\r\n        pattern: RegExp('\\\\$' + envVars),\r\n        alias: 'constant'\r\n      },\r\n      variable: [// [0]: Arithmetic Environment\r\n      {\r\n        pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\r\n        greedy: true,\r\n        inside: {\r\n          // If there is a $ sign at the beginning highlight $(( and )) as variable\r\n          variable: [{\r\n            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\r\n            lookbehind: true\r\n          }, /^\\$\\(\\(/],\r\n          number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\r\n          // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\r\n          operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\r\n          // If there is no $ sign at the beginning highlight (( and )) as punctuation\r\n          punctuation: /\\(\\(?|\\)\\)?|,|;/\r\n        }\r\n      }, // [1]: Command Substitution\r\n      {\r\n        pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\r\n        greedy: true,\r\n        inside: {\r\n          variable: /^\\$\\(|^`|\\)$|`$/\r\n        }\r\n      }, // [2]: Brace expansion\r\n      {\r\n        pattern: /\\$\\{[^}]+\\}/,\r\n        greedy: true,\r\n        inside: {\r\n          operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\r\n          punctuation: /[\\[\\]]/,\r\n          environment: {\r\n            pattern: RegExp('(\\\\{)' + envVars),\r\n            lookbehind: true,\r\n            alias: 'constant'\r\n          }\r\n        }\r\n      }, /\\$(?:\\w+|[#?*!@$])/],\r\n      // Escape sequences from echo and printf's manuals, and escaped quotes.\r\n      entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\r\n    };\r\n    Prism.languages.bash = {\r\n      shebang: {\r\n        pattern: /^#!\\s*\\/.*/,\r\n        alias: 'important'\r\n      },\r\n      comment: {\r\n        pattern: /(^|[^\"{\\\\$])#.*/,\r\n        lookbehind: true\r\n      },\r\n      'function-name': [// a) function foo {\r\n      // b) foo() {\r\n      // c) function foo() {\r\n      // but not “foo {”\r\n      {\r\n        // a) and c)\r\n        pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\r\n        lookbehind: true,\r\n        alias: 'function'\r\n      }, {\r\n        // b)\r\n        pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\r\n        alias: 'function'\r\n      }],\r\n      // Highlight variable names as variables in for and select beginnings.\r\n      'for-or-select': {\r\n        pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\r\n        alias: 'variable',\r\n        lookbehind: true\r\n      },\r\n      // Highlight variable names as variables in the left-hand part\r\n      // of assignments (“=” and “+=”).\r\n      'assign-left': {\r\n        pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\r\n        inside: {\r\n          environment: {\r\n            pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\r\n            lookbehind: true,\r\n            alias: 'constant'\r\n          }\r\n        },\r\n        alias: 'variable',\r\n        lookbehind: true\r\n      },\r\n      string: [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\r\n      {\r\n        pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: insideString\r\n      }, // Here-document with quotes around the tag\r\n      // → No expansion (so no “inside”).\r\n      {\r\n        pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          bash: commandAfterHeredoc\r\n        }\r\n      }, // “Normal” string\r\n      {\r\n        // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\r\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: insideString\r\n      }, {\r\n        // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\r\n        pattern: /(^|[^$\\\\])'[^']*'/,\r\n        lookbehind: true,\r\n        greedy: true\r\n      }, {\r\n        // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\r\n        pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\r\n        greedy: true,\r\n        inside: {\r\n          entity: insideString.entity\r\n        }\r\n      }],\r\n      environment: {\r\n        pattern: RegExp('\\\\$?' + envVars),\r\n        alias: 'constant'\r\n      },\r\n      variable: insideString.variable,\r\n      function: {\r\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\r\n        lookbehind: true\r\n      },\r\n      keyword: {\r\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\r\n        lookbehind: true\r\n      },\r\n      // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\r\n      builtin: {\r\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\r\n        lookbehind: true,\r\n        // Alias added to make those easier to distinguish from strings.\r\n        alias: 'class-name'\r\n      },\r\n      boolean: {\r\n        pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\r\n        lookbehind: true\r\n      },\r\n      'file-descriptor': {\r\n        pattern: /\\B&\\d\\b/,\r\n        alias: 'important'\r\n      },\r\n      operator: {\r\n        // Lots of redirections here, but not just that.\r\n        pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\r\n        inside: {\r\n          'file-descriptor': {\r\n            pattern: /^\\d/,\r\n            alias: 'important'\r\n          }\r\n        }\r\n      },\r\n      punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\r\n      number: {\r\n        pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\r\n        lookbehind: true\r\n      }\r\n    };\r\n    commandAfterHeredoc.inside = Prism.languages.bash;\r\n    /* Patterns in command substitution. */\r\n\r\n    var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\r\n    var inside = insideString.variable[1].inside;\r\n\r\n    for (var i = 0; i < toBeCopied.length; i++) {\r\n      inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\r\n    }\r\n\r\n    Prism.languages.shell = Prism.languages.bash;\r\n  })(Prism);\r\n}\r\n\r\nvar bash$1 = bash_1;\r\nvar css_1 = css$1;\r\ncss$1.displayName = 'css';\r\ncss$1.aliases = [];\r\n\r\nfunction css$1(Prism) {\r\n  (function (Prism) {\r\n    var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\r\n    Prism.languages.css = {\r\n      comment: /\\/\\*[\\s\\S]*?\\*\\//,\r\n      atrule: {\r\n        pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\r\n        inside: {\r\n          rule: /^@[\\w-]+/,\r\n          'selector-function-argument': {\r\n            pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\r\n            lookbehind: true,\r\n            alias: 'selector'\r\n          },\r\n          keyword: {\r\n            pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\r\n            lookbehind: true\r\n          } // See rest below\r\n\r\n        }\r\n      },\r\n      url: {\r\n        // https://drafts.csswg.org/css-values-3/#urls\r\n        pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\r\n        greedy: true,\r\n        inside: {\r\n          function: /^url/i,\r\n          punctuation: /^\\(|\\)$/,\r\n          string: {\r\n            pattern: RegExp('^' + string.source + '$'),\r\n            alias: 'url'\r\n          }\r\n        }\r\n      },\r\n      selector: {\r\n        pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\r\n        lookbehind: true\r\n      },\r\n      string: {\r\n        pattern: string,\r\n        greedy: true\r\n      },\r\n      property: {\r\n        pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\r\n        lookbehind: true\r\n      },\r\n      important: /!important\\b/i,\r\n      function: {\r\n        pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\r\n        lookbehind: true\r\n      },\r\n      punctuation: /[(){};:,]/\r\n    };\r\n    Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\r\n    var markup = Prism.languages.markup;\r\n\r\n    if (markup) {\r\n      markup.tag.addInlined('style', 'css');\r\n      markup.tag.addAttribute('style', 'css');\r\n    }\r\n  })(Prism);\r\n}\r\n\r\nvar css$2 = css_1;\r\nvar jsExtras_1 = jsExtras;\r\njsExtras.displayName = 'jsExtras';\r\njsExtras.aliases = [];\r\n\r\nfunction jsExtras(Prism) {\r\n  (function (Prism) {\r\n    Prism.languages.insertBefore('javascript', 'function-variable', {\r\n      'method-variable': {\r\n        pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\r\n        lookbehind: true,\r\n        alias: ['function-variable', 'method', 'function', 'property-access']\r\n      }\r\n    });\r\n    Prism.languages.insertBefore('javascript', 'function', {\r\n      method: {\r\n        pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\r\n        lookbehind: true,\r\n        alias: ['function', 'property-access']\r\n      }\r\n    });\r\n    Prism.languages.insertBefore('javascript', 'constant', {\r\n      'known-class-name': [{\r\n        // standard built-ins\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\r\n        pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\r\n        alias: 'class-name'\r\n      }, {\r\n        // errors\r\n        pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\r\n        alias: 'class-name'\r\n      }]\r\n    });\r\n    /**\r\n     * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\r\n     *\r\n     * @param {string} source\r\n     * @param {string} [flags]\r\n     * @returns {RegExp}\r\n     */\r\n\r\n    function withId(source, flags) {\r\n      return RegExp(source.replace(/<ID>/g, function () {\r\n        return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\r\n      }), flags);\r\n    }\r\n\r\n    Prism.languages.insertBefore('javascript', 'keyword', {\r\n      imports: {\r\n        // https://tc39.es/ecma262/#sec-imports\r\n        pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\r\n        lookbehind: true,\r\n        inside: Prism.languages.javascript\r\n      },\r\n      exports: {\r\n        // https://tc39.es/ecma262/#sec-exports\r\n        pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\r\n        lookbehind: true,\r\n        inside: Prism.languages.javascript\r\n      }\r\n    });\r\n    Prism.languages.javascript['keyword'].unshift({\r\n      pattern: /\\b(?:as|default|export|from|import)\\b/,\r\n      alias: 'module'\r\n    }, {\r\n      pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\r\n      alias: 'control-flow'\r\n    }, {\r\n      pattern: /\\bnull\\b/,\r\n      alias: ['null', 'nil']\r\n    }, {\r\n      pattern: /\\bundefined\\b/,\r\n      alias: 'nil'\r\n    });\r\n    Prism.languages.insertBefore('javascript', 'operator', {\r\n      spread: {\r\n        pattern: /\\.{3}/,\r\n        alias: 'operator'\r\n      },\r\n      arrow: {\r\n        pattern: /=>/,\r\n        alias: 'operator'\r\n      }\r\n    });\r\n    Prism.languages.insertBefore('javascript', 'punctuation', {\r\n      'property-access': {\r\n        pattern: withId(/(\\.\\s*)#?<ID>/.source),\r\n        lookbehind: true\r\n      },\r\n      'maybe-class-name': {\r\n        pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\r\n        lookbehind: true\r\n      },\r\n      dom: {\r\n        // this contains only a few commonly used DOM variables\r\n        pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\r\n        alias: 'variable'\r\n      },\r\n      console: {\r\n        pattern: /\\bconsole(?=\\s*\\.)/,\r\n        alias: 'class-name'\r\n      }\r\n    }); // add 'maybe-class-name' to tokens which might be a class name\r\n\r\n    var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\r\n\r\n    for (var i = 0; i < maybeClassNameTokens.length; i++) {\r\n      var token = maybeClassNameTokens[i];\r\n      var value = Prism.languages.javascript[token]; // convert regex to object\r\n\r\n      if (Prism.util.type(value) === 'RegExp') {\r\n        value = Prism.languages.javascript[token] = {\r\n          pattern: value\r\n        };\r\n      } // keep in mind that we don't support arrays\r\n\r\n\r\n      var inside = value.inside || {};\r\n      value.inside = inside;\r\n      inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\r\n    }\r\n  })(Prism);\r\n}\r\n\r\nvar jsExtras$1 = jsExtras_1;\r\nvar json_1 = json;\r\njson.displayName = 'json';\r\njson.aliases = ['webmanifest'];\r\n\r\nfunction json(Prism) {\r\n  // https://www.json.org/json-en.html\r\n  Prism.languages.json = {\r\n    property: {\r\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\r\n      lookbehind: true,\r\n      greedy: true\r\n    },\r\n    string: {\r\n      pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\r\n      lookbehind: true,\r\n      greedy: true\r\n    },\r\n    comment: {\r\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n      greedy: true\r\n    },\r\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\r\n    punctuation: /[{}[\\],]/,\r\n    operator: /:/,\r\n    boolean: /\\b(?:false|true)\\b/,\r\n    null: {\r\n      pattern: /\\bnull\\b/,\r\n      alias: 'keyword'\r\n    }\r\n  };\r\n  Prism.languages.webmanifest = Prism.languages.json;\r\n}\r\n\r\nvar json$1 = json_1;\r\nvar graphql_1 = graphql;\r\ngraphql.displayName = 'graphql';\r\ngraphql.aliases = [];\r\n\r\nfunction graphql(Prism) {\r\n  Prism.languages.graphql = {\r\n    comment: /#.*/,\r\n    description: {\r\n      pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\r\n      greedy: true,\r\n      alias: 'string',\r\n      inside: {\r\n        'language-markdown': {\r\n          pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\r\n          lookbehind: true,\r\n          inside: Prism.languages.markdown\r\n        }\r\n      }\r\n    },\r\n    string: {\r\n      pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\r\n      greedy: true\r\n    },\r\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\r\n    boolean: /\\b(?:false|true)\\b/,\r\n    variable: /\\$[a-z_]\\w*/i,\r\n    directive: {\r\n      pattern: /@[a-z_]\\w*/i,\r\n      alias: 'function'\r\n    },\r\n    'attr-name': {\r\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\r\n      greedy: true\r\n    },\r\n    'atom-input': {\r\n      pattern: /\\b[A-Z]\\w*Input\\b/,\r\n      alias: 'class-name'\r\n    },\r\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\r\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\r\n    'class-name': {\r\n      pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\r\n      lookbehind: true\r\n    },\r\n    fragment: {\r\n      pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\r\n      lookbehind: true,\r\n      alias: 'function'\r\n    },\r\n    'definition-mutation': {\r\n      pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\r\n      lookbehind: true,\r\n      alias: 'function'\r\n    },\r\n    'definition-query': {\r\n      pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\r\n      lookbehind: true,\r\n      alias: 'function'\r\n    },\r\n    keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\r\n    operator: /[!=|&]|\\.{3}/,\r\n    'property-query': /\\w+(?=\\s*\\()/,\r\n    object: /\\w+(?=\\s*\\{)/,\r\n    punctuation: /[!(){}\\[\\]:=,]/,\r\n    property: /\\w+/\r\n  };\r\n  Prism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\r\n    if (env.language !== 'graphql') {\r\n      return;\r\n    }\r\n    /**\r\n     * get the graphql token stream that we want to customize\r\n     *\r\n     * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n     * @type {Token[]}\r\n     */\r\n\r\n\r\n    var validTokens = env.tokens.filter(function (token) {\r\n      return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\r\n    });\r\n    var currentIndex = 0;\r\n    /**\r\n     * Returns whether the token relative to the current index has the given type.\r\n     *\r\n     * @param {number} offset\r\n     * @returns {Token | undefined}\r\n     */\r\n\r\n    function getToken(offset) {\r\n      return validTokens[currentIndex + offset];\r\n    }\r\n    /**\r\n     * Returns whether the token relative to the current index has the given type.\r\n     *\r\n     * @param {readonly string[]} types\r\n     * @param {number} [offset=0]\r\n     * @returns {boolean}\r\n     */\r\n\r\n\r\n    function isTokenType(types, offset) {\r\n      offset = offset || 0;\r\n\r\n      for (var i = 0; i < types.length; i++) {\r\n        var token = getToken(i + offset);\r\n\r\n        if (!token || token.type !== types[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n    /**\r\n     * Returns the index of the closing bracket to an opening bracket.\r\n     *\r\n     * It is assumed that `token[currentIndex - 1]` is an opening bracket.\r\n     *\r\n     * If no closing bracket could be found, `-1` will be returned.\r\n     *\r\n     * @param {RegExp} open\r\n     * @param {RegExp} close\r\n     * @returns {number}\r\n     */\r\n\r\n\r\n    function findClosingBracket(open, close) {\r\n      var stackHeight = 1;\r\n\r\n      for (var i = currentIndex; i < validTokens.length; i++) {\r\n        var token = validTokens[i];\r\n        var content = token.content;\r\n\r\n        if (token.type === 'punctuation' && typeof content === 'string') {\r\n          if (open.test(content)) {\r\n            stackHeight++;\r\n          } else if (close.test(content)) {\r\n            stackHeight--;\r\n\r\n            if (stackHeight === 0) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n    /**\r\n     * Adds an alias to the given token.\r\n     *\r\n     * @param {Token} token\r\n     * @param {string} alias\r\n     * @returns {void}\r\n     */\r\n\r\n\r\n    function addAlias(token, alias) {\r\n      var aliases = token.alias;\r\n\r\n      if (!aliases) {\r\n        token.alias = aliases = [];\r\n      } else if (!Array.isArray(aliases)) {\r\n        token.alias = aliases = [aliases];\r\n      }\r\n\r\n      aliases.push(alias);\r\n    }\r\n\r\n    for (; currentIndex < validTokens.length;) {\r\n      var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\r\n\r\n      if (startToken.type === 'keyword' && startToken.content === 'mutation') {\r\n        // any array of the names of all input variables (if any)\r\n        var inputVariables = [];\r\n\r\n        if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\r\n          // definition\r\n          currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\r\n\r\n          var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\r\n\r\n          if (definitionEnd === -1) {\r\n            continue;\r\n          } // find all input variables\r\n\r\n\r\n          for (; currentIndex < definitionEnd; currentIndex++) {\r\n            var t = getToken(0);\r\n\r\n            if (t.type === 'variable') {\r\n              addAlias(t, 'variable-input');\r\n              inputVariables.push(t.content);\r\n            }\r\n          }\r\n\r\n          currentIndex = definitionEnd + 1;\r\n        }\r\n\r\n        if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\r\n          currentIndex++; // skip opening bracket\r\n\r\n          addAlias(getToken(0), 'property-mutation');\r\n\r\n          if (inputVariables.length > 0) {\r\n            var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\r\n\r\n            if (mutationEnd === -1) {\r\n              continue;\r\n            } // give references to input variables a special alias\r\n\r\n\r\n            for (var i = currentIndex; i < mutationEnd; i++) {\r\n              var varToken = validTokens[i];\r\n\r\n              if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\r\n                addAlias(varToken, 'variable-input');\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nvar graphql$1 = graphql_1;\r\nvar markup_1 = markup$1;\r\nmarkup$1.displayName = 'markup';\r\nmarkup$1.aliases = ['html', 'mathml', 'svg', 'xml', 'ssml', 'atom', 'rss'];\r\n\r\nfunction markup$1(Prism) {\r\n  Prism.languages.markup = {\r\n    comment: {\r\n      pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\r\n      greedy: true\r\n    },\r\n    prolog: {\r\n      pattern: /<\\?[\\s\\S]+?\\?>/,\r\n      greedy: true\r\n    },\r\n    doctype: {\r\n      // https://www.w3.org/TR/xml/#NT-doctypedecl\r\n      pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\r\n      greedy: true,\r\n      inside: {\r\n        'internal-subset': {\r\n          pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\r\n          lookbehind: true,\r\n          greedy: true,\r\n          inside: null // see below\r\n\r\n        },\r\n        string: {\r\n          pattern: /\"[^\"]*\"|'[^']*'/,\r\n          greedy: true\r\n        },\r\n        punctuation: /^<!|>$|[[\\]]/,\r\n        'doctype-tag': /^DOCTYPE/i,\r\n        name: /[^\\s<>'\"]+/\r\n      }\r\n    },\r\n    cdata: {\r\n      pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n      greedy: true\r\n    },\r\n    tag: {\r\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\r\n      greedy: true,\r\n      inside: {\r\n        tag: {\r\n          pattern: /^<\\/?[^\\s>\\/]+/,\r\n          inside: {\r\n            punctuation: /^<\\/?/,\r\n            namespace: /^[^\\s>\\/:]+:/\r\n          }\r\n        },\r\n        'special-attr': [],\r\n        'attr-value': {\r\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\r\n          inside: {\r\n            punctuation: [{\r\n              pattern: /^=/,\r\n              alias: 'attr-equals'\r\n            }, /\"|'/]\r\n          }\r\n        },\r\n        punctuation: /\\/?>/,\r\n        'attr-name': {\r\n          pattern: /[^\\s>\\/]+/,\r\n          inside: {\r\n            namespace: /^[^\\s>\\/:]+:/\r\n          }\r\n        }\r\n      }\r\n    },\r\n    entity: [{\r\n      pattern: /&[\\da-z]{1,8};/i,\r\n      alias: 'named-entity'\r\n    }, /&#x?[\\da-f]{1,8};/i]\r\n  };\r\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];\r\n  Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\r\n\r\n  Prism.hooks.add('wrap', function (env) {\r\n    if (env.type === 'entity') {\r\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\r\n    }\r\n  });\r\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\r\n    /**\r\n     * Adds an inlined language to markup.\r\n     *\r\n     * An example of an inlined language is CSS with `<style>` tags.\r\n     *\r\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\r\n     * case insensitive.\r\n     * @param {string} lang The language key.\r\n     * @example\r\n     * addInlined('style', 'css');\r\n     */\r\n    value: function addInlined(tagName, lang) {\r\n      var includedCdataInside = {};\r\n      includedCdataInside['language-' + lang] = {\r\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\r\n        lookbehind: true,\r\n        inside: Prism.languages[lang]\r\n      };\r\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\r\n      var inside = {\r\n        'included-cdata': {\r\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\r\n          inside: includedCdataInside\r\n        }\r\n      };\r\n      inside['language-' + lang] = {\r\n        pattern: /[\\s\\S]+/,\r\n        inside: Prism.languages[lang]\r\n      };\r\n      var def = {};\r\n      def[tagName] = {\r\n        pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\r\n          return tagName;\r\n        }), 'i'),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: inside\r\n      };\r\n      Prism.languages.insertBefore('markup', 'cdata', def);\r\n    }\r\n  });\r\n  Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\r\n    /**\r\n     * Adds an pattern to highlight languages embedded in HTML attributes.\r\n     *\r\n     * An example of an inlined language is CSS with `style` attributes.\r\n     *\r\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\r\n     * case insensitive.\r\n     * @param {string} lang The language key.\r\n     * @example\r\n     * addAttribute('style', 'css');\r\n     */\r\n    value: function value(attrName, lang) {\r\n      Prism.languages.markup.tag.inside['special-attr'].push({\r\n        pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\r\n        lookbehind: true,\r\n        inside: {\r\n          'attr-name': /^[^\\s=]+/,\r\n          'attr-value': {\r\n            pattern: /=[\\s\\S]+/,\r\n            inside: {\r\n              value: {\r\n                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\r\n                lookbehind: true,\r\n                alias: [lang, 'language-' + lang],\r\n                inside: Prism.languages[lang]\r\n              },\r\n              punctuation: [{\r\n                pattern: /^=/,\r\n                alias: 'attr-equals'\r\n              }, /\"|'/]\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n  Prism.languages.html = Prism.languages.markup;\r\n  Prism.languages.mathml = Prism.languages.markup;\r\n  Prism.languages.svg = Prism.languages.markup;\r\n  Prism.languages.xml = Prism.languages.extend('markup', {});\r\n  Prism.languages.ssml = Prism.languages.xml;\r\n  Prism.languages.atom = Prism.languages.xml;\r\n  Prism.languages.rss = Prism.languages.xml;\r\n}\r\n\r\nvar markup$2 = markup_1;\r\nvar markdown_1 = markdown;\r\nmarkdown.displayName = 'markdown';\r\nmarkdown.aliases = ['md'];\r\n\r\nfunction markdown(Prism) {\r\n  (function (Prism) {\r\n    // Allow only one line break\r\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\r\n    /**\r\n     * This function is intended for the creation of the bold or italic pattern.\r\n     *\r\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\r\n     *\r\n     * _Note:_ Keep in mind that this adds a capturing group.\r\n     *\r\n     * @param {string} pattern\r\n     * @returns {RegExp}\r\n     */\r\n\r\n    function createInline(pattern) {\r\n      pattern = pattern.replace(/<inner>/g, function () {\r\n        return inner;\r\n      });\r\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\r\n    }\r\n\r\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\r\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\r\n      return tableCell;\r\n    });\r\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\r\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\r\n    Prism.languages.insertBefore('markdown', 'prolog', {\r\n      'front-matter-block': {\r\n        pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          punctuation: /^---|---$/,\r\n          'front-matter': {\r\n            pattern: /\\S+(?:\\s+\\S+)*/,\r\n            alias: ['yaml', 'language-yaml'],\r\n            inside: Prism.languages.yaml\r\n          }\r\n        }\r\n      },\r\n      blockquote: {\r\n        // > ...\r\n        pattern: /^>(?:[\\t ]*>)*/m,\r\n        alias: 'punctuation'\r\n      },\r\n      table: {\r\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\r\n        inside: {\r\n          'table-data-rows': {\r\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\r\n            lookbehind: true,\r\n            inside: {\r\n              'table-data': {\r\n                pattern: RegExp(tableCell),\r\n                inside: Prism.languages.markdown\r\n              },\r\n              punctuation: /\\|/\r\n            }\r\n          },\r\n          'table-line': {\r\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\r\n            lookbehind: true,\r\n            inside: {\r\n              punctuation: /\\||:?-{3,}:?/\r\n            }\r\n          },\r\n          'table-header-row': {\r\n            pattern: RegExp('^' + tableRow + '$'),\r\n            inside: {\r\n              'table-header': {\r\n                pattern: RegExp(tableCell),\r\n                alias: 'important',\r\n                inside: Prism.languages.markdown\r\n              },\r\n              punctuation: /\\|/\r\n            }\r\n          }\r\n        }\r\n      },\r\n      code: [{\r\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\r\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\r\n        lookbehind: true,\r\n        alias: 'keyword'\r\n      }, {\r\n        // ```optional language\r\n        // code block\r\n        // ```\r\n        pattern: /^```[\\s\\S]*?^```$/m,\r\n        greedy: true,\r\n        inside: {\r\n          'code-block': {\r\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\r\n            lookbehind: true\r\n          },\r\n          'code-language': {\r\n            pattern: /^(```).+/,\r\n            lookbehind: true\r\n          },\r\n          punctuation: /```/\r\n        }\r\n      }],\r\n      title: [{\r\n        // title 1\r\n        // =======\r\n        // title 2\r\n        // -------\r\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\r\n        alias: 'important',\r\n        inside: {\r\n          punctuation: /==+$|--+$/\r\n        }\r\n      }, {\r\n        // # title 1\r\n        // ###### title 6\r\n        pattern: /(^\\s*)#.+/m,\r\n        lookbehind: true,\r\n        alias: 'important',\r\n        inside: {\r\n          punctuation: /^#+|#+$/\r\n        }\r\n      }],\r\n      hr: {\r\n        // ***\r\n        // ---\r\n        // * * *\r\n        // -----------\r\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      list: {\r\n        // * item\r\n        // + item\r\n        // - item\r\n        // 1. item\r\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\r\n        lookbehind: true,\r\n        alias: 'punctuation'\r\n      },\r\n      'url-reference': {\r\n        // [id]: http://example.com \"Optional title\"\r\n        // [id]: http://example.com 'Optional title'\r\n        // [id]: http://example.com (Optional title)\r\n        // [id]: <http://example.com> \"Optional title\"\r\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\r\n        inside: {\r\n          variable: {\r\n            pattern: /^(!?\\[)[^\\]]+/,\r\n            lookbehind: true\r\n          },\r\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\r\n          punctuation: /^[\\[\\]!:]|[<>]/\r\n        },\r\n        alias: 'url'\r\n      },\r\n      bold: {\r\n        // **strong**\r\n        // __strong__\r\n        // allow one nested instance of italic text using the same delimiter\r\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n\r\n          },\r\n          punctuation: /\\*\\*|__/\r\n        }\r\n      },\r\n      italic: {\r\n        // *em*\r\n        // _em_\r\n        // allow one nested instance of bold text using the same delimiter\r\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n\r\n          },\r\n          punctuation: /[*_]/\r\n        }\r\n      },\r\n      strike: {\r\n        // ~~strike through~~\r\n        // ~strike~\r\n        // eslint-disable-next-line regexp/strict\r\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          content: {\r\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n\r\n          },\r\n          punctuation: /~~?/\r\n        }\r\n      },\r\n      'code-snippet': {\r\n        // `code`\r\n        // ``code``\r\n        pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: ['code', 'keyword']\r\n      },\r\n      url: {\r\n        // [example](http://example.com \"Optional title\")\r\n        // [example][id]\r\n        // [example] [id]\r\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: {\r\n          operator: /^!/,\r\n          content: {\r\n            pattern: /(^\\[)[^\\]]+(?=\\])/,\r\n            lookbehind: true,\r\n            inside: {} // see below\r\n\r\n          },\r\n          variable: {\r\n            pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\r\n            lookbehind: true\r\n          },\r\n          url: {\r\n            pattern: /(^\\]\\()[^\\s)]+/,\r\n            lookbehind: true\r\n          },\r\n          string: {\r\n            pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\r\n            lookbehind: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\r\n      ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\r\n        if (token !== inside) {\r\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\r\n        }\r\n      });\r\n    });\r\n    Prism.hooks.add('after-tokenize', function (env) {\r\n      if (env.language !== 'markdown' && env.language !== 'md') {\r\n        return;\r\n      }\r\n\r\n      function walkTokens(tokens) {\r\n        if (!tokens || typeof tokens === 'string') {\r\n          return;\r\n        }\r\n\r\n        for (var i = 0, l = tokens.length; i < l; i++) {\r\n          var token = tokens[i];\r\n\r\n          if (token.type !== 'code') {\r\n            walkTokens(token.content);\r\n            continue;\r\n          }\r\n          /*\r\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\r\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\r\n           *\r\n           * token.content = [\r\n           *     <span class=\"punctuation\">```</span>,\r\n           *     <span class=\"code-language\">xxxx</span>,\r\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\r\n           *     <span class=\"code-block\">...</span>,\r\n           *     '\\n', // exactly one new lines again\r\n           *     <span class=\"punctuation\">```</span>\r\n           * ];\r\n           */\r\n\r\n\r\n          var codeLang = token.content[1];\r\n          var codeBlock = token.content[3];\r\n\r\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\r\n            // this might be a language that Prism does not support\r\n            // do some replacements to support C++, C#, and F#\r\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\r\n\r\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\r\n            var alias = 'language-' + lang; // add alias\r\n\r\n            if (!codeBlock.alias) {\r\n              codeBlock.alias = [alias];\r\n            } else if (typeof codeBlock.alias === 'string') {\r\n              codeBlock.alias = [codeBlock.alias, alias];\r\n            } else {\r\n              codeBlock.alias.push(alias);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      walkTokens(env.tokens);\r\n    });\r\n    Prism.hooks.add('wrap', function (env) {\r\n      if (env.type !== 'code-block') {\r\n        return;\r\n      }\r\n\r\n      var codeLang = '';\r\n\r\n      for (var i = 0, l = env.classes.length; i < l; i++) {\r\n        var cls = env.classes[i];\r\n        var match = /language-(.+)/.exec(cls);\r\n\r\n        if (match) {\r\n          codeLang = match[1];\r\n          break;\r\n        }\r\n      }\r\n\r\n      var grammar = Prism.languages[codeLang];\r\n\r\n      if (!grammar) {\r\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\r\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\r\n          env.attributes['id'] = id;\r\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\r\n            var ele = document.getElementById(id);\r\n\r\n            if (ele) {\r\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        env.content = Prism.highlight(textContent(env.content.value), grammar, codeLang);\r\n      }\r\n    });\r\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\r\n    /**\r\n     * A list of known entity names.\r\n     *\r\n     * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\r\n     *\r\n     * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\r\n     */\r\n\r\n    var KNOWN_ENTITY_NAMES = {\r\n      amp: '&',\r\n      lt: '<',\r\n      gt: '>',\r\n      quot: '\"'\r\n    }; // IE 11 doesn't support `String.fromCodePoint`\r\n\r\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\r\n    /**\r\n     * Returns the text content of a given HTML source code string.\r\n     *\r\n     * @param {string} html\r\n     * @returns {string}\r\n     */\r\n\r\n    function textContent(html) {\r\n      // remove all tags\r\n      var text = html.replace(tagPattern, ''); // decode known entities\r\n\r\n      text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\r\n        code = code.toLowerCase();\r\n\r\n        if (code[0] === '#') {\r\n          var value;\r\n\r\n          if (code[1] === 'x') {\r\n            value = parseInt(code.slice(2), 16);\r\n          } else {\r\n            value = Number(code.slice(1));\r\n          }\r\n\r\n          return fromCodePoint(value);\r\n        } else {\r\n          var known = KNOWN_ENTITY_NAMES[code];\r\n\r\n          if (known) {\r\n            return known;\r\n          } // unable to decode\r\n\r\n\r\n          return m;\r\n        }\r\n      });\r\n      return text;\r\n    }\r\n\r\n    Prism.languages.md = Prism.languages.markdown;\r\n  })(Prism);\r\n}\r\n\r\nvar markdown$1 = markdown_1;\r\nvar yaml_1 = yaml;\r\nyaml.displayName = 'yaml';\r\nyaml.aliases = ['yml'];\r\n\r\nfunction yaml(Prism) {\r\n  (function (Prism) {\r\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\r\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\r\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\r\n\r\n    var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\r\n\r\n    var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\r\n    // This is a simplified version that doesn't support \"#\" and multiline keys\r\n    // All these long scarry character classes are simplified versions of YAML's characters\r\n\r\n    var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\r\n      return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\r\n    });\r\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\r\n    /**\r\n     *\r\n     * @param {string} value\r\n     * @param {string} [flags]\r\n     * @returns {RegExp}\r\n     */\r\n\r\n    function createValuePattern(value, flags) {\r\n      flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\r\n\r\n      var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\r\n        return properties;\r\n      }).replace(/<<value>>/g, function () {\r\n        return value;\r\n      });\r\n      return RegExp(pattern, flags);\r\n    }\r\n\r\n    Prism.languages.yaml = {\r\n      scalar: {\r\n        pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\r\n          return properties;\r\n        })),\r\n        lookbehind: true,\r\n        alias: 'string'\r\n      },\r\n      comment: /#.*/,\r\n      key: {\r\n        pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\r\n          return properties;\r\n        }).replace(/<<key>>/g, function () {\r\n          return '(?:' + plainKey + '|' + string + ')';\r\n        })),\r\n        lookbehind: true,\r\n        greedy: true,\r\n        alias: 'atrule'\r\n      },\r\n      directive: {\r\n        pattern: /(^[ \\t]*)%.+/m,\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      datetime: {\r\n        pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\r\n        lookbehind: true,\r\n        alias: 'number'\r\n      },\r\n      boolean: {\r\n        pattern: createValuePattern(/false|true/.source, 'i'),\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      null: {\r\n        pattern: createValuePattern(/null|~/.source, 'i'),\r\n        lookbehind: true,\r\n        alias: 'important'\r\n      },\r\n      string: {\r\n        pattern: createValuePattern(string),\r\n        lookbehind: true,\r\n        greedy: true\r\n      },\r\n      number: {\r\n        pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\r\n        lookbehind: true\r\n      },\r\n      tag: tag,\r\n      important: anchorOrAlias,\r\n      punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\r\n    };\r\n    Prism.languages.yml = Prism.languages.yaml;\r\n  })(Prism);\r\n}\r\n\r\nvar yaml$1 = yaml_1;\r\nvar typescript_1 = typescript;\r\ntypescript.displayName = 'typescript';\r\ntypescript.aliases = ['ts'];\r\n\r\nfunction typescript(Prism) {\r\n  (function (Prism) {\r\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\r\n      'class-name': {\r\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\r\n        lookbehind: true,\r\n        greedy: true,\r\n        inside: null // see below\r\n\r\n      },\r\n      builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\r\n    }); // The keywords TypeScript adds to JavaScript\r\n\r\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\r\n    /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\r\n    /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\r\n\r\n    delete Prism.languages.typescript['parameter'];\r\n    delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\r\n\r\n    var typeInside = Prism.languages.extend('typescript', {});\r\n    delete typeInside['class-name'];\r\n    Prism.languages.typescript['class-name'].inside = typeInside;\r\n    Prism.languages.insertBefore('typescript', 'function', {\r\n      decorator: {\r\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\r\n        inside: {\r\n          at: {\r\n            pattern: /^@/,\r\n            alias: 'operator'\r\n          },\r\n          function: /^[\\s\\S]+/\r\n        }\r\n      },\r\n      'generic-function': {\r\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\r\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\r\n        greedy: true,\r\n        inside: {\r\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\r\n          generic: {\r\n            pattern: /<[\\s\\S]+/,\r\n            // everything after the first <\r\n            alias: 'class-name',\r\n            inside: typeInside\r\n          }\r\n        }\r\n      }\r\n    });\r\n    Prism.languages.ts = Prism.languages.typescript;\r\n  })(Prism);\r\n}\r\n\r\nvar typescript$1 = typescript_1;\r\nvar refractorJsx = jsx_1;\r\nvar refractorTypescript = typescript_1;\r\nvar tsx_1 = tsx;\r\ntsx.displayName = 'tsx';\r\ntsx.aliases = [];\r\n\r\nfunction tsx(Prism) {\r\n  Prism.register(refractorJsx);\r\n  Prism.register(refractorTypescript);\r\n\r\n  (function (Prism) {\r\n    var typescript = Prism.util.clone(Prism.languages.typescript);\r\n    Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\r\n\r\n    delete Prism.languages.tsx['parameter'];\r\n    delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\r\n    // Idea by https://github.com/karlhorky\r\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\r\n\r\n    var tag = Prism.languages.tsx.tag;\r\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\r\n    tag.lookbehind = true;\r\n  })(Prism);\r\n}\r\n\r\nvar tsx$1 = tsx_1;\r\n\r\nfunction _objectWithoutProperties(source, excluded) {\r\n  if (source == null) return {};\r\n\r\n  var target = _objectWithoutPropertiesLoose(source, excluded);\r\n\r\n  var key, i;\r\n\r\n  if (Object.getOwnPropertySymbols) {\r\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\r\n\r\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\r\n      key = sourceSymbolKeys[i];\r\n      if (excluded.indexOf(key) >= 0) continue;\r\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n    arr2[i] = arr[i];\r\n  }\r\n\r\n  return arr2;\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction _objectSpread(target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\r\n    var ownKeys = Object.keys(source);\r\n\r\n    if (typeof Object.getOwnPropertySymbols === 'function') {\r\n      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {\r\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\r\n      }));\r\n    }\r\n\r\n    ownKeys.forEach(function (key) {\r\n      _defineProperty(target, key, source[key]);\r\n    });\r\n  }\r\n\r\n  return target;\r\n} //\r\n// Super simple, non-algorithmic solution since the\r\n// number of class names will not be greater than 4\r\n\r\n\r\nfunction powerSetPermutations(arr) {\r\n  var arrLength = arr.length;\r\n  if (arrLength === 0 || arrLength === 1) return arr;\r\n\r\n  if (arrLength === 2) {\r\n    // prettier-ignore\r\n    return [arr[0], arr[1], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0])];\r\n  }\r\n\r\n  if (arrLength === 3) {\r\n    return [arr[0], arr[1], arr[2], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0])];\r\n  }\r\n\r\n  if (arrLength >= 4) {\r\n    // Currently does not support more than 4 extra\r\n    // class names (after `.token` has been removed)\r\n    return [arr[0], arr[1], arr[2], arr[3], \"\".concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[3], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[3]), \"\".concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[3], \".\").concat(arr[0]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[2], \".\").concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[1], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[0], \".\").concat(arr[2], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[0], \".\").concat(arr[2]), \"\".concat(arr[3], \".\").concat(arr[1], \".\").concat(arr[2], \".\").concat(arr[0]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[0], \".\").concat(arr[1]), \"\".concat(arr[3], \".\").concat(arr[2], \".\").concat(arr[1], \".\").concat(arr[0])];\r\n  }\r\n}\r\n\r\nvar classNameCombinations = {};\r\n\r\nfunction getClassNameCombinations(classNames) {\r\n  if (classNames.length === 0 || classNames.length === 1) return classNames;\r\n  var key = classNames.join('.');\r\n\r\n  if (!classNameCombinations[key]) {\r\n    classNameCombinations[key] = powerSetPermutations(classNames);\r\n  }\r\n\r\n  return classNameCombinations[key];\r\n}\r\n\r\nfunction createStyleObject(classNames) {\r\n  var elementStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var stylesheet = arguments.length > 2 ? arguments[2] : undefined;\r\n  var nonTokenClassNames = classNames.filter(function (className) {\r\n    return className !== 'token';\r\n  });\r\n  var classNamesCombinations = getClassNameCombinations(nonTokenClassNames);\r\n  return classNamesCombinations.reduce(function (styleObject, className) {\r\n    return _objectSpread({}, styleObject, stylesheet[className]);\r\n  }, elementStyle);\r\n}\r\n\r\nfunction createClassNameString(classNames) {\r\n  return classNames.join(' ');\r\n}\r\n\r\nfunction createChildren(stylesheet, useInlineStyles) {\r\n  var childrenCount = 0;\r\n  return function (children) {\r\n    childrenCount += 1;\r\n    return children.map(function (child, i) {\r\n      return createElement({\r\n        node: child,\r\n        stylesheet: stylesheet,\r\n        useInlineStyles: useInlineStyles,\r\n        key: \"code-segment-\".concat(childrenCount, \"-\").concat(i)\r\n      });\r\n    });\r\n  };\r\n}\r\n\r\nfunction createElement(_ref) {\r\n  var node = _ref.node,\r\n      stylesheet = _ref.stylesheet,\r\n      _ref$style = _ref.style,\r\n      style = _ref$style === void 0 ? {} : _ref$style,\r\n      useInlineStyles = _ref.useInlineStyles,\r\n      key = _ref.key;\r\n  var properties = node.properties,\r\n      type = node.type,\r\n      TagName = node.tagName,\r\n      value = node.value;\r\n\r\n  if (type === 'text') {\r\n    return value;\r\n  } else if (TagName) {\r\n    var childrenCreator = createChildren(stylesheet, useInlineStyles);\r\n    var props;\r\n\r\n    if (!useInlineStyles) {\r\n      props = _objectSpread({}, properties, {\r\n        className: createClassNameString(properties.className)\r\n      });\r\n    } else {\r\n      var allStylesheetSelectors = Object.keys(stylesheet).reduce(function (classes, selector) {\r\n        selector.split('.').forEach(function (className) {\r\n          if (!classes.includes(className)) classes.push(className);\r\n        });\r\n        return classes;\r\n      }, []); // For compatibility with older versions of react-syntax-highlighter\r\n\r\n      var startingClassName = properties.className && properties.className.includes('token') ? ['token'] : [];\r\n      var className = properties.className && startingClassName.concat(properties.className.filter(function (className) {\r\n        return !allStylesheetSelectors.includes(className);\r\n      }));\r\n      props = _objectSpread({}, properties, {\r\n        className: createClassNameString(className) || undefined,\r\n        style: createStyleObject(properties.className, Object.assign({}, properties.style, style), stylesheet)\r\n      });\r\n    }\r\n\r\n    var children = childrenCreator(node.children);\r\n    return React__default.createElement(TagName, _extends({\r\n      key: key\r\n    }, props), children);\r\n  }\r\n}\r\n\r\nvar checkForListedLanguage = function checkForListedLanguage(astGenerator, language) {\r\n  var langs = astGenerator.listLanguages();\r\n  return langs.indexOf(language) !== -1;\r\n};\r\n\r\nvar newLineRegex = /\\n/g;\r\n\r\nfunction getNewLines(str) {\r\n  return str.match(newLineRegex);\r\n}\r\n\r\nfunction getAllLineNumbers(_ref) {\r\n  var lines = _ref.lines,\r\n      startingLineNumber = _ref.startingLineNumber,\r\n      style = _ref.style;\r\n  return lines.map(function (_, i) {\r\n    var number = i + startingLineNumber;\r\n    return React__default.createElement(\"span\", {\r\n      key: \"line-\".concat(i),\r\n      className: \"react-syntax-highlighter-line-number\",\r\n      style: typeof style === 'function' ? style(number) : style\r\n    }, \"\".concat(number, \"\\n\"));\r\n  });\r\n}\r\n\r\nfunction AllLineNumbers(_ref2) {\r\n  var codeString = _ref2.codeString,\r\n      codeStyle = _ref2.codeStyle,\r\n      _ref2$containerStyle = _ref2.containerStyle,\r\n      containerStyle = _ref2$containerStyle === void 0 ? {\r\n    float: 'left',\r\n    paddingRight: '10px'\r\n  } : _ref2$containerStyle,\r\n      _ref2$numberStyle = _ref2.numberStyle,\r\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\r\n      startingLineNumber = _ref2.startingLineNumber;\r\n  return React__default.createElement(\"code\", {\r\n    style: Object.assign({}, codeStyle, containerStyle)\r\n  }, getAllLineNumbers({\r\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\r\n    style: numberStyle,\r\n    startingLineNumber: startingLineNumber\r\n  }));\r\n}\r\n\r\nfunction getEmWidthOfNumber(num) {\r\n  return \"\".concat(num.toString().length, \".25em\");\r\n}\r\n\r\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\r\n  return {\r\n    type: 'element',\r\n    tagName: 'span',\r\n    properties: {\r\n      key: \"line-number--\".concat(lineNumber),\r\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\r\n      style: inlineLineNumberStyle\r\n    },\r\n    children: [{\r\n      type: 'text',\r\n      value: lineNumber\r\n    }]\r\n  };\r\n}\r\n\r\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\r\n  // minimally necessary styling for line numbers\r\n  var defaultLineNumberStyle = {\r\n    display: 'inline-block',\r\n    minWidth: getEmWidthOfNumber(largestLineNumber),\r\n    paddingRight: '1em',\r\n    textAlign: 'right',\r\n    userSelect: 'none'\r\n  }; // prep custom styling\r\n\r\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\r\n\r\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\r\n\r\n  return assembledStyle;\r\n}\r\n\r\nfunction createLineElement(_ref3) {\r\n  var children = _ref3.children,\r\n      lineNumber = _ref3.lineNumber,\r\n      lineNumberStyle = _ref3.lineNumberStyle,\r\n      largestLineNumber = _ref3.largestLineNumber,\r\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\r\n      _ref3$lineProps = _ref3.lineProps,\r\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\r\n      _ref3$className = _ref3.className,\r\n      className = _ref3$className === void 0 ? [] : _ref3$className,\r\n      showLineNumbers = _ref3.showLineNumbers,\r\n      wrapLongLines = _ref3.wrapLongLines;\r\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\r\n  properties['className'] = className;\r\n\r\n  if (lineNumber && showInlineLineNumbers) {\r\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\r\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\r\n  }\r\n\r\n  if (wrapLongLines & showLineNumbers) {\r\n    properties.style = _objectSpread({}, properties.style, {\r\n      display: 'flex'\r\n    });\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    tagName: 'span',\r\n    properties: properties,\r\n    children: children\r\n  };\r\n}\r\n\r\nfunction flattenCodeTree(tree) {\r\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\r\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\r\n\r\n  for (var i = 0; i < tree.length; i++) {\r\n    var node = tree[i];\r\n\r\n    if (node.type === 'text') {\r\n      newTree.push(createLineElement({\r\n        children: [node],\r\n        className: _toConsumableArray(new Set(className))\r\n      }));\r\n    } else if (node.children) {\r\n      var classNames = className.concat(node.properties.className);\r\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\r\n    }\r\n  }\r\n\r\n  return newTree;\r\n}\r\n\r\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\r\n  var _ref4;\r\n\r\n  var tree = flattenCodeTree(codeTree.value);\r\n  var newTree = [];\r\n  var lastLineBreakIndex = -1;\r\n  var index = 0;\r\n\r\n  function createWrappedLine(children, lineNumber) {\r\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\r\n    return createLineElement({\r\n      children: children,\r\n      lineNumber: lineNumber,\r\n      lineNumberStyle: lineNumberStyle,\r\n      largestLineNumber: largestLineNumber,\r\n      showInlineLineNumbers: showInlineLineNumbers,\r\n      lineProps: lineProps,\r\n      className: className,\r\n      showLineNumbers: showLineNumbers,\r\n      wrapLongLines: wrapLongLines\r\n    });\r\n  }\r\n\r\n  function createUnwrappedLine(children, lineNumber) {\r\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\r\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\r\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\r\n    }\r\n\r\n    return children;\r\n  }\r\n\r\n  function createLine(children, lineNumber) {\r\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\r\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\r\n  }\r\n\r\n  var _loop = function _loop() {\r\n    var node = tree[index];\r\n    var value = node.children[0].value;\r\n    var newLines = getNewLines(value);\r\n\r\n    if (newLines) {\r\n      var splitValue = value.split('\\n');\r\n      splitValue.forEach(function (text, i) {\r\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\r\n        var newChild = {\r\n          type: 'text',\r\n          value: \"\".concat(text, \"\\n\")\r\n        }; // if it's the first line\r\n\r\n        if (i === 0) {\r\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\r\n            children: [newChild],\r\n            className: node.properties.className\r\n          }));\r\n\r\n          var _line = createLine(_children, lineNumber);\r\n\r\n          newTree.push(_line); // if it's the last line\r\n        } else if (i === splitValue.length - 1) {\r\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\r\n\r\n          if (stringChild) {\r\n            var lastLineInPreviousSpan = {\r\n              type: 'text',\r\n              value: \"\".concat(text)\r\n            };\r\n            var newElem = createLineElement({\r\n              children: [lastLineInPreviousSpan],\r\n              className: node.properties.className\r\n            });\r\n            tree.splice(index + 1, 0, newElem);\r\n          } else {\r\n            var _children2 = [newChild];\r\n\r\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\r\n\r\n            newTree.push(_line2);\r\n          } // if it's neither the first nor the last line\r\n\r\n        } else {\r\n          var _children3 = [newChild];\r\n\r\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\r\n\r\n          newTree.push(_line3);\r\n        }\r\n      });\r\n      lastLineBreakIndex = index;\r\n    }\r\n\r\n    index++;\r\n  };\r\n\r\n  while (index < tree.length) {\r\n    _loop();\r\n  }\r\n\r\n  if (lastLineBreakIndex !== tree.length - 1) {\r\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\r\n\r\n    if (children && children.length) {\r\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\r\n      var line = createLine(children, lineNumber);\r\n      newTree.push(line);\r\n    }\r\n  }\r\n\r\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\r\n}\r\n\r\nfunction defaultRenderer(_ref5) {\r\n  var rows = _ref5.rows,\r\n      stylesheet = _ref5.stylesheet,\r\n      useInlineStyles = _ref5.useInlineStyles;\r\n  return rows.map(function (node, i) {\r\n    return createElement({\r\n      node: node,\r\n      stylesheet: stylesheet,\r\n      useInlineStyles: useInlineStyles,\r\n      key: \"code-segement\".concat(i)\r\n    });\r\n  });\r\n} // only highlight.js has the highlightAuto method\r\n\r\n\r\nfunction isHighlightJs(astGenerator) {\r\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\r\n}\r\n\r\nfunction getCodeTree(_ref6) {\r\n  var astGenerator = _ref6.astGenerator,\r\n      language = _ref6.language,\r\n      code = _ref6.code,\r\n      defaultCodeValue = _ref6.defaultCodeValue; // figure out whether we're using lowlight/highlight or refractor/prism\r\n  // then attempt highlighting accordingly\r\n  // lowlight/highlight?\r\n\r\n  if (isHighlightJs(astGenerator)) {\r\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\r\n\r\n    if (language === 'text') {\r\n      return {\r\n        value: defaultCodeValue,\r\n        language: 'text'\r\n      };\r\n    } else if (hasLanguage) {\r\n      return astGenerator.highlight(language, code);\r\n    } else {\r\n      return astGenerator.highlightAuto(code);\r\n    }\r\n  } // must be refractor/prism, then\r\n\r\n\r\n  try {\r\n    return language && language !== 'text' ? {\r\n      value: astGenerator.highlight(code, language)\r\n    } : {\r\n      value: defaultCodeValue\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      value: defaultCodeValue\r\n    };\r\n  }\r\n}\r\n\r\nfunction highlight$1(defaultAstGenerator, defaultStyle) {\r\n  return function SyntaxHighlighter(_ref7) {\r\n    var language = _ref7.language,\r\n        children = _ref7.children,\r\n        _ref7$style = _ref7.style,\r\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\r\n        _ref7$customStyle = _ref7.customStyle,\r\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\r\n        _ref7$codeTagProps = _ref7.codeTagProps,\r\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\r\n      className: language ? \"language-\".concat(language) : undefined,\r\n      style: _objectSpread({}, style['code[class*=\"language-\"]'], style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\r\n    } : _ref7$codeTagProps,\r\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\r\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\r\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\r\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\r\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\r\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\r\n        _ref7$startingLineNum = _ref7.startingLineNumber,\r\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\r\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\r\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\r\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\r\n        wrapLines = _ref7.wrapLines,\r\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\r\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\r\n        _ref7$lineProps = _ref7.lineProps,\r\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\r\n        renderer = _ref7.renderer,\r\n        _ref7$PreTag = _ref7.PreTag,\r\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\r\n        _ref7$CodeTag = _ref7.CodeTag,\r\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\r\n        _ref7$code = _ref7.code,\r\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\r\n        astGenerator = _ref7.astGenerator,\r\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\r\n\r\n    astGenerator = astGenerator || defaultAstGenerator;\r\n    var allLineNumbers = showLineNumbers ? React__default.createElement(AllLineNumbers, {\r\n      containerStyle: lineNumberContainerStyle,\r\n      codeStyle: codeTagProps.style || {},\r\n      numberStyle: lineNumberStyle,\r\n      startingLineNumber: startingLineNumber,\r\n      codeString: code\r\n    }) : null;\r\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\r\n      backgroundColor: '#fff'\r\n    };\r\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\r\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\r\n      style: Object.assign({}, defaultPreStyle, customStyle)\r\n    }) : Object.assign({}, rest, {\r\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\r\n      style: Object.assign({}, customStyle)\r\n    });\r\n\r\n    if (!astGenerator) {\r\n      return React__default.createElement(PreTag, preProps, allLineNumbers, React__default.createElement(CodeTag, codeTagProps, code));\r\n    }\r\n    /*\r\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\r\n     * if renderer is provided and wrapLines is undefined.\r\n     */\r\n\r\n\r\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\r\n    renderer = renderer || defaultRenderer;\r\n    var defaultCodeValue = [{\r\n      type: 'text',\r\n      value: code\r\n    }];\r\n    var codeTree = getCodeTree({\r\n      astGenerator: astGenerator,\r\n      language: language,\r\n      code: code,\r\n      defaultCodeValue: defaultCodeValue\r\n    });\r\n\r\n    if (codeTree.language === null) {\r\n      codeTree.value = defaultCodeValue;\r\n    } // determine largest line number so that we can force minWidth on all linenumber elements\r\n\r\n\r\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\r\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\r\n\r\n    if (wrapLongLines) {\r\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\r\n        whiteSpace: 'pre-wrap'\r\n      });\r\n    } else {\r\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\r\n        whiteSpace: 'pre'\r\n      });\r\n    }\r\n\r\n    return React__default.createElement(PreTag, preProps, React__default.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\r\n      rows: rows,\r\n      stylesheet: style,\r\n      useInlineStyles: useInlineStyles\r\n    })));\r\n  };\r\n}\r\n\r\nvar immutable = extend;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction extend() {\r\n  var target = {};\r\n\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var source = arguments[i];\r\n\r\n    for (var key in source) {\r\n      if (hasOwnProperty.call(source, key)) {\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nvar schema$1 = Schema$2;\r\nvar proto$1 = Schema$2.prototype;\r\nproto$1.space = null;\r\nproto$1.normal = {};\r\nproto$1.property = {};\r\n\r\nfunction Schema$2(property, normal, space) {\r\n  this.property = property;\r\n  this.normal = normal;\r\n\r\n  if (space) {\r\n    this.space = space;\r\n  }\r\n}\r\n\r\nvar xtend = immutable;\r\nvar Schema$1 = schema$1;\r\nvar merge_1 = merge$1;\r\n\r\nfunction merge$1(definitions) {\r\n  var length = definitions.length;\r\n  var property = [];\r\n  var normal = [];\r\n  var index = -1;\r\n  var info;\r\n  var space;\r\n\r\n  while (++index < length) {\r\n    info = definitions[index];\r\n    property.push(info.property);\r\n    normal.push(info.normal);\r\n    space = info.space;\r\n  }\r\n\r\n  return new Schema$1(xtend.apply(null, property), xtend.apply(null, normal), space);\r\n}\r\n\r\nvar normalize_1 = normalize$3;\r\n\r\nfunction normalize$3(value) {\r\n  return value.toLowerCase();\r\n}\r\n\r\nvar info = Info$2;\r\nvar proto = Info$2.prototype;\r\nproto.space = null;\r\nproto.attribute = null;\r\nproto.property = null;\r\nproto.boolean = false;\r\nproto.booleanish = false;\r\nproto.overloadedBoolean = false;\r\nproto.number = false;\r\nproto.commaSeparated = false;\r\nproto.spaceSeparated = false;\r\nproto.commaOrSpaceSeparated = false;\r\nproto.mustUseProperty = false;\r\nproto.defined = false;\r\n\r\nfunction Info$2(property, attribute) {\r\n  this.property = property;\r\n  this.attribute = attribute;\r\n}\r\n\r\nvar types$3 = {};\r\nvar powers = 0;\r\ntypes$3.boolean = increment();\r\ntypes$3.booleanish = increment();\r\ntypes$3.overloadedBoolean = increment();\r\ntypes$3.number = increment();\r\ntypes$3.spaceSeparated = increment();\r\ntypes$3.commaSeparated = increment();\r\ntypes$3.commaOrSpaceSeparated = increment();\r\n\r\nfunction increment() {\r\n  return Math.pow(2, ++powers);\r\n}\r\n\r\nvar Info$1 = info;\r\nvar types$2 = types$3;\r\nvar definedInfo = DefinedInfo$2;\r\nDefinedInfo$2.prototype = new Info$1();\r\nDefinedInfo$2.prototype.defined = true;\r\nvar checks = ['boolean', 'booleanish', 'overloadedBoolean', 'number', 'commaSeparated', 'spaceSeparated', 'commaOrSpaceSeparated'];\r\nvar checksLength = checks.length;\r\n\r\nfunction DefinedInfo$2(property, attribute, mask, space) {\r\n  var index = -1;\r\n  var check;\r\n  mark(this, 'space', space);\r\n  Info$1.call(this, property, attribute);\r\n\r\n  while (++index < checksLength) {\r\n    check = checks[index];\r\n    mark(this, check, (mask & types$2[check]) === types$2[check]);\r\n  }\r\n}\r\n\r\nfunction mark(values, key, value) {\r\n  if (value) {\r\n    values[key] = value;\r\n  }\r\n}\r\n\r\nvar normalize$2 = normalize_1;\r\nvar Schema = schema$1;\r\nvar DefinedInfo$1 = definedInfo;\r\nvar create_1 = create$5;\r\n\r\nfunction create$5(definition) {\r\n  var space = definition.space;\r\n  var mustUseProperty = definition.mustUseProperty || [];\r\n  var attributes = definition.attributes || {};\r\n  var props = definition.properties;\r\n  var transform = definition.transform;\r\n  var property = {};\r\n  var normal = {};\r\n  var prop;\r\n  var info;\r\n\r\n  for (prop in props) {\r\n    info = new DefinedInfo$1(prop, transform(attributes, prop), props[prop], space);\r\n\r\n    if (mustUseProperty.indexOf(prop) !== -1) {\r\n      info.mustUseProperty = true;\r\n    }\r\n\r\n    property[prop] = info;\r\n    normal[normalize$2(prop)] = prop;\r\n    normal[normalize$2(info.attribute)] = prop;\r\n  }\r\n\r\n  return new Schema(property, normal, space);\r\n}\r\n\r\nvar create$4 = create_1;\r\nvar xlink$1 = create$4({\r\n  space: 'xlink',\r\n  transform: xlinkTransform,\r\n  properties: {\r\n    xLinkActuate: null,\r\n    xLinkArcRole: null,\r\n    xLinkHref: null,\r\n    xLinkRole: null,\r\n    xLinkShow: null,\r\n    xLinkTitle: null,\r\n    xLinkType: null\r\n  }\r\n});\r\n\r\nfunction xlinkTransform(_, prop) {\r\n  return 'xlink:' + prop.slice(5).toLowerCase();\r\n}\r\n\r\nvar create$3 = create_1;\r\nvar xml$1 = create$3({\r\n  space: 'xml',\r\n  transform: xmlTransform,\r\n  properties: {\r\n    xmlLang: null,\r\n    xmlBase: null,\r\n    xmlSpace: null\r\n  }\r\n});\r\n\r\nfunction xmlTransform(_, prop) {\r\n  return 'xml:' + prop.slice(3).toLowerCase();\r\n}\r\n\r\nvar caseSensitiveTransform_1 = caseSensitiveTransform$1;\r\n\r\nfunction caseSensitiveTransform$1(attributes, attribute) {\r\n  return attribute in attributes ? attributes[attribute] : attribute;\r\n}\r\n\r\nvar caseSensitiveTransform = caseSensitiveTransform_1;\r\nvar caseInsensitiveTransform_1 = caseInsensitiveTransform$2;\r\n\r\nfunction caseInsensitiveTransform$2(attributes, property) {\r\n  return caseSensitiveTransform(attributes, property.toLowerCase());\r\n}\r\n\r\nvar create$2 = create_1;\r\nvar caseInsensitiveTransform$1 = caseInsensitiveTransform_1;\r\nvar xmlns$1 = create$2({\r\n  space: 'xmlns',\r\n  attributes: {\r\n    xmlnsxlink: 'xmlns:xlink'\r\n  },\r\n  transform: caseInsensitiveTransform$1,\r\n  properties: {\r\n    xmlns: null,\r\n    xmlnsXLink: null\r\n  }\r\n});\r\nvar types$1 = types$3;\r\nvar create$1 = create_1;\r\nvar booleanish$1 = types$1.booleanish;\r\nvar number$1 = types$1.number;\r\nvar spaceSeparated$1 = types$1.spaceSeparated;\r\nvar aria$1 = create$1({\r\n  transform: ariaTransform,\r\n  properties: {\r\n    ariaActiveDescendant: null,\r\n    ariaAtomic: booleanish$1,\r\n    ariaAutoComplete: null,\r\n    ariaBusy: booleanish$1,\r\n    ariaChecked: booleanish$1,\r\n    ariaColCount: number$1,\r\n    ariaColIndex: number$1,\r\n    ariaColSpan: number$1,\r\n    ariaControls: spaceSeparated$1,\r\n    ariaCurrent: null,\r\n    ariaDescribedBy: spaceSeparated$1,\r\n    ariaDetails: null,\r\n    ariaDisabled: booleanish$1,\r\n    ariaDropEffect: spaceSeparated$1,\r\n    ariaErrorMessage: null,\r\n    ariaExpanded: booleanish$1,\r\n    ariaFlowTo: spaceSeparated$1,\r\n    ariaGrabbed: booleanish$1,\r\n    ariaHasPopup: null,\r\n    ariaHidden: booleanish$1,\r\n    ariaInvalid: null,\r\n    ariaKeyShortcuts: null,\r\n    ariaLabel: null,\r\n    ariaLabelledBy: spaceSeparated$1,\r\n    ariaLevel: number$1,\r\n    ariaLive: null,\r\n    ariaModal: booleanish$1,\r\n    ariaMultiLine: booleanish$1,\r\n    ariaMultiSelectable: booleanish$1,\r\n    ariaOrientation: null,\r\n    ariaOwns: spaceSeparated$1,\r\n    ariaPlaceholder: null,\r\n    ariaPosInSet: number$1,\r\n    ariaPressed: booleanish$1,\r\n    ariaReadOnly: booleanish$1,\r\n    ariaRelevant: null,\r\n    ariaRequired: booleanish$1,\r\n    ariaRoleDescription: spaceSeparated$1,\r\n    ariaRowCount: number$1,\r\n    ariaRowIndex: number$1,\r\n    ariaRowSpan: number$1,\r\n    ariaSelected: booleanish$1,\r\n    ariaSetSize: number$1,\r\n    ariaSort: null,\r\n    ariaValueMax: number$1,\r\n    ariaValueMin: number$1,\r\n    ariaValueNow: number$1,\r\n    ariaValueText: null,\r\n    role: null\r\n  }\r\n});\r\n\r\nfunction ariaTransform(_, prop) {\r\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();\r\n}\r\n\r\nvar types = types$3;\r\nvar create = create_1;\r\nvar caseInsensitiveTransform = caseInsensitiveTransform_1;\r\nvar boolean = types.boolean;\r\nvar overloadedBoolean = types.overloadedBoolean;\r\nvar booleanish = types.booleanish;\r\nvar number = types.number;\r\nvar spaceSeparated = types.spaceSeparated;\r\nvar commaSeparated = types.commaSeparated;\r\nvar html$2 = create({\r\n  space: 'html',\r\n  attributes: {\r\n    acceptcharset: 'accept-charset',\r\n    classname: 'class',\r\n    htmlfor: 'for',\r\n    httpequiv: 'http-equiv'\r\n  },\r\n  transform: caseInsensitiveTransform,\r\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\r\n  properties: {\r\n    // Standard Properties.\r\n    abbr: null,\r\n    accept: commaSeparated,\r\n    acceptCharset: spaceSeparated,\r\n    accessKey: spaceSeparated,\r\n    action: null,\r\n    allow: null,\r\n    allowFullScreen: boolean,\r\n    allowPaymentRequest: boolean,\r\n    allowUserMedia: boolean,\r\n    alt: null,\r\n    as: null,\r\n    async: boolean,\r\n    autoCapitalize: null,\r\n    autoComplete: spaceSeparated,\r\n    autoFocus: boolean,\r\n    autoPlay: boolean,\r\n    capture: boolean,\r\n    charSet: null,\r\n    checked: boolean,\r\n    cite: null,\r\n    className: spaceSeparated,\r\n    cols: number,\r\n    colSpan: null,\r\n    content: null,\r\n    contentEditable: booleanish,\r\n    controls: boolean,\r\n    controlsList: spaceSeparated,\r\n    coords: number | commaSeparated,\r\n    crossOrigin: null,\r\n    data: null,\r\n    dateTime: null,\r\n    decoding: null,\r\n    default: boolean,\r\n    defer: boolean,\r\n    dir: null,\r\n    dirName: null,\r\n    disabled: boolean,\r\n    download: overloadedBoolean,\r\n    draggable: booleanish,\r\n    encType: null,\r\n    enterKeyHint: null,\r\n    form: null,\r\n    formAction: null,\r\n    formEncType: null,\r\n    formMethod: null,\r\n    formNoValidate: boolean,\r\n    formTarget: null,\r\n    headers: spaceSeparated,\r\n    height: number,\r\n    hidden: boolean,\r\n    high: number,\r\n    href: null,\r\n    hrefLang: null,\r\n    htmlFor: spaceSeparated,\r\n    httpEquiv: spaceSeparated,\r\n    id: null,\r\n    imageSizes: null,\r\n    imageSrcSet: commaSeparated,\r\n    inputMode: null,\r\n    integrity: null,\r\n    is: null,\r\n    isMap: boolean,\r\n    itemId: null,\r\n    itemProp: spaceSeparated,\r\n    itemRef: spaceSeparated,\r\n    itemScope: boolean,\r\n    itemType: spaceSeparated,\r\n    kind: null,\r\n    label: null,\r\n    lang: null,\r\n    language: null,\r\n    list: null,\r\n    loading: null,\r\n    loop: boolean,\r\n    low: number,\r\n    manifest: null,\r\n    max: null,\r\n    maxLength: number,\r\n    media: null,\r\n    method: null,\r\n    min: null,\r\n    minLength: number,\r\n    multiple: boolean,\r\n    muted: boolean,\r\n    name: null,\r\n    nonce: null,\r\n    noModule: boolean,\r\n    noValidate: boolean,\r\n    onAbort: null,\r\n    onAfterPrint: null,\r\n    onAuxClick: null,\r\n    onBeforePrint: null,\r\n    onBeforeUnload: null,\r\n    onBlur: null,\r\n    onCancel: null,\r\n    onCanPlay: null,\r\n    onCanPlayThrough: null,\r\n    onChange: null,\r\n    onClick: null,\r\n    onClose: null,\r\n    onContextMenu: null,\r\n    onCopy: null,\r\n    onCueChange: null,\r\n    onCut: null,\r\n    onDblClick: null,\r\n    onDrag: null,\r\n    onDragEnd: null,\r\n    onDragEnter: null,\r\n    onDragExit: null,\r\n    onDragLeave: null,\r\n    onDragOver: null,\r\n    onDragStart: null,\r\n    onDrop: null,\r\n    onDurationChange: null,\r\n    onEmptied: null,\r\n    onEnded: null,\r\n    onError: null,\r\n    onFocus: null,\r\n    onFormData: null,\r\n    onHashChange: null,\r\n    onInput: null,\r\n    onInvalid: null,\r\n    onKeyDown: null,\r\n    onKeyPress: null,\r\n    onKeyUp: null,\r\n    onLanguageChange: null,\r\n    onLoad: null,\r\n    onLoadedData: null,\r\n    onLoadedMetadata: null,\r\n    onLoadEnd: null,\r\n    onLoadStart: null,\r\n    onMessage: null,\r\n    onMessageError: null,\r\n    onMouseDown: null,\r\n    onMouseEnter: null,\r\n    onMouseLeave: null,\r\n    onMouseMove: null,\r\n    onMouseOut: null,\r\n    onMouseOver: null,\r\n    onMouseUp: null,\r\n    onOffline: null,\r\n    onOnline: null,\r\n    onPageHide: null,\r\n    onPageShow: null,\r\n    onPaste: null,\r\n    onPause: null,\r\n    onPlay: null,\r\n    onPlaying: null,\r\n    onPopState: null,\r\n    onProgress: null,\r\n    onRateChange: null,\r\n    onRejectionHandled: null,\r\n    onReset: null,\r\n    onResize: null,\r\n    onScroll: null,\r\n    onSecurityPolicyViolation: null,\r\n    onSeeked: null,\r\n    onSeeking: null,\r\n    onSelect: null,\r\n    onSlotChange: null,\r\n    onStalled: null,\r\n    onStorage: null,\r\n    onSubmit: null,\r\n    onSuspend: null,\r\n    onTimeUpdate: null,\r\n    onToggle: null,\r\n    onUnhandledRejection: null,\r\n    onUnload: null,\r\n    onVolumeChange: null,\r\n    onWaiting: null,\r\n    onWheel: null,\r\n    open: boolean,\r\n    optimum: number,\r\n    pattern: null,\r\n    ping: spaceSeparated,\r\n    placeholder: null,\r\n    playsInline: boolean,\r\n    poster: null,\r\n    preload: null,\r\n    readOnly: boolean,\r\n    referrerPolicy: null,\r\n    rel: spaceSeparated,\r\n    required: boolean,\r\n    reversed: boolean,\r\n    rows: number,\r\n    rowSpan: number,\r\n    sandbox: spaceSeparated,\r\n    scope: null,\r\n    scoped: boolean,\r\n    seamless: boolean,\r\n    selected: boolean,\r\n    shape: null,\r\n    size: number,\r\n    sizes: null,\r\n    slot: null,\r\n    span: number,\r\n    spellCheck: booleanish,\r\n    src: null,\r\n    srcDoc: null,\r\n    srcLang: null,\r\n    srcSet: commaSeparated,\r\n    start: number,\r\n    step: null,\r\n    style: null,\r\n    tabIndex: number,\r\n    target: null,\r\n    title: null,\r\n    translate: null,\r\n    type: null,\r\n    typeMustMatch: boolean,\r\n    useMap: null,\r\n    value: booleanish,\r\n    width: number,\r\n    wrap: null,\r\n    // Legacy.\r\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\r\n    align: null,\r\n    // Several. Use CSS `text-align` instead,\r\n    aLink: null,\r\n    // `<body>`. Use CSS `a:active {color}` instead\r\n    archive: spaceSeparated,\r\n    // `<object>`. List of URIs to archives\r\n    axis: null,\r\n    // `<td>` and `<th>`. Use `scope` on `<th>`\r\n    background: null,\r\n    // `<body>`. Use CSS `background-image` instead\r\n    bgColor: null,\r\n    // `<body>` and table elements. Use CSS `background-color` instead\r\n    border: number,\r\n    // `<table>`. Use CSS `border-width` instead,\r\n    borderColor: null,\r\n    // `<table>`. Use CSS `border-color` instead,\r\n    bottomMargin: number,\r\n    // `<body>`\r\n    cellPadding: null,\r\n    // `<table>`\r\n    cellSpacing: null,\r\n    // `<table>`\r\n    char: null,\r\n    // Several table elements. When `align=char`, sets the character to align on\r\n    charOff: null,\r\n    // Several table elements. When `char`, offsets the alignment\r\n    classId: null,\r\n    // `<object>`\r\n    clear: null,\r\n    // `<br>`. Use CSS `clear` instead\r\n    code: null,\r\n    // `<object>`\r\n    codeBase: null,\r\n    // `<object>`\r\n    codeType: null,\r\n    // `<object>`\r\n    color: null,\r\n    // `<font>` and `<hr>`. Use CSS instead\r\n    compact: boolean,\r\n    // Lists. Use CSS to reduce space between items instead\r\n    declare: boolean,\r\n    // `<object>`\r\n    event: null,\r\n    // `<script>`\r\n    face: null,\r\n    // `<font>`. Use CSS instead\r\n    frame: null,\r\n    // `<table>`\r\n    frameBorder: null,\r\n    // `<iframe>`. Use CSS `border` instead\r\n    hSpace: number,\r\n    // `<img>` and `<object>`\r\n    leftMargin: number,\r\n    // `<body>`\r\n    link: null,\r\n    // `<body>`. Use CSS `a:link {color: *}` instead\r\n    longDesc: null,\r\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\r\n    lowSrc: null,\r\n    // `<img>`. Use a `<picture>`\r\n    marginHeight: number,\r\n    // `<body>`\r\n    marginWidth: number,\r\n    // `<body>`\r\n    noResize: boolean,\r\n    // `<frame>`\r\n    noHref: boolean,\r\n    // `<area>`. Use no href instead of an explicit `nohref`\r\n    noShade: boolean,\r\n    // `<hr>`. Use background-color and height instead of borders\r\n    noWrap: boolean,\r\n    // `<td>` and `<th>`\r\n    object: null,\r\n    // `<applet>`\r\n    profile: null,\r\n    // `<head>`\r\n    prompt: null,\r\n    // `<isindex>`\r\n    rev: null,\r\n    // `<link>`\r\n    rightMargin: number,\r\n    // `<body>`\r\n    rules: null,\r\n    // `<table>`\r\n    scheme: null,\r\n    // `<meta>`\r\n    scrolling: booleanish,\r\n    // `<frame>`. Use overflow in the child context\r\n    standby: null,\r\n    // `<object>`\r\n    summary: null,\r\n    // `<table>`\r\n    text: null,\r\n    // `<body>`. Use CSS `color` instead\r\n    topMargin: number,\r\n    // `<body>`\r\n    valueType: null,\r\n    // `<param>`\r\n    version: null,\r\n    // `<html>`. Use a doctype.\r\n    vAlign: null,\r\n    // Several. Use CSS `vertical-align` instead\r\n    vLink: null,\r\n    // `<body>`. Use CSS `a:visited {color}` instead\r\n    vSpace: number,\r\n    // `<img>` and `<object>`\r\n    // Non-standard Properties.\r\n    allowTransparency: null,\r\n    autoCorrect: null,\r\n    autoSave: null,\r\n    disablePictureInPicture: boolean,\r\n    disableRemotePlayback: boolean,\r\n    prefix: null,\r\n    property: null,\r\n    results: number,\r\n    security: null,\r\n    unselectable: null\r\n  }\r\n});\r\nvar merge = merge_1;\r\nvar xlink = xlink$1;\r\nvar xml = xml$1;\r\nvar xmlns = xmlns$1;\r\nvar aria = aria$1;\r\nvar html$1 = html$2;\r\nvar html_1$1 = merge([xml, xlink, xmlns, aria, html$1]);\r\nvar normalize$1 = normalize_1;\r\nvar DefinedInfo = definedInfo;\r\nvar Info = info;\r\nvar data = 'data';\r\nvar find_1 = find$1;\r\nvar valid = /^data[-\\w.:]+$/i;\r\nvar dash$1 = /-[a-z]/g;\r\nvar cap$1 = /[A-Z]/g;\r\n\r\nfunction find$1(schema, value) {\r\n  var normal = normalize$1(value);\r\n  var prop = value;\r\n  var Type = Info;\r\n\r\n  if (normal in schema.normal) {\r\n    return schema.property[schema.normal[normal]];\r\n  }\r\n\r\n  if (normal.length > 4 && normal.slice(0, 4) === data && valid.test(value)) {\r\n    // Attribute or property.\r\n    if (value.charAt(4) === '-') {\r\n      prop = datasetToProperty(value);\r\n    } else {\r\n      value = datasetToAttribute(value);\r\n    }\r\n\r\n    Type = DefinedInfo;\r\n  }\r\n\r\n  return new Type(prop, value);\r\n}\r\n\r\nfunction datasetToProperty(attribute) {\r\n  var value = attribute.slice(5).replace(dash$1, camelcase);\r\n  return data + value.charAt(0).toUpperCase() + value.slice(1);\r\n}\r\n\r\nfunction datasetToAttribute(property) {\r\n  var value = property.slice(4);\r\n\r\n  if (dash$1.test(value)) {\r\n    return property;\r\n  }\r\n\r\n  value = value.replace(cap$1, kebab);\r\n\r\n  if (value.charAt(0) !== '-') {\r\n    value = '-' + value;\r\n  }\r\n\r\n  return data + value;\r\n}\r\n\r\nfunction kebab($0) {\r\n  return '-' + $0.toLowerCase();\r\n}\r\n\r\nfunction camelcase($0) {\r\n  return $0.charAt(1).toUpperCase();\r\n}\r\n\r\nvar hastUtilParseSelector = parse$3;\r\nvar search = /[#.]/g; // Create a hast element from a simple CSS selector.\r\n\r\nfunction parse$3(selector, defaultTagName) {\r\n  var value = selector || '';\r\n  var name = defaultTagName || 'div';\r\n  var props = {};\r\n  var start = 0;\r\n  var subvalue;\r\n  var previous;\r\n  var match;\r\n\r\n  while (start < value.length) {\r\n    search.lastIndex = start;\r\n    match = search.exec(value);\r\n    subvalue = value.slice(start, match ? match.index : value.length);\r\n\r\n    if (subvalue) {\r\n      if (!previous) {\r\n        name = subvalue;\r\n      } else if (previous === '#') {\r\n        props.id = subvalue;\r\n      } else if (props.className) {\r\n        props.className.push(subvalue);\r\n      } else {\r\n        props.className = [subvalue];\r\n      }\r\n\r\n      start += subvalue.length;\r\n    }\r\n\r\n    if (match) {\r\n      previous = match[0];\r\n      start++;\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: 'element',\r\n    tagName: name,\r\n    properties: props,\r\n    children: []\r\n  };\r\n}\r\n\r\nvar spaceSeparatedTokens = {};\r\nspaceSeparatedTokens.parse = parse$2;\r\nspaceSeparatedTokens.stringify = stringify$2;\r\nvar empty$2 = '';\r\nvar space$2 = ' ';\r\nvar whiteSpace = /[ \\t\\n\\r\\f]+/g;\r\n\r\nfunction parse$2(value) {\r\n  var input = String(value || empty$2).trim();\r\n  return input === empty$2 ? [] : input.split(whiteSpace);\r\n}\r\n\r\nfunction stringify$2(values) {\r\n  return values.join(space$2).trim();\r\n}\r\n\r\nvar commaSeparatedTokens = {};\r\ncommaSeparatedTokens.parse = parse$1;\r\ncommaSeparatedTokens.stringify = stringify$1;\r\nvar comma$1 = ',';\r\nvar space$1 = ' ';\r\nvar empty$1 = ''; // Parse comma-separated tokens to an array.\r\n\r\nfunction parse$1(value) {\r\n  var values = [];\r\n  var input = String(value || empty$1);\r\n  var index = input.indexOf(comma$1);\r\n  var lastIndex = 0;\r\n  var end = false;\r\n  var val;\r\n\r\n  while (!end) {\r\n    if (index === -1) {\r\n      index = input.length;\r\n      end = true;\r\n    }\r\n\r\n    val = input.slice(lastIndex, index).trim();\r\n\r\n    if (val || !end) {\r\n      values.push(val);\r\n    }\r\n\r\n    lastIndex = index + 1;\r\n    index = input.indexOf(comma$1, lastIndex);\r\n  }\r\n\r\n  return values;\r\n} // Compile an array to comma-separated tokens.\r\n// `options.padLeft` (default: `true`) pads a space left of each token, and\r\n// `options.padRight` (default: `false`) pads a space to the right of each token.\r\n\r\n\r\nfunction stringify$1(values, options) {\r\n  var settings = options || {};\r\n  var left = settings.padLeft === false ? empty$1 : space$1;\r\n  var right = settings.padRight ? space$1 : empty$1; // Ensure the last empty entry is seen.\r\n\r\n  if (values[values.length - 1] === empty$1) {\r\n    values = values.concat(empty$1);\r\n  }\r\n\r\n  return values.join(right + comma$1 + left).trim();\r\n}\r\n\r\nvar find = find_1;\r\nvar normalize = normalize_1;\r\nvar parseSelector = hastUtilParseSelector;\r\nvar spaces = spaceSeparatedTokens.parse;\r\nvar commas = commaSeparatedTokens.parse;\r\nvar factory_1 = factory$1;\r\nvar own$3 = {}.hasOwnProperty;\r\n\r\nfunction factory$1(schema, defaultTagName, caseSensitive) {\r\n  var adjust = caseSensitive ? createAdjustMap(caseSensitive) : null;\r\n  return h; // Hyperscript compatible DSL for creating virtual hast trees.\r\n\r\n  function h(selector, properties) {\r\n    var node = parseSelector(selector, defaultTagName);\r\n    var children = Array.prototype.slice.call(arguments, 2);\r\n    var name = node.tagName.toLowerCase();\r\n    var property;\r\n    node.tagName = adjust && own$3.call(adjust, name) ? adjust[name] : name;\r\n\r\n    if (properties && isChildren(properties, node)) {\r\n      children.unshift(properties);\r\n      properties = null;\r\n    }\r\n\r\n    if (properties) {\r\n      for (property in properties) {\r\n        addProperty(node.properties, property, properties[property]);\r\n      }\r\n    }\r\n\r\n    addChild(node.children, children);\r\n\r\n    if (node.tagName === 'template') {\r\n      node.content = {\r\n        type: 'root',\r\n        children: node.children\r\n      };\r\n      node.children = [];\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  function addProperty(properties, key, value) {\r\n    var info;\r\n    var property;\r\n    var result; // Ignore nullish and NaN values.\r\n\r\n    if (value === null || value === undefined || value !== value) {\r\n      return;\r\n    }\r\n\r\n    info = find(schema, key);\r\n    property = info.property;\r\n    result = value; // Handle list values.\r\n\r\n    if (typeof result === 'string') {\r\n      if (info.spaceSeparated) {\r\n        result = spaces(result);\r\n      } else if (info.commaSeparated) {\r\n        result = commas(result);\r\n      } else if (info.commaOrSpaceSeparated) {\r\n        result = spaces(commas(result).join(' '));\r\n      }\r\n    } // Accept `object` on style.\r\n\r\n\r\n    if (property === 'style' && typeof value !== 'string') {\r\n      result = style(result);\r\n    } // Class-names (which can be added both on the `selector` and here).\r\n\r\n\r\n    if (property === 'className' && properties.className) {\r\n      result = properties.className.concat(result);\r\n    }\r\n\r\n    properties[property] = parsePrimitives(info, property, result);\r\n  }\r\n}\r\n\r\nfunction isChildren(value, node) {\r\n  return typeof value === 'string' || 'length' in value || isNode(node.tagName, value);\r\n}\r\n\r\nfunction isNode(tagName, value) {\r\n  var type = value.type;\r\n\r\n  if (tagName === 'input' || !type || typeof type !== 'string') {\r\n    return false;\r\n  }\r\n\r\n  if (_typeof(value.children) === 'object' && 'length' in value.children) {\r\n    return true;\r\n  }\r\n\r\n  type = type.toLowerCase();\r\n\r\n  if (tagName === 'button') {\r\n    return type !== 'menu' && type !== 'submit' && type !== 'reset' && type !== 'button';\r\n  }\r\n\r\n  return 'value' in value;\r\n}\r\n\r\nfunction addChild(nodes, value) {\r\n  var index;\r\n  var length;\r\n\r\n  if (typeof value === 'string' || typeof value === 'number') {\r\n    nodes.push({\r\n      type: 'text',\r\n      value: String(value)\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (_typeof(value) === 'object' && 'length' in value) {\r\n    index = -1;\r\n    length = value.length;\r\n\r\n    while (++index < length) {\r\n      addChild(nodes, value[index]);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (_typeof(value) !== 'object' || !('type' in value)) {\r\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\r\n  }\r\n\r\n  nodes.push(value);\r\n} // Parse a (list of) primitives.\r\n\r\n\r\nfunction parsePrimitives(info, name, value) {\r\n  var index;\r\n  var length;\r\n  var result;\r\n\r\n  if (_typeof(value) !== 'object' || !('length' in value)) {\r\n    return parsePrimitive(info, name, value);\r\n  }\r\n\r\n  length = value.length;\r\n  index = -1;\r\n  result = [];\r\n\r\n  while (++index < length) {\r\n    result[index] = parsePrimitive(info, name, value[index]);\r\n  }\r\n\r\n  return result;\r\n} // Parse a single primitives.\r\n\r\n\r\nfunction parsePrimitive(info, name, value) {\r\n  var result = value;\r\n\r\n  if (info.number || info.positiveNumber) {\r\n    if (!isNaN(result) && result !== '') {\r\n      result = Number(result);\r\n    }\r\n  } else if (info.boolean || info.overloadedBoolean) {\r\n    // Accept `boolean` and `string`.\r\n    if (typeof result === 'string' && (result === '' || normalize(value) === normalize(name))) {\r\n      result = true;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction style(value) {\r\n  var result = [];\r\n  var key;\r\n\r\n  for (key in value) {\r\n    result.push([key, value[key]].join(': '));\r\n  }\r\n\r\n  return result.join('; ');\r\n}\r\n\r\nfunction createAdjustMap(values) {\r\n  var length = values.length;\r\n  var index = -1;\r\n  var result = {};\r\n  var value;\r\n\r\n  while (++index < length) {\r\n    value = values[index];\r\n    result[value.toLowerCase()] = value;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nvar schema = html_1$1;\r\nvar factory = factory_1;\r\nvar html = factory(schema, 'div');\r\nhtml.displayName = 'html';\r\nvar html_1 = html;\r\nvar hastscript = html_1;\r\nvar AElig$1 = \"Æ\";\r\nvar AMP$1 = \"&\";\r\nvar Aacute$1 = \"Á\";\r\nvar Acirc$1 = \"Â\";\r\nvar Agrave$1 = \"À\";\r\nvar Aring$1 = \"Å\";\r\nvar Atilde$1 = \"Ã\";\r\nvar Auml$1 = \"Ä\";\r\nvar COPY$1 = \"©\";\r\nvar Ccedil$1 = \"Ç\";\r\nvar ETH$1 = \"Ð\";\r\nvar Eacute$1 = \"É\";\r\nvar Ecirc$1 = \"Ê\";\r\nvar Egrave$1 = \"È\";\r\nvar Euml$1 = \"Ë\";\r\nvar GT$1 = \">\";\r\nvar Iacute$1 = \"Í\";\r\nvar Icirc$1 = \"Î\";\r\nvar Igrave$1 = \"Ì\";\r\nvar Iuml$1 = \"Ï\";\r\nvar LT$1 = \"<\";\r\nvar Ntilde$1 = \"Ñ\";\r\nvar Oacute$1 = \"Ó\";\r\nvar Ocirc$1 = \"Ô\";\r\nvar Ograve$1 = \"Ò\";\r\nvar Oslash$1 = \"Ø\";\r\nvar Otilde$1 = \"Õ\";\r\nvar Ouml$1 = \"Ö\";\r\nvar QUOT$1 = \"\\\"\";\r\nvar REG$1 = \"®\";\r\nvar THORN$1 = \"Þ\";\r\nvar Uacute$1 = \"Ú\";\r\nvar Ucirc$1 = \"Û\";\r\nvar Ugrave$1 = \"Ù\";\r\nvar Uuml$1 = \"Ü\";\r\nvar Yacute$1 = \"Ý\";\r\nvar aacute$1 = \"á\";\r\nvar acirc$1 = \"â\";\r\nvar acute$1 = \"´\";\r\nvar aelig$1 = \"æ\";\r\nvar agrave$1 = \"à\";\r\nvar amp$1 = \"&\";\r\nvar aring$1 = \"å\";\r\nvar atilde$1 = \"ã\";\r\nvar auml$1 = \"ä\";\r\nvar brvbar$1 = \"¦\";\r\nvar ccedil$1 = \"ç\";\r\nvar cedil$1 = \"¸\";\r\nvar cent$1 = \"¢\";\r\nvar copy$1 = \"©\";\r\nvar curren$1 = \"¤\";\r\nvar deg$1 = \"°\";\r\nvar divide$1 = \"÷\";\r\nvar eacute$1 = \"é\";\r\nvar ecirc$1 = \"ê\";\r\nvar egrave$1 = \"è\";\r\nvar eth$1 = \"ð\";\r\nvar euml$1 = \"ë\";\r\nvar frac12$1 = \"½\";\r\nvar frac14$1 = \"¼\";\r\nvar frac34$1 = \"¾\";\r\nvar gt$1 = \">\";\r\nvar iacute$1 = \"í\";\r\nvar icirc$1 = \"î\";\r\nvar iexcl$1 = \"¡\";\r\nvar igrave$1 = \"ì\";\r\nvar iquest$1 = \"¿\";\r\nvar iuml$1 = \"ï\";\r\nvar laquo$1 = \"«\";\r\nvar lt$1 = \"<\";\r\nvar macr$1 = \"¯\";\r\nvar micro$1 = \"µ\";\r\nvar middot$1 = \"·\";\r\nvar nbsp$1 = \" \";\r\nvar not$1 = \"¬\";\r\nvar ntilde$1 = \"ñ\";\r\nvar oacute$1 = \"ó\";\r\nvar ocirc$1 = \"ô\";\r\nvar ograve$1 = \"ò\";\r\nvar ordf$1 = \"ª\";\r\nvar ordm$1 = \"º\";\r\nvar oslash$1 = \"ø\";\r\nvar otilde$1 = \"õ\";\r\nvar ouml$1 = \"ö\";\r\nvar para$1 = \"¶\";\r\nvar plusmn$1 = \"±\";\r\nvar pound$1 = \"£\";\r\nvar quot$1 = \"\\\"\";\r\nvar raquo$1 = \"»\";\r\nvar reg$1 = \"®\";\r\nvar sect$1 = \"§\";\r\nvar shy$1 = \"­\";\r\nvar sup1$1 = \"¹\";\r\nvar sup2$1 = \"²\";\r\nvar sup3$1 = \"³\";\r\nvar szlig$1 = \"ß\";\r\nvar thorn$1 = \"þ\";\r\nvar times$1 = \"×\";\r\nvar uacute$1 = \"ú\";\r\nvar ucirc$1 = \"û\";\r\nvar ugrave$1 = \"ù\";\r\nvar uml$1 = \"¨\";\r\nvar uuml$1 = \"ü\";\r\nvar yacute$1 = \"ý\";\r\nvar yen$1 = \"¥\";\r\nvar yuml$1 = \"ÿ\";\r\nvar require$$0$1 = {\r\n  AElig: AElig$1,\r\n  AMP: AMP$1,\r\n  Aacute: Aacute$1,\r\n  Acirc: Acirc$1,\r\n  Agrave: Agrave$1,\r\n  Aring: Aring$1,\r\n  Atilde: Atilde$1,\r\n  Auml: Auml$1,\r\n  COPY: COPY$1,\r\n  Ccedil: Ccedil$1,\r\n  ETH: ETH$1,\r\n  Eacute: Eacute$1,\r\n  Ecirc: Ecirc$1,\r\n  Egrave: Egrave$1,\r\n  Euml: Euml$1,\r\n  GT: GT$1,\r\n  Iacute: Iacute$1,\r\n  Icirc: Icirc$1,\r\n  Igrave: Igrave$1,\r\n  Iuml: Iuml$1,\r\n  LT: LT$1,\r\n  Ntilde: Ntilde$1,\r\n  Oacute: Oacute$1,\r\n  Ocirc: Ocirc$1,\r\n  Ograve: Ograve$1,\r\n  Oslash: Oslash$1,\r\n  Otilde: Otilde$1,\r\n  Ouml: Ouml$1,\r\n  QUOT: QUOT$1,\r\n  REG: REG$1,\r\n  THORN: THORN$1,\r\n  Uacute: Uacute$1,\r\n  Ucirc: Ucirc$1,\r\n  Ugrave: Ugrave$1,\r\n  Uuml: Uuml$1,\r\n  Yacute: Yacute$1,\r\n  aacute: aacute$1,\r\n  acirc: acirc$1,\r\n  acute: acute$1,\r\n  aelig: aelig$1,\r\n  agrave: agrave$1,\r\n  amp: amp$1,\r\n  aring: aring$1,\r\n  atilde: atilde$1,\r\n  auml: auml$1,\r\n  brvbar: brvbar$1,\r\n  ccedil: ccedil$1,\r\n  cedil: cedil$1,\r\n  cent: cent$1,\r\n  copy: copy$1,\r\n  curren: curren$1,\r\n  deg: deg$1,\r\n  divide: divide$1,\r\n  eacute: eacute$1,\r\n  ecirc: ecirc$1,\r\n  egrave: egrave$1,\r\n  eth: eth$1,\r\n  euml: euml$1,\r\n  frac12: frac12$1,\r\n  frac14: frac14$1,\r\n  frac34: frac34$1,\r\n  gt: gt$1,\r\n  iacute: iacute$1,\r\n  icirc: icirc$1,\r\n  iexcl: iexcl$1,\r\n  igrave: igrave$1,\r\n  iquest: iquest$1,\r\n  iuml: iuml$1,\r\n  laquo: laquo$1,\r\n  lt: lt$1,\r\n  macr: macr$1,\r\n  micro: micro$1,\r\n  middot: middot$1,\r\n  nbsp: nbsp$1,\r\n  not: not$1,\r\n  ntilde: ntilde$1,\r\n  oacute: oacute$1,\r\n  ocirc: ocirc$1,\r\n  ograve: ograve$1,\r\n  ordf: ordf$1,\r\n  ordm: ordm$1,\r\n  oslash: oslash$1,\r\n  otilde: otilde$1,\r\n  ouml: ouml$1,\r\n  para: para$1,\r\n  plusmn: plusmn$1,\r\n  pound: pound$1,\r\n  quot: quot$1,\r\n  raquo: raquo$1,\r\n  reg: reg$1,\r\n  sect: sect$1,\r\n  shy: shy$1,\r\n  sup1: sup1$1,\r\n  sup2: sup2$1,\r\n  sup3: sup3$1,\r\n  szlig: szlig$1,\r\n  thorn: thorn$1,\r\n  times: times$1,\r\n  uacute: uacute$1,\r\n  ucirc: ucirc$1,\r\n  ugrave: ugrave$1,\r\n  uml: uml$1,\r\n  uuml: uuml$1,\r\n  yacute: yacute$1,\r\n  yen: yen$1,\r\n  yuml: yuml$1\r\n};\r\nvar require$$1 = {\r\n  \"0\": \"�\",\r\n  \"128\": \"€\",\r\n  \"130\": \"‚\",\r\n  \"131\": \"ƒ\",\r\n  \"132\": \"„\",\r\n  \"133\": \"…\",\r\n  \"134\": \"†\",\r\n  \"135\": \"‡\",\r\n  \"136\": \"ˆ\",\r\n  \"137\": \"‰\",\r\n  \"138\": \"Š\",\r\n  \"139\": \"‹\",\r\n  \"140\": \"Œ\",\r\n  \"142\": \"Ž\",\r\n  \"145\": \"‘\",\r\n  \"146\": \"’\",\r\n  \"147\": \"“\",\r\n  \"148\": \"”\",\r\n  \"149\": \"•\",\r\n  \"150\": \"–\",\r\n  \"151\": \"—\",\r\n  \"152\": \"˜\",\r\n  \"153\": \"™\",\r\n  \"154\": \"š\",\r\n  \"155\": \"›\",\r\n  \"156\": \"œ\",\r\n  \"158\": \"ž\",\r\n  \"159\": \"Ÿ\"\r\n};\r\nvar isDecimal = decimal$2; // Check if the given character code, or the character code at the first\r\n// character, is decimal.\r\n\r\nfunction decimal$2(character) {\r\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character;\r\n  return code >= 48 && code <= 57;\r\n  /* 0-9 */\r\n}\r\n\r\nvar isHexadecimal = hexadecimal$1; // Check if the given character code, or the character code at the first\r\n// character, is hexadecimal.\r\n\r\nfunction hexadecimal$1(character) {\r\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character;\r\n  return code >= 97\r\n  /* a */\r\n  && code <= 102\r\n  /* z */\r\n  || code >= 65\r\n  /* A */\r\n  && code <= 70\r\n  /* Z */\r\n  || code >= 48\r\n  /* A */\r\n  && code <= 57\r\n  /* Z */\r\n  ;\r\n}\r\n\r\nvar isAlphabetical = alphabetical$1; // Check if the given character code, or the character code at the first\r\n// character, is alphabetical.\r\n\r\nfunction alphabetical$1(character) {\r\n  var code = typeof character === 'string' ? character.charCodeAt(0) : character;\r\n  return code >= 97 && code <= 122\r\n  /* a-z */\r\n  || code >= 65 && code <= 90\r\n  /* A-Z */\r\n  ;\r\n}\r\n\r\nvar alphabetical = isAlphabetical;\r\nvar decimal$1 = isDecimal;\r\nvar isAlphanumerical = alphanumerical$1; // Check if the given character code, or the character code at the first\r\n// character, is alphanumerical.\r\n\r\nfunction alphanumerical$1(character) {\r\n  return alphabetical(character) || decimal$1(character);\r\n}\r\n\r\nvar AEli = \"Æ\";\r\nvar AElig = \"Æ\";\r\nvar AM = \"&\";\r\nvar AMP = \"&\";\r\nvar Aacut = \"Á\";\r\nvar Aacute = \"Á\";\r\nvar Abreve = \"Ă\";\r\nvar Acir = \"Â\";\r\nvar Acirc = \"Â\";\r\nvar Acy = \"А\";\r\nvar Afr = \"𝔄\";\r\nvar Agrav = \"À\";\r\nvar Agrave = \"À\";\r\nvar Alpha = \"Α\";\r\nvar Amacr = \"Ā\";\r\nvar And = \"⩓\";\r\nvar Aogon = \"Ą\";\r\nvar Aopf = \"𝔸\";\r\nvar ApplyFunction = \"⁡\";\r\nvar Arin = \"Å\";\r\nvar Aring = \"Å\";\r\nvar Ascr = \"𝒜\";\r\nvar Assign = \"≔\";\r\nvar Atild = \"Ã\";\r\nvar Atilde = \"Ã\";\r\nvar Aum = \"Ä\";\r\nvar Auml = \"Ä\";\r\nvar Backslash = \"∖\";\r\nvar Barv = \"⫧\";\r\nvar Barwed = \"⌆\";\r\nvar Bcy = \"Б\";\r\nvar Because = \"∵\";\r\nvar Bernoullis = \"ℬ\";\r\nvar Beta = \"Β\";\r\nvar Bfr = \"𝔅\";\r\nvar Bopf = \"𝔹\";\r\nvar Breve = \"˘\";\r\nvar Bscr = \"ℬ\";\r\nvar Bumpeq = \"≎\";\r\nvar CHcy = \"Ч\";\r\nvar COP = \"©\";\r\nvar COPY = \"©\";\r\nvar Cacute = \"Ć\";\r\nvar Cap = \"⋒\";\r\nvar CapitalDifferentialD = \"ⅅ\";\r\nvar Cayleys = \"ℭ\";\r\nvar Ccaron = \"Č\";\r\nvar Ccedi = \"Ç\";\r\nvar Ccedil = \"Ç\";\r\nvar Ccirc = \"Ĉ\";\r\nvar Cconint = \"∰\";\r\nvar Cdot = \"Ċ\";\r\nvar Cedilla = \"¸\";\r\nvar CenterDot = \"·\";\r\nvar Cfr = \"ℭ\";\r\nvar Chi = \"Χ\";\r\nvar CircleDot = \"⊙\";\r\nvar CircleMinus = \"⊖\";\r\nvar CirclePlus = \"⊕\";\r\nvar CircleTimes = \"⊗\";\r\nvar ClockwiseContourIntegral = \"∲\";\r\nvar CloseCurlyDoubleQuote = \"”\";\r\nvar CloseCurlyQuote = \"’\";\r\nvar Colon = \"∷\";\r\nvar Colone = \"⩴\";\r\nvar Congruent = \"≡\";\r\nvar Conint = \"∯\";\r\nvar ContourIntegral = \"∮\";\r\nvar Copf = \"ℂ\";\r\nvar Coproduct = \"∐\";\r\nvar CounterClockwiseContourIntegral = \"∳\";\r\nvar Cross = \"⨯\";\r\nvar Cscr = \"𝒞\";\r\nvar Cup = \"⋓\";\r\nvar CupCap = \"≍\";\r\nvar DD = \"ⅅ\";\r\nvar DDotrahd = \"⤑\";\r\nvar DJcy = \"Ђ\";\r\nvar DScy = \"Ѕ\";\r\nvar DZcy = \"Џ\";\r\nvar Dagger = \"‡\";\r\nvar Darr = \"↡\";\r\nvar Dashv = \"⫤\";\r\nvar Dcaron = \"Ď\";\r\nvar Dcy = \"Д\";\r\nvar Del = \"∇\";\r\nvar Delta = \"Δ\";\r\nvar Dfr = \"𝔇\";\r\nvar DiacriticalAcute = \"´\";\r\nvar DiacriticalDot = \"˙\";\r\nvar DiacriticalDoubleAcute = \"˝\";\r\nvar DiacriticalGrave = \"`\";\r\nvar DiacriticalTilde = \"˜\";\r\nvar Diamond = \"⋄\";\r\nvar DifferentialD = \"ⅆ\";\r\nvar Dopf = \"𝔻\";\r\nvar Dot = \"¨\";\r\nvar DotDot = \"⃜\";\r\nvar DotEqual = \"≐\";\r\nvar DoubleContourIntegral = \"∯\";\r\nvar DoubleDot = \"¨\";\r\nvar DoubleDownArrow = \"⇓\";\r\nvar DoubleLeftArrow = \"⇐\";\r\nvar DoubleLeftRightArrow = \"⇔\";\r\nvar DoubleLeftTee = \"⫤\";\r\nvar DoubleLongLeftArrow = \"⟸\";\r\nvar DoubleLongLeftRightArrow = \"⟺\";\r\nvar DoubleLongRightArrow = \"⟹\";\r\nvar DoubleRightArrow = \"⇒\";\r\nvar DoubleRightTee = \"⊨\";\r\nvar DoubleUpArrow = \"⇑\";\r\nvar DoubleUpDownArrow = \"⇕\";\r\nvar DoubleVerticalBar = \"∥\";\r\nvar DownArrow = \"↓\";\r\nvar DownArrowBar = \"⤓\";\r\nvar DownArrowUpArrow = \"⇵\";\r\nvar DownBreve = \"̑\";\r\nvar DownLeftRightVector = \"⥐\";\r\nvar DownLeftTeeVector = \"⥞\";\r\nvar DownLeftVector = \"↽\";\r\nvar DownLeftVectorBar = \"⥖\";\r\nvar DownRightTeeVector = \"⥟\";\r\nvar DownRightVector = \"⇁\";\r\nvar DownRightVectorBar = \"⥗\";\r\nvar DownTee = \"⊤\";\r\nvar DownTeeArrow = \"↧\";\r\nvar Downarrow = \"⇓\";\r\nvar Dscr = \"𝒟\";\r\nvar Dstrok = \"Đ\";\r\nvar ENG = \"Ŋ\";\r\nvar ET = \"Ð\";\r\nvar ETH = \"Ð\";\r\nvar Eacut = \"É\";\r\nvar Eacute = \"É\";\r\nvar Ecaron = \"Ě\";\r\nvar Ecir = \"Ê\";\r\nvar Ecirc = \"Ê\";\r\nvar Ecy = \"Э\";\r\nvar Edot = \"Ė\";\r\nvar Efr = \"𝔈\";\r\nvar Egrav = \"È\";\r\nvar Egrave = \"È\";\r\nvar Element = \"∈\";\r\nvar Emacr = \"Ē\";\r\nvar EmptySmallSquare = \"◻\";\r\nvar EmptyVerySmallSquare = \"▫\";\r\nvar Eogon = \"Ę\";\r\nvar Eopf = \"𝔼\";\r\nvar Epsilon = \"Ε\";\r\nvar Equal = \"⩵\";\r\nvar EqualTilde = \"≂\";\r\nvar Equilibrium = \"⇌\";\r\nvar Escr = \"ℰ\";\r\nvar Esim = \"⩳\";\r\nvar Eta = \"Η\";\r\nvar Eum = \"Ë\";\r\nvar Euml = \"Ë\";\r\nvar Exists = \"∃\";\r\nvar ExponentialE = \"ⅇ\";\r\nvar Fcy = \"Ф\";\r\nvar Ffr = \"𝔉\";\r\nvar FilledSmallSquare = \"◼\";\r\nvar FilledVerySmallSquare = \"▪\";\r\nvar Fopf = \"𝔽\";\r\nvar ForAll = \"∀\";\r\nvar Fouriertrf = \"ℱ\";\r\nvar Fscr = \"ℱ\";\r\nvar GJcy = \"Ѓ\";\r\nvar G = \">\";\r\nvar GT = \">\";\r\nvar Gamma = \"Γ\";\r\nvar Gammad = \"Ϝ\";\r\nvar Gbreve = \"Ğ\";\r\nvar Gcedil = \"Ģ\";\r\nvar Gcirc = \"Ĝ\";\r\nvar Gcy = \"Г\";\r\nvar Gdot = \"Ġ\";\r\nvar Gfr = \"𝔊\";\r\nvar Gg = \"⋙\";\r\nvar Gopf = \"𝔾\";\r\nvar GreaterEqual = \"≥\";\r\nvar GreaterEqualLess = \"⋛\";\r\nvar GreaterFullEqual = \"≧\";\r\nvar GreaterGreater = \"⪢\";\r\nvar GreaterLess = \"≷\";\r\nvar GreaterSlantEqual = \"⩾\";\r\nvar GreaterTilde = \"≳\";\r\nvar Gscr = \"𝒢\";\r\nvar Gt = \"≫\";\r\nvar HARDcy = \"Ъ\";\r\nvar Hacek = \"ˇ\";\r\nvar Hat = \"^\";\r\nvar Hcirc = \"Ĥ\";\r\nvar Hfr = \"ℌ\";\r\nvar HilbertSpace = \"ℋ\";\r\nvar Hopf = \"ℍ\";\r\nvar HorizontalLine = \"─\";\r\nvar Hscr = \"ℋ\";\r\nvar Hstrok = \"Ħ\";\r\nvar HumpDownHump = \"≎\";\r\nvar HumpEqual = \"≏\";\r\nvar IEcy = \"Е\";\r\nvar IJlig = \"Ĳ\";\r\nvar IOcy = \"Ё\";\r\nvar Iacut = \"Í\";\r\nvar Iacute = \"Í\";\r\nvar Icir = \"Î\";\r\nvar Icirc = \"Î\";\r\nvar Icy = \"И\";\r\nvar Idot = \"İ\";\r\nvar Ifr = \"ℑ\";\r\nvar Igrav = \"Ì\";\r\nvar Igrave = \"Ì\";\r\nvar Im = \"ℑ\";\r\nvar Imacr = \"Ī\";\r\nvar ImaginaryI = \"ⅈ\";\r\nvar Implies = \"⇒\";\r\nvar Int = \"∬\";\r\nvar Integral = \"∫\";\r\nvar Intersection = \"⋂\";\r\nvar InvisibleComma = \"⁣\";\r\nvar InvisibleTimes = \"⁢\";\r\nvar Iogon = \"Į\";\r\nvar Iopf = \"𝕀\";\r\nvar Iota = \"Ι\";\r\nvar Iscr = \"ℐ\";\r\nvar Itilde = \"Ĩ\";\r\nvar Iukcy = \"І\";\r\nvar Ium = \"Ï\";\r\nvar Iuml = \"Ï\";\r\nvar Jcirc = \"Ĵ\";\r\nvar Jcy = \"Й\";\r\nvar Jfr = \"𝔍\";\r\nvar Jopf = \"𝕁\";\r\nvar Jscr = \"𝒥\";\r\nvar Jsercy = \"Ј\";\r\nvar Jukcy = \"Є\";\r\nvar KHcy = \"Х\";\r\nvar KJcy = \"Ќ\";\r\nvar Kappa = \"Κ\";\r\nvar Kcedil = \"Ķ\";\r\nvar Kcy = \"К\";\r\nvar Kfr = \"𝔎\";\r\nvar Kopf = \"𝕂\";\r\nvar Kscr = \"𝒦\";\r\nvar LJcy = \"Љ\";\r\nvar L = \"<\";\r\nvar LT = \"<\";\r\nvar Lacute = \"Ĺ\";\r\nvar Lambda = \"Λ\";\r\nvar Lang = \"⟪\";\r\nvar Laplacetrf = \"ℒ\";\r\nvar Larr = \"↞\";\r\nvar Lcaron = \"Ľ\";\r\nvar Lcedil = \"Ļ\";\r\nvar Lcy = \"Л\";\r\nvar LeftAngleBracket = \"⟨\";\r\nvar LeftArrow = \"←\";\r\nvar LeftArrowBar = \"⇤\";\r\nvar LeftArrowRightArrow = \"⇆\";\r\nvar LeftCeiling = \"⌈\";\r\nvar LeftDoubleBracket = \"⟦\";\r\nvar LeftDownTeeVector = \"⥡\";\r\nvar LeftDownVector = \"⇃\";\r\nvar LeftDownVectorBar = \"⥙\";\r\nvar LeftFloor = \"⌊\";\r\nvar LeftRightArrow = \"↔\";\r\nvar LeftRightVector = \"⥎\";\r\nvar LeftTee = \"⊣\";\r\nvar LeftTeeArrow = \"↤\";\r\nvar LeftTeeVector = \"⥚\";\r\nvar LeftTriangle = \"⊲\";\r\nvar LeftTriangleBar = \"⧏\";\r\nvar LeftTriangleEqual = \"⊴\";\r\nvar LeftUpDownVector = \"⥑\";\r\nvar LeftUpTeeVector = \"⥠\";\r\nvar LeftUpVector = \"↿\";\r\nvar LeftUpVectorBar = \"⥘\";\r\nvar LeftVector = \"↼\";\r\nvar LeftVectorBar = \"⥒\";\r\nvar Leftarrow = \"⇐\";\r\nvar Leftrightarrow = \"⇔\";\r\nvar LessEqualGreater = \"⋚\";\r\nvar LessFullEqual = \"≦\";\r\nvar LessGreater = \"≶\";\r\nvar LessLess = \"⪡\";\r\nvar LessSlantEqual = \"⩽\";\r\nvar LessTilde = \"≲\";\r\nvar Lfr = \"𝔏\";\r\nvar Ll = \"⋘\";\r\nvar Lleftarrow = \"⇚\";\r\nvar Lmidot = \"Ŀ\";\r\nvar LongLeftArrow = \"⟵\";\r\nvar LongLeftRightArrow = \"⟷\";\r\nvar LongRightArrow = \"⟶\";\r\nvar Longleftarrow = \"⟸\";\r\nvar Longleftrightarrow = \"⟺\";\r\nvar Longrightarrow = \"⟹\";\r\nvar Lopf = \"𝕃\";\r\nvar LowerLeftArrow = \"↙\";\r\nvar LowerRightArrow = \"↘\";\r\nvar Lscr = \"ℒ\";\r\nvar Lsh = \"↰\";\r\nvar Lstrok = \"Ł\";\r\nvar Lt = \"≪\";\r\nvar Mcy = \"М\";\r\nvar MediumSpace = \" \";\r\nvar Mellintrf = \"ℳ\";\r\nvar Mfr = \"𝔐\";\r\nvar MinusPlus = \"∓\";\r\nvar Mopf = \"𝕄\";\r\nvar Mscr = \"ℳ\";\r\nvar Mu = \"Μ\";\r\nvar NJcy = \"Њ\";\r\nvar Nacute = \"Ń\";\r\nvar Ncaron = \"Ň\";\r\nvar Ncedil = \"Ņ\";\r\nvar Ncy = \"Н\";\r\nvar NegativeMediumSpace = \"​\";\r\nvar NegativeThickSpace = \"​\";\r\nvar NegativeThinSpace = \"​\";\r\nvar NegativeVeryThinSpace = \"​\";\r\nvar NestedGreaterGreater = \"≫\";\r\nvar NestedLessLess = \"≪\";\r\nvar NewLine = \"\\n\";\r\nvar Nfr = \"𝔑\";\r\nvar NoBreak = \"⁠\";\r\nvar NonBreakingSpace = \" \";\r\nvar Nopf = \"ℕ\";\r\nvar Not = \"⫬\";\r\nvar NotCongruent = \"≢\";\r\nvar NotCupCap = \"≭\";\r\nvar NotDoubleVerticalBar = \"∦\";\r\nvar NotElement = \"∉\";\r\nvar NotEqual = \"≠\";\r\nvar NotEqualTilde = \"≂̸\";\r\nvar NotExists = \"∄\";\r\nvar NotGreater = \"≯\";\r\nvar NotGreaterEqual = \"≱\";\r\nvar NotGreaterFullEqual = \"≧̸\";\r\nvar NotGreaterGreater = \"≫̸\";\r\nvar NotGreaterLess = \"≹\";\r\nvar NotGreaterSlantEqual = \"⩾̸\";\r\nvar NotGreaterTilde = \"≵\";\r\nvar NotHumpDownHump = \"≎̸\";\r\nvar NotHumpEqual = \"≏̸\";\r\nvar NotLeftTriangle = \"⋪\";\r\nvar NotLeftTriangleBar = \"⧏̸\";\r\nvar NotLeftTriangleEqual = \"⋬\";\r\nvar NotLess = \"≮\";\r\nvar NotLessEqual = \"≰\";\r\nvar NotLessGreater = \"≸\";\r\nvar NotLessLess = \"≪̸\";\r\nvar NotLessSlantEqual = \"⩽̸\";\r\nvar NotLessTilde = \"≴\";\r\nvar NotNestedGreaterGreater = \"⪢̸\";\r\nvar NotNestedLessLess = \"⪡̸\";\r\nvar NotPrecedes = \"⊀\";\r\nvar NotPrecedesEqual = \"⪯̸\";\r\nvar NotPrecedesSlantEqual = \"⋠\";\r\nvar NotReverseElement = \"∌\";\r\nvar NotRightTriangle = \"⋫\";\r\nvar NotRightTriangleBar = \"⧐̸\";\r\nvar NotRightTriangleEqual = \"⋭\";\r\nvar NotSquareSubset = \"⊏̸\";\r\nvar NotSquareSubsetEqual = \"⋢\";\r\nvar NotSquareSuperset = \"⊐̸\";\r\nvar NotSquareSupersetEqual = \"⋣\";\r\nvar NotSubset = \"⊂⃒\";\r\nvar NotSubsetEqual = \"⊈\";\r\nvar NotSucceeds = \"⊁\";\r\nvar NotSucceedsEqual = \"⪰̸\";\r\nvar NotSucceedsSlantEqual = \"⋡\";\r\nvar NotSucceedsTilde = \"≿̸\";\r\nvar NotSuperset = \"⊃⃒\";\r\nvar NotSupersetEqual = \"⊉\";\r\nvar NotTilde = \"≁\";\r\nvar NotTildeEqual = \"≄\";\r\nvar NotTildeFullEqual = \"≇\";\r\nvar NotTildeTilde = \"≉\";\r\nvar NotVerticalBar = \"∤\";\r\nvar Nscr = \"𝒩\";\r\nvar Ntild = \"Ñ\";\r\nvar Ntilde = \"Ñ\";\r\nvar Nu = \"Ν\";\r\nvar OElig = \"Œ\";\r\nvar Oacut = \"Ó\";\r\nvar Oacute = \"Ó\";\r\nvar Ocir = \"Ô\";\r\nvar Ocirc = \"Ô\";\r\nvar Ocy = \"О\";\r\nvar Odblac = \"Ő\";\r\nvar Ofr = \"𝔒\";\r\nvar Ograv = \"Ò\";\r\nvar Ograve = \"Ò\";\r\nvar Omacr = \"Ō\";\r\nvar Omega = \"Ω\";\r\nvar Omicron = \"Ο\";\r\nvar Oopf = \"𝕆\";\r\nvar OpenCurlyDoubleQuote = \"“\";\r\nvar OpenCurlyQuote = \"‘\";\r\nvar Or = \"⩔\";\r\nvar Oscr = \"𝒪\";\r\nvar Oslas = \"Ø\";\r\nvar Oslash = \"Ø\";\r\nvar Otild = \"Õ\";\r\nvar Otilde = \"Õ\";\r\nvar Otimes = \"⨷\";\r\nvar Oum = \"Ö\";\r\nvar Ouml = \"Ö\";\r\nvar OverBar = \"‾\";\r\nvar OverBrace = \"⏞\";\r\nvar OverBracket = \"⎴\";\r\nvar OverParenthesis = \"⏜\";\r\nvar PartialD = \"∂\";\r\nvar Pcy = \"П\";\r\nvar Pfr = \"𝔓\";\r\nvar Phi = \"Φ\";\r\nvar Pi = \"Π\";\r\nvar PlusMinus = \"±\";\r\nvar Poincareplane = \"ℌ\";\r\nvar Popf = \"ℙ\";\r\nvar Pr = \"⪻\";\r\nvar Precedes = \"≺\";\r\nvar PrecedesEqual = \"⪯\";\r\nvar PrecedesSlantEqual = \"≼\";\r\nvar PrecedesTilde = \"≾\";\r\nvar Prime = \"″\";\r\nvar Product = \"∏\";\r\nvar Proportion = \"∷\";\r\nvar Proportional = \"∝\";\r\nvar Pscr = \"𝒫\";\r\nvar Psi = \"Ψ\";\r\nvar QUO = \"\\\"\";\r\nvar QUOT = \"\\\"\";\r\nvar Qfr = \"𝔔\";\r\nvar Qopf = \"ℚ\";\r\nvar Qscr = \"𝒬\";\r\nvar RBarr = \"⤐\";\r\nvar RE = \"®\";\r\nvar REG = \"®\";\r\nvar Racute = \"Ŕ\";\r\nvar Rang = \"⟫\";\r\nvar Rarr = \"↠\";\r\nvar Rarrtl = \"⤖\";\r\nvar Rcaron = \"Ř\";\r\nvar Rcedil = \"Ŗ\";\r\nvar Rcy = \"Р\";\r\nvar Re = \"ℜ\";\r\nvar ReverseElement = \"∋\";\r\nvar ReverseEquilibrium = \"⇋\";\r\nvar ReverseUpEquilibrium = \"⥯\";\r\nvar Rfr = \"ℜ\";\r\nvar Rho = \"Ρ\";\r\nvar RightAngleBracket = \"⟩\";\r\nvar RightArrow = \"→\";\r\nvar RightArrowBar = \"⇥\";\r\nvar RightArrowLeftArrow = \"⇄\";\r\nvar RightCeiling = \"⌉\";\r\nvar RightDoubleBracket = \"⟧\";\r\nvar RightDownTeeVector = \"⥝\";\r\nvar RightDownVector = \"⇂\";\r\nvar RightDownVectorBar = \"⥕\";\r\nvar RightFloor = \"⌋\";\r\nvar RightTee = \"⊢\";\r\nvar RightTeeArrow = \"↦\";\r\nvar RightTeeVector = \"⥛\";\r\nvar RightTriangle = \"⊳\";\r\nvar RightTriangleBar = \"⧐\";\r\nvar RightTriangleEqual = \"⊵\";\r\nvar RightUpDownVector = \"⥏\";\r\nvar RightUpTeeVector = \"⥜\";\r\nvar RightUpVector = \"↾\";\r\nvar RightUpVectorBar = \"⥔\";\r\nvar RightVector = \"⇀\";\r\nvar RightVectorBar = \"⥓\";\r\nvar Rightarrow = \"⇒\";\r\nvar Ropf = \"ℝ\";\r\nvar RoundImplies = \"⥰\";\r\nvar Rrightarrow = \"⇛\";\r\nvar Rscr = \"ℛ\";\r\nvar Rsh = \"↱\";\r\nvar RuleDelayed = \"⧴\";\r\nvar SHCHcy = \"Щ\";\r\nvar SHcy = \"Ш\";\r\nvar SOFTcy = \"Ь\";\r\nvar Sacute = \"Ś\";\r\nvar Sc = \"⪼\";\r\nvar Scaron = \"Š\";\r\nvar Scedil = \"Ş\";\r\nvar Scirc = \"Ŝ\";\r\nvar Scy = \"С\";\r\nvar Sfr = \"𝔖\";\r\nvar ShortDownArrow = \"↓\";\r\nvar ShortLeftArrow = \"←\";\r\nvar ShortRightArrow = \"→\";\r\nvar ShortUpArrow = \"↑\";\r\nvar Sigma = \"Σ\";\r\nvar SmallCircle = \"∘\";\r\nvar Sopf = \"𝕊\";\r\nvar Sqrt = \"√\";\r\nvar Square = \"□\";\r\nvar SquareIntersection = \"⊓\";\r\nvar SquareSubset = \"⊏\";\r\nvar SquareSubsetEqual = \"⊑\";\r\nvar SquareSuperset = \"⊐\";\r\nvar SquareSupersetEqual = \"⊒\";\r\nvar SquareUnion = \"⊔\";\r\nvar Sscr = \"𝒮\";\r\nvar Star = \"⋆\";\r\nvar Sub = \"⋐\";\r\nvar Subset = \"⋐\";\r\nvar SubsetEqual = \"⊆\";\r\nvar Succeeds = \"≻\";\r\nvar SucceedsEqual = \"⪰\";\r\nvar SucceedsSlantEqual = \"≽\";\r\nvar SucceedsTilde = \"≿\";\r\nvar SuchThat = \"∋\";\r\nvar Sum = \"∑\";\r\nvar Sup = \"⋑\";\r\nvar Superset = \"⊃\";\r\nvar SupersetEqual = \"⊇\";\r\nvar Supset = \"⋑\";\r\nvar THOR = \"Þ\";\r\nvar THORN = \"Þ\";\r\nvar TRADE = \"™\";\r\nvar TSHcy = \"Ћ\";\r\nvar TScy = \"Ц\";\r\nvar Tab = \"\\t\";\r\nvar Tau = \"Τ\";\r\nvar Tcaron = \"Ť\";\r\nvar Tcedil = \"Ţ\";\r\nvar Tcy = \"Т\";\r\nvar Tfr = \"𝔗\";\r\nvar Therefore = \"∴\";\r\nvar Theta = \"Θ\";\r\nvar ThickSpace = \"  \";\r\nvar ThinSpace = \" \";\r\nvar Tilde = \"∼\";\r\nvar TildeEqual = \"≃\";\r\nvar TildeFullEqual = \"≅\";\r\nvar TildeTilde = \"≈\";\r\nvar Topf = \"𝕋\";\r\nvar TripleDot = \"⃛\";\r\nvar Tscr = \"𝒯\";\r\nvar Tstrok = \"Ŧ\";\r\nvar Uacut = \"Ú\";\r\nvar Uacute = \"Ú\";\r\nvar Uarr = \"↟\";\r\nvar Uarrocir = \"⥉\";\r\nvar Ubrcy = \"Ў\";\r\nvar Ubreve = \"Ŭ\";\r\nvar Ucir = \"Û\";\r\nvar Ucirc = \"Û\";\r\nvar Ucy = \"У\";\r\nvar Udblac = \"Ű\";\r\nvar Ufr = \"𝔘\";\r\nvar Ugrav = \"Ù\";\r\nvar Ugrave = \"Ù\";\r\nvar Umacr = \"Ū\";\r\nvar UnderBar = \"_\";\r\nvar UnderBrace = \"⏟\";\r\nvar UnderBracket = \"⎵\";\r\nvar UnderParenthesis = \"⏝\";\r\nvar Union = \"⋃\";\r\nvar UnionPlus = \"⊎\";\r\nvar Uogon = \"Ų\";\r\nvar Uopf = \"𝕌\";\r\nvar UpArrow = \"↑\";\r\nvar UpArrowBar = \"⤒\";\r\nvar UpArrowDownArrow = \"⇅\";\r\nvar UpDownArrow = \"↕\";\r\nvar UpEquilibrium = \"⥮\";\r\nvar UpTee = \"⊥\";\r\nvar UpTeeArrow = \"↥\";\r\nvar Uparrow = \"⇑\";\r\nvar Updownarrow = \"⇕\";\r\nvar UpperLeftArrow = \"↖\";\r\nvar UpperRightArrow = \"↗\";\r\nvar Upsi = \"ϒ\";\r\nvar Upsilon = \"Υ\";\r\nvar Uring = \"Ů\";\r\nvar Uscr = \"𝒰\";\r\nvar Utilde = \"Ũ\";\r\nvar Uum = \"Ü\";\r\nvar Uuml = \"Ü\";\r\nvar VDash = \"⊫\";\r\nvar Vbar = \"⫫\";\r\nvar Vcy = \"В\";\r\nvar Vdash = \"⊩\";\r\nvar Vdashl = \"⫦\";\r\nvar Vee = \"⋁\";\r\nvar Verbar = \"‖\";\r\nvar Vert = \"‖\";\r\nvar VerticalBar = \"∣\";\r\nvar VerticalLine = \"|\";\r\nvar VerticalSeparator = \"❘\";\r\nvar VerticalTilde = \"≀\";\r\nvar VeryThinSpace = \" \";\r\nvar Vfr = \"𝔙\";\r\nvar Vopf = \"𝕍\";\r\nvar Vscr = \"𝒱\";\r\nvar Vvdash = \"⊪\";\r\nvar Wcirc = \"Ŵ\";\r\nvar Wedge = \"⋀\";\r\nvar Wfr = \"𝔚\";\r\nvar Wopf = \"𝕎\";\r\nvar Wscr = \"𝒲\";\r\nvar Xfr = \"𝔛\";\r\nvar Xi = \"Ξ\";\r\nvar Xopf = \"𝕏\";\r\nvar Xscr = \"𝒳\";\r\nvar YAcy = \"Я\";\r\nvar YIcy = \"Ї\";\r\nvar YUcy = \"Ю\";\r\nvar Yacut = \"Ý\";\r\nvar Yacute = \"Ý\";\r\nvar Ycirc = \"Ŷ\";\r\nvar Ycy = \"Ы\";\r\nvar Yfr = \"𝔜\";\r\nvar Yopf = \"𝕐\";\r\nvar Yscr = \"𝒴\";\r\nvar Yuml = \"Ÿ\";\r\nvar ZHcy = \"Ж\";\r\nvar Zacute = \"Ź\";\r\nvar Zcaron = \"Ž\";\r\nvar Zcy = \"З\";\r\nvar Zdot = \"Ż\";\r\nvar ZeroWidthSpace = \"​\";\r\nvar Zeta = \"Ζ\";\r\nvar Zfr = \"ℨ\";\r\nvar Zopf = \"ℤ\";\r\nvar Zscr = \"𝒵\";\r\nvar aacut = \"á\";\r\nvar aacute = \"á\";\r\nvar abreve = \"ă\";\r\nvar ac = \"∾\";\r\nvar acE = \"∾̳\";\r\nvar acd = \"∿\";\r\nvar acir = \"â\";\r\nvar acirc = \"â\";\r\nvar acut = \"´\";\r\nvar acute = \"´\";\r\nvar acy = \"а\";\r\nvar aeli = \"æ\";\r\nvar aelig = \"æ\";\r\nvar af = \"⁡\";\r\nvar afr = \"𝔞\";\r\nvar agrav = \"à\";\r\nvar agrave = \"à\";\r\nvar alefsym = \"ℵ\";\r\nvar aleph = \"ℵ\";\r\nvar alpha = \"α\";\r\nvar amacr = \"ā\";\r\nvar amalg = \"⨿\";\r\nvar am = \"&\";\r\nvar amp = \"&\";\r\nvar and = \"∧\";\r\nvar andand = \"⩕\";\r\nvar andd = \"⩜\";\r\nvar andslope = \"⩘\";\r\nvar andv = \"⩚\";\r\nvar ang = \"∠\";\r\nvar ange = \"⦤\";\r\nvar angle = \"∠\";\r\nvar angmsd = \"∡\";\r\nvar angmsdaa = \"⦨\";\r\nvar angmsdab = \"⦩\";\r\nvar angmsdac = \"⦪\";\r\nvar angmsdad = \"⦫\";\r\nvar angmsdae = \"⦬\";\r\nvar angmsdaf = \"⦭\";\r\nvar angmsdag = \"⦮\";\r\nvar angmsdah = \"⦯\";\r\nvar angrt = \"∟\";\r\nvar angrtvb = \"⊾\";\r\nvar angrtvbd = \"⦝\";\r\nvar angsph = \"∢\";\r\nvar angst = \"Å\";\r\nvar angzarr = \"⍼\";\r\nvar aogon = \"ą\";\r\nvar aopf = \"𝕒\";\r\nvar ap = \"≈\";\r\nvar apE = \"⩰\";\r\nvar apacir = \"⩯\";\r\nvar ape = \"≊\";\r\nvar apid = \"≋\";\r\nvar apos = \"'\";\r\nvar approx = \"≈\";\r\nvar approxeq = \"≊\";\r\nvar arin = \"å\";\r\nvar aring = \"å\";\r\nvar ascr = \"𝒶\";\r\nvar ast = \"*\";\r\nvar asymp = \"≈\";\r\nvar asympeq = \"≍\";\r\nvar atild = \"ã\";\r\nvar atilde = \"ã\";\r\nvar aum = \"ä\";\r\nvar auml = \"ä\";\r\nvar awconint = \"∳\";\r\nvar awint = \"⨑\";\r\nvar bNot = \"⫭\";\r\nvar backcong = \"≌\";\r\nvar backepsilon = \"϶\";\r\nvar backprime = \"‵\";\r\nvar backsim = \"∽\";\r\nvar backsimeq = \"⋍\";\r\nvar barvee = \"⊽\";\r\nvar barwed = \"⌅\";\r\nvar barwedge = \"⌅\";\r\nvar bbrk = \"⎵\";\r\nvar bbrktbrk = \"⎶\";\r\nvar bcong = \"≌\";\r\nvar bcy = \"б\";\r\nvar bdquo = \"„\";\r\nvar becaus = \"∵\";\r\nvar because = \"∵\";\r\nvar bemptyv = \"⦰\";\r\nvar bepsi = \"϶\";\r\nvar bernou = \"ℬ\";\r\nvar beta = \"β\";\r\nvar beth = \"ℶ\";\r\nvar between = \"≬\";\r\nvar bfr = \"𝔟\";\r\nvar bigcap = \"⋂\";\r\nvar bigcirc = \"◯\";\r\nvar bigcup = \"⋃\";\r\nvar bigodot = \"⨀\";\r\nvar bigoplus = \"⨁\";\r\nvar bigotimes = \"⨂\";\r\nvar bigsqcup = \"⨆\";\r\nvar bigstar = \"★\";\r\nvar bigtriangledown = \"▽\";\r\nvar bigtriangleup = \"△\";\r\nvar biguplus = \"⨄\";\r\nvar bigvee = \"⋁\";\r\nvar bigwedge = \"⋀\";\r\nvar bkarow = \"⤍\";\r\nvar blacklozenge = \"⧫\";\r\nvar blacksquare = \"▪\";\r\nvar blacktriangle = \"▴\";\r\nvar blacktriangledown = \"▾\";\r\nvar blacktriangleleft = \"◂\";\r\nvar blacktriangleright = \"▸\";\r\nvar blank = \"␣\";\r\nvar blk12 = \"▒\";\r\nvar blk14 = \"░\";\r\nvar blk34 = \"▓\";\r\nvar block = \"█\";\r\nvar bne = \"=⃥\";\r\nvar bnequiv = \"≡⃥\";\r\nvar bnot = \"⌐\";\r\nvar bopf = \"𝕓\";\r\nvar bot = \"⊥\";\r\nvar bottom = \"⊥\";\r\nvar bowtie = \"⋈\";\r\nvar boxDL = \"╗\";\r\nvar boxDR = \"╔\";\r\nvar boxDl = \"╖\";\r\nvar boxDr = \"╓\";\r\nvar boxH = \"═\";\r\nvar boxHD = \"╦\";\r\nvar boxHU = \"╩\";\r\nvar boxHd = \"╤\";\r\nvar boxHu = \"╧\";\r\nvar boxUL = \"╝\";\r\nvar boxUR = \"╚\";\r\nvar boxUl = \"╜\";\r\nvar boxUr = \"╙\";\r\nvar boxV = \"║\";\r\nvar boxVH = \"╬\";\r\nvar boxVL = \"╣\";\r\nvar boxVR = \"╠\";\r\nvar boxVh = \"╫\";\r\nvar boxVl = \"╢\";\r\nvar boxVr = \"╟\";\r\nvar boxbox = \"⧉\";\r\nvar boxdL = \"╕\";\r\nvar boxdR = \"╒\";\r\nvar boxdl = \"┐\";\r\nvar boxdr = \"┌\";\r\nvar boxh = \"─\";\r\nvar boxhD = \"╥\";\r\nvar boxhU = \"╨\";\r\nvar boxhd = \"┬\";\r\nvar boxhu = \"┴\";\r\nvar boxminus = \"⊟\";\r\nvar boxplus = \"⊞\";\r\nvar boxtimes = \"⊠\";\r\nvar boxuL = \"╛\";\r\nvar boxuR = \"╘\";\r\nvar boxul = \"┘\";\r\nvar boxur = \"└\";\r\nvar boxv = \"│\";\r\nvar boxvH = \"╪\";\r\nvar boxvL = \"╡\";\r\nvar boxvR = \"╞\";\r\nvar boxvh = \"┼\";\r\nvar boxvl = \"┤\";\r\nvar boxvr = \"├\";\r\nvar bprime = \"‵\";\r\nvar breve = \"˘\";\r\nvar brvba = \"¦\";\r\nvar brvbar = \"¦\";\r\nvar bscr = \"𝒷\";\r\nvar bsemi = \"⁏\";\r\nvar bsim = \"∽\";\r\nvar bsime = \"⋍\";\r\nvar bsol = \"\\\\\";\r\nvar bsolb = \"⧅\";\r\nvar bsolhsub = \"⟈\";\r\nvar bull = \"•\";\r\nvar bullet = \"•\";\r\nvar bump = \"≎\";\r\nvar bumpE = \"⪮\";\r\nvar bumpe = \"≏\";\r\nvar bumpeq = \"≏\";\r\nvar cacute = \"ć\";\r\nvar cap = \"∩\";\r\nvar capand = \"⩄\";\r\nvar capbrcup = \"⩉\";\r\nvar capcap = \"⩋\";\r\nvar capcup = \"⩇\";\r\nvar capdot = \"⩀\";\r\nvar caps = \"∩︀\";\r\nvar caret = \"⁁\";\r\nvar caron = \"ˇ\";\r\nvar ccaps = \"⩍\";\r\nvar ccaron = \"č\";\r\nvar ccedi = \"ç\";\r\nvar ccedil = \"ç\";\r\nvar ccirc = \"ĉ\";\r\nvar ccups = \"⩌\";\r\nvar ccupssm = \"⩐\";\r\nvar cdot = \"ċ\";\r\nvar cedi = \"¸\";\r\nvar cedil = \"¸\";\r\nvar cemptyv = \"⦲\";\r\nvar cen = \"¢\";\r\nvar cent = \"¢\";\r\nvar centerdot = \"·\";\r\nvar cfr = \"𝔠\";\r\nvar chcy = \"ч\";\r\nvar check = \"✓\";\r\nvar checkmark = \"✓\";\r\nvar chi = \"χ\";\r\nvar cir = \"○\";\r\nvar cirE = \"⧃\";\r\nvar circ = \"ˆ\";\r\nvar circeq = \"≗\";\r\nvar circlearrowleft = \"↺\";\r\nvar circlearrowright = \"↻\";\r\nvar circledR = \"®\";\r\nvar circledS = \"Ⓢ\";\r\nvar circledast = \"⊛\";\r\nvar circledcirc = \"⊚\";\r\nvar circleddash = \"⊝\";\r\nvar cire = \"≗\";\r\nvar cirfnint = \"⨐\";\r\nvar cirmid = \"⫯\";\r\nvar cirscir = \"⧂\";\r\nvar clubs = \"♣\";\r\nvar clubsuit = \"♣\";\r\nvar colon = \":\";\r\nvar colone = \"≔\";\r\nvar coloneq = \"≔\";\r\nvar comma = \",\";\r\nvar commat = \"@\";\r\nvar comp = \"∁\";\r\nvar compfn = \"∘\";\r\nvar complement = \"∁\";\r\nvar complexes = \"ℂ\";\r\nvar cong = \"≅\";\r\nvar congdot = \"⩭\";\r\nvar conint = \"∮\";\r\nvar copf = \"𝕔\";\r\nvar coprod = \"∐\";\r\nvar cop = \"©\";\r\nvar copy = \"©\";\r\nvar copysr = \"℗\";\r\nvar crarr = \"↵\";\r\nvar cross = \"✗\";\r\nvar cscr = \"𝒸\";\r\nvar csub = \"⫏\";\r\nvar csube = \"⫑\";\r\nvar csup = \"⫐\";\r\nvar csupe = \"⫒\";\r\nvar ctdot = \"⋯\";\r\nvar cudarrl = \"⤸\";\r\nvar cudarrr = \"⤵\";\r\nvar cuepr = \"⋞\";\r\nvar cuesc = \"⋟\";\r\nvar cularr = \"↶\";\r\nvar cularrp = \"⤽\";\r\nvar cup = \"∪\";\r\nvar cupbrcap = \"⩈\";\r\nvar cupcap = \"⩆\";\r\nvar cupcup = \"⩊\";\r\nvar cupdot = \"⊍\";\r\nvar cupor = \"⩅\";\r\nvar cups = \"∪︀\";\r\nvar curarr = \"↷\";\r\nvar curarrm = \"⤼\";\r\nvar curlyeqprec = \"⋞\";\r\nvar curlyeqsucc = \"⋟\";\r\nvar curlyvee = \"⋎\";\r\nvar curlywedge = \"⋏\";\r\nvar curre = \"¤\";\r\nvar curren = \"¤\";\r\nvar curvearrowleft = \"↶\";\r\nvar curvearrowright = \"↷\";\r\nvar cuvee = \"⋎\";\r\nvar cuwed = \"⋏\";\r\nvar cwconint = \"∲\";\r\nvar cwint = \"∱\";\r\nvar cylcty = \"⌭\";\r\nvar dArr = \"⇓\";\r\nvar dHar = \"⥥\";\r\nvar dagger = \"†\";\r\nvar daleth = \"ℸ\";\r\nvar darr = \"↓\";\r\nvar dash = \"‐\";\r\nvar dashv = \"⊣\";\r\nvar dbkarow = \"⤏\";\r\nvar dblac = \"˝\";\r\nvar dcaron = \"ď\";\r\nvar dcy = \"д\";\r\nvar dd = \"ⅆ\";\r\nvar ddagger = \"‡\";\r\nvar ddarr = \"⇊\";\r\nvar ddotseq = \"⩷\";\r\nvar de = \"°\";\r\nvar deg = \"°\";\r\nvar delta = \"δ\";\r\nvar demptyv = \"⦱\";\r\nvar dfisht = \"⥿\";\r\nvar dfr = \"𝔡\";\r\nvar dharl = \"⇃\";\r\nvar dharr = \"⇂\";\r\nvar diam = \"⋄\";\r\nvar diamond = \"⋄\";\r\nvar diamondsuit = \"♦\";\r\nvar diams = \"♦\";\r\nvar die = \"¨\";\r\nvar digamma = \"ϝ\";\r\nvar disin = \"⋲\";\r\nvar div = \"÷\";\r\nvar divid = \"÷\";\r\nvar divide = \"÷\";\r\nvar divideontimes = \"⋇\";\r\nvar divonx = \"⋇\";\r\nvar djcy = \"ђ\";\r\nvar dlcorn = \"⌞\";\r\nvar dlcrop = \"⌍\";\r\nvar dollar = \"$\";\r\nvar dopf = \"𝕕\";\r\nvar dot = \"˙\";\r\nvar doteq = \"≐\";\r\nvar doteqdot = \"≑\";\r\nvar dotminus = \"∸\";\r\nvar dotplus = \"∔\";\r\nvar dotsquare = \"⊡\";\r\nvar doublebarwedge = \"⌆\";\r\nvar downarrow = \"↓\";\r\nvar downdownarrows = \"⇊\";\r\nvar downharpoonleft = \"⇃\";\r\nvar downharpoonright = \"⇂\";\r\nvar drbkarow = \"⤐\";\r\nvar drcorn = \"⌟\";\r\nvar drcrop = \"⌌\";\r\nvar dscr = \"𝒹\";\r\nvar dscy = \"ѕ\";\r\nvar dsol = \"⧶\";\r\nvar dstrok = \"đ\";\r\nvar dtdot = \"⋱\";\r\nvar dtri = \"▿\";\r\nvar dtrif = \"▾\";\r\nvar duarr = \"⇵\";\r\nvar duhar = \"⥯\";\r\nvar dwangle = \"⦦\";\r\nvar dzcy = \"џ\";\r\nvar dzigrarr = \"⟿\";\r\nvar eDDot = \"⩷\";\r\nvar eDot = \"≑\";\r\nvar eacut = \"é\";\r\nvar eacute = \"é\";\r\nvar easter = \"⩮\";\r\nvar ecaron = \"ě\";\r\nvar ecir = \"ê\";\r\nvar ecirc = \"ê\";\r\nvar ecolon = \"≕\";\r\nvar ecy = \"э\";\r\nvar edot = \"ė\";\r\nvar ee = \"ⅇ\";\r\nvar efDot = \"≒\";\r\nvar efr = \"𝔢\";\r\nvar eg = \"⪚\";\r\nvar egrav = \"è\";\r\nvar egrave = \"è\";\r\nvar egs = \"⪖\";\r\nvar egsdot = \"⪘\";\r\nvar el = \"⪙\";\r\nvar elinters = \"⏧\";\r\nvar ell = \"ℓ\";\r\nvar els = \"⪕\";\r\nvar elsdot = \"⪗\";\r\nvar emacr = \"ē\";\r\nvar empty = \"∅\";\r\nvar emptyset = \"∅\";\r\nvar emptyv = \"∅\";\r\nvar emsp13 = \" \";\r\nvar emsp14 = \" \";\r\nvar emsp = \" \";\r\nvar eng = \"ŋ\";\r\nvar ensp = \" \";\r\nvar eogon = \"ę\";\r\nvar eopf = \"𝕖\";\r\nvar epar = \"⋕\";\r\nvar eparsl = \"⧣\";\r\nvar eplus = \"⩱\";\r\nvar epsi = \"ε\";\r\nvar epsilon = \"ε\";\r\nvar epsiv = \"ϵ\";\r\nvar eqcirc = \"≖\";\r\nvar eqcolon = \"≕\";\r\nvar eqsim = \"≂\";\r\nvar eqslantgtr = \"⪖\";\r\nvar eqslantless = \"⪕\";\r\nvar equals = \"=\";\r\nvar equest = \"≟\";\r\nvar equiv = \"≡\";\r\nvar equivDD = \"⩸\";\r\nvar eqvparsl = \"⧥\";\r\nvar erDot = \"≓\";\r\nvar erarr = \"⥱\";\r\nvar escr = \"ℯ\";\r\nvar esdot = \"≐\";\r\nvar esim = \"≂\";\r\nvar eta = \"η\";\r\nvar et = \"ð\";\r\nvar eth = \"ð\";\r\nvar eum = \"ë\";\r\nvar euml = \"ë\";\r\nvar euro = \"€\";\r\nvar excl = \"!\";\r\nvar exist = \"∃\";\r\nvar expectation = \"ℰ\";\r\nvar exponentiale = \"ⅇ\";\r\nvar fallingdotseq = \"≒\";\r\nvar fcy = \"ф\";\r\nvar female = \"♀\";\r\nvar ffilig = \"ﬃ\";\r\nvar fflig = \"ﬀ\";\r\nvar ffllig = \"ﬄ\";\r\nvar ffr = \"𝔣\";\r\nvar filig = \"ﬁ\";\r\nvar fjlig = \"fj\";\r\nvar flat = \"♭\";\r\nvar fllig = \"ﬂ\";\r\nvar fltns = \"▱\";\r\nvar fnof = \"ƒ\";\r\nvar fopf = \"𝕗\";\r\nvar forall = \"∀\";\r\nvar fork = \"⋔\";\r\nvar forkv = \"⫙\";\r\nvar fpartint = \"⨍\";\r\nvar frac1 = \"¼\";\r\nvar frac12 = \"½\";\r\nvar frac13 = \"⅓\";\r\nvar frac14 = \"¼\";\r\nvar frac15 = \"⅕\";\r\nvar frac16 = \"⅙\";\r\nvar frac18 = \"⅛\";\r\nvar frac23 = \"⅔\";\r\nvar frac25 = \"⅖\";\r\nvar frac3 = \"¾\";\r\nvar frac34 = \"¾\";\r\nvar frac35 = \"⅗\";\r\nvar frac38 = \"⅜\";\r\nvar frac45 = \"⅘\";\r\nvar frac56 = \"⅚\";\r\nvar frac58 = \"⅝\";\r\nvar frac78 = \"⅞\";\r\nvar frasl = \"⁄\";\r\nvar frown = \"⌢\";\r\nvar fscr = \"𝒻\";\r\nvar gE = \"≧\";\r\nvar gEl = \"⪌\";\r\nvar gacute = \"ǵ\";\r\nvar gamma = \"γ\";\r\nvar gammad = \"ϝ\";\r\nvar gap = \"⪆\";\r\nvar gbreve = \"ğ\";\r\nvar gcirc = \"ĝ\";\r\nvar gcy = \"г\";\r\nvar gdot = \"ġ\";\r\nvar ge = \"≥\";\r\nvar gel = \"⋛\";\r\nvar geq = \"≥\";\r\nvar geqq = \"≧\";\r\nvar geqslant = \"⩾\";\r\nvar ges = \"⩾\";\r\nvar gescc = \"⪩\";\r\nvar gesdot = \"⪀\";\r\nvar gesdoto = \"⪂\";\r\nvar gesdotol = \"⪄\";\r\nvar gesl = \"⋛︀\";\r\nvar gesles = \"⪔\";\r\nvar gfr = \"𝔤\";\r\nvar gg = \"≫\";\r\nvar ggg = \"⋙\";\r\nvar gimel = \"ℷ\";\r\nvar gjcy = \"ѓ\";\r\nvar gl = \"≷\";\r\nvar glE = \"⪒\";\r\nvar gla = \"⪥\";\r\nvar glj = \"⪤\";\r\nvar gnE = \"≩\";\r\nvar gnap = \"⪊\";\r\nvar gnapprox = \"⪊\";\r\nvar gne = \"⪈\";\r\nvar gneq = \"⪈\";\r\nvar gneqq = \"≩\";\r\nvar gnsim = \"⋧\";\r\nvar gopf = \"𝕘\";\r\nvar grave = \"`\";\r\nvar gscr = \"ℊ\";\r\nvar gsim = \"≳\";\r\nvar gsime = \"⪎\";\r\nvar gsiml = \"⪐\";\r\nvar g = \">\";\r\nvar gt = \">\";\r\nvar gtcc = \"⪧\";\r\nvar gtcir = \"⩺\";\r\nvar gtdot = \"⋗\";\r\nvar gtlPar = \"⦕\";\r\nvar gtquest = \"⩼\";\r\nvar gtrapprox = \"⪆\";\r\nvar gtrarr = \"⥸\";\r\nvar gtrdot = \"⋗\";\r\nvar gtreqless = \"⋛\";\r\nvar gtreqqless = \"⪌\";\r\nvar gtrless = \"≷\";\r\nvar gtrsim = \"≳\";\r\nvar gvertneqq = \"≩︀\";\r\nvar gvnE = \"≩︀\";\r\nvar hArr = \"⇔\";\r\nvar hairsp = \" \";\r\nvar half = \"½\";\r\nvar hamilt = \"ℋ\";\r\nvar hardcy = \"ъ\";\r\nvar harr = \"↔\";\r\nvar harrcir = \"⥈\";\r\nvar harrw = \"↭\";\r\nvar hbar = \"ℏ\";\r\nvar hcirc = \"ĥ\";\r\nvar hearts = \"♥\";\r\nvar heartsuit = \"♥\";\r\nvar hellip = \"…\";\r\nvar hercon = \"⊹\";\r\nvar hfr = \"𝔥\";\r\nvar hksearow = \"⤥\";\r\nvar hkswarow = \"⤦\";\r\nvar hoarr = \"⇿\";\r\nvar homtht = \"∻\";\r\nvar hookleftarrow = \"↩\";\r\nvar hookrightarrow = \"↪\";\r\nvar hopf = \"𝕙\";\r\nvar horbar = \"―\";\r\nvar hscr = \"𝒽\";\r\nvar hslash = \"ℏ\";\r\nvar hstrok = \"ħ\";\r\nvar hybull = \"⁃\";\r\nvar hyphen = \"‐\";\r\nvar iacut = \"í\";\r\nvar iacute = \"í\";\r\nvar ic = \"⁣\";\r\nvar icir = \"î\";\r\nvar icirc = \"î\";\r\nvar icy = \"и\";\r\nvar iecy = \"е\";\r\nvar iexc = \"¡\";\r\nvar iexcl = \"¡\";\r\nvar iff = \"⇔\";\r\nvar ifr = \"𝔦\";\r\nvar igrav = \"ì\";\r\nvar igrave = \"ì\";\r\nvar ii = \"ⅈ\";\r\nvar iiiint = \"⨌\";\r\nvar iiint = \"∭\";\r\nvar iinfin = \"⧜\";\r\nvar iiota = \"℩\";\r\nvar ijlig = \"ĳ\";\r\nvar imacr = \"ī\";\r\nvar image = \"ℑ\";\r\nvar imagline = \"ℐ\";\r\nvar imagpart = \"ℑ\";\r\nvar imath = \"ı\";\r\nvar imof = \"⊷\";\r\nvar imped = \"Ƶ\";\r\nvar incare = \"℅\";\r\nvar infin = \"∞\";\r\nvar infintie = \"⧝\";\r\nvar inodot = \"ı\";\r\nvar int = \"∫\";\r\nvar intcal = \"⊺\";\r\nvar integers = \"ℤ\";\r\nvar intercal = \"⊺\";\r\nvar intlarhk = \"⨗\";\r\nvar intprod = \"⨼\";\r\nvar iocy = \"ё\";\r\nvar iogon = \"į\";\r\nvar iopf = \"𝕚\";\r\nvar iota = \"ι\";\r\nvar iprod = \"⨼\";\r\nvar iques = \"¿\";\r\nvar iquest = \"¿\";\r\nvar iscr = \"𝒾\";\r\nvar isin = \"∈\";\r\nvar isinE = \"⋹\";\r\nvar isindot = \"⋵\";\r\nvar isins = \"⋴\";\r\nvar isinsv = \"⋳\";\r\nvar isinv = \"∈\";\r\nvar it = \"⁢\";\r\nvar itilde = \"ĩ\";\r\nvar iukcy = \"і\";\r\nvar ium = \"ï\";\r\nvar iuml = \"ï\";\r\nvar jcirc = \"ĵ\";\r\nvar jcy = \"й\";\r\nvar jfr = \"𝔧\";\r\nvar jmath = \"ȷ\";\r\nvar jopf = \"𝕛\";\r\nvar jscr = \"𝒿\";\r\nvar jsercy = \"ј\";\r\nvar jukcy = \"є\";\r\nvar kappa = \"κ\";\r\nvar kappav = \"ϰ\";\r\nvar kcedil = \"ķ\";\r\nvar kcy = \"к\";\r\nvar kfr = \"𝔨\";\r\nvar kgreen = \"ĸ\";\r\nvar khcy = \"х\";\r\nvar kjcy = \"ќ\";\r\nvar kopf = \"𝕜\";\r\nvar kscr = \"𝓀\";\r\nvar lAarr = \"⇚\";\r\nvar lArr = \"⇐\";\r\nvar lAtail = \"⤛\";\r\nvar lBarr = \"⤎\";\r\nvar lE = \"≦\";\r\nvar lEg = \"⪋\";\r\nvar lHar = \"⥢\";\r\nvar lacute = \"ĺ\";\r\nvar laemptyv = \"⦴\";\r\nvar lagran = \"ℒ\";\r\nvar lambda = \"λ\";\r\nvar lang = \"⟨\";\r\nvar langd = \"⦑\";\r\nvar langle = \"⟨\";\r\nvar lap = \"⪅\";\r\nvar laqu = \"«\";\r\nvar laquo = \"«\";\r\nvar larr = \"←\";\r\nvar larrb = \"⇤\";\r\nvar larrbfs = \"⤟\";\r\nvar larrfs = \"⤝\";\r\nvar larrhk = \"↩\";\r\nvar larrlp = \"↫\";\r\nvar larrpl = \"⤹\";\r\nvar larrsim = \"⥳\";\r\nvar larrtl = \"↢\";\r\nvar lat = \"⪫\";\r\nvar latail = \"⤙\";\r\nvar late = \"⪭\";\r\nvar lates = \"⪭︀\";\r\nvar lbarr = \"⤌\";\r\nvar lbbrk = \"❲\";\r\nvar lbrace = \"{\";\r\nvar lbrack = \"[\";\r\nvar lbrke = \"⦋\";\r\nvar lbrksld = \"⦏\";\r\nvar lbrkslu = \"⦍\";\r\nvar lcaron = \"ľ\";\r\nvar lcedil = \"ļ\";\r\nvar lceil = \"⌈\";\r\nvar lcub = \"{\";\r\nvar lcy = \"л\";\r\nvar ldca = \"⤶\";\r\nvar ldquo = \"“\";\r\nvar ldquor = \"„\";\r\nvar ldrdhar = \"⥧\";\r\nvar ldrushar = \"⥋\";\r\nvar ldsh = \"↲\";\r\nvar le = \"≤\";\r\nvar leftarrow = \"←\";\r\nvar leftarrowtail = \"↢\";\r\nvar leftharpoondown = \"↽\";\r\nvar leftharpoonup = \"↼\";\r\nvar leftleftarrows = \"⇇\";\r\nvar leftrightarrow = \"↔\";\r\nvar leftrightarrows = \"⇆\";\r\nvar leftrightharpoons = \"⇋\";\r\nvar leftrightsquigarrow = \"↭\";\r\nvar leftthreetimes = \"⋋\";\r\nvar leg = \"⋚\";\r\nvar leq = \"≤\";\r\nvar leqq = \"≦\";\r\nvar leqslant = \"⩽\";\r\nvar les = \"⩽\";\r\nvar lescc = \"⪨\";\r\nvar lesdot = \"⩿\";\r\nvar lesdoto = \"⪁\";\r\nvar lesdotor = \"⪃\";\r\nvar lesg = \"⋚︀\";\r\nvar lesges = \"⪓\";\r\nvar lessapprox = \"⪅\";\r\nvar lessdot = \"⋖\";\r\nvar lesseqgtr = \"⋚\";\r\nvar lesseqqgtr = \"⪋\";\r\nvar lessgtr = \"≶\";\r\nvar lesssim = \"≲\";\r\nvar lfisht = \"⥼\";\r\nvar lfloor = \"⌊\";\r\nvar lfr = \"𝔩\";\r\nvar lg = \"≶\";\r\nvar lgE = \"⪑\";\r\nvar lhard = \"↽\";\r\nvar lharu = \"↼\";\r\nvar lharul = \"⥪\";\r\nvar lhblk = \"▄\";\r\nvar ljcy = \"љ\";\r\nvar ll = \"≪\";\r\nvar llarr = \"⇇\";\r\nvar llcorner = \"⌞\";\r\nvar llhard = \"⥫\";\r\nvar lltri = \"◺\";\r\nvar lmidot = \"ŀ\";\r\nvar lmoust = \"⎰\";\r\nvar lmoustache = \"⎰\";\r\nvar lnE = \"≨\";\r\nvar lnap = \"⪉\";\r\nvar lnapprox = \"⪉\";\r\nvar lne = \"⪇\";\r\nvar lneq = \"⪇\";\r\nvar lneqq = \"≨\";\r\nvar lnsim = \"⋦\";\r\nvar loang = \"⟬\";\r\nvar loarr = \"⇽\";\r\nvar lobrk = \"⟦\";\r\nvar longleftarrow = \"⟵\";\r\nvar longleftrightarrow = \"⟷\";\r\nvar longmapsto = \"⟼\";\r\nvar longrightarrow = \"⟶\";\r\nvar looparrowleft = \"↫\";\r\nvar looparrowright = \"↬\";\r\nvar lopar = \"⦅\";\r\nvar lopf = \"𝕝\";\r\nvar loplus = \"⨭\";\r\nvar lotimes = \"⨴\";\r\nvar lowast = \"∗\";\r\nvar lowbar = \"_\";\r\nvar loz = \"◊\";\r\nvar lozenge = \"◊\";\r\nvar lozf = \"⧫\";\r\nvar lpar = \"(\";\r\nvar lparlt = \"⦓\";\r\nvar lrarr = \"⇆\";\r\nvar lrcorner = \"⌟\";\r\nvar lrhar = \"⇋\";\r\nvar lrhard = \"⥭\";\r\nvar lrm = \"‎\";\r\nvar lrtri = \"⊿\";\r\nvar lsaquo = \"‹\";\r\nvar lscr = \"𝓁\";\r\nvar lsh = \"↰\";\r\nvar lsim = \"≲\";\r\nvar lsime = \"⪍\";\r\nvar lsimg = \"⪏\";\r\nvar lsqb = \"[\";\r\nvar lsquo = \"‘\";\r\nvar lsquor = \"‚\";\r\nvar lstrok = \"ł\";\r\nvar l = \"<\";\r\nvar lt = \"<\";\r\nvar ltcc = \"⪦\";\r\nvar ltcir = \"⩹\";\r\nvar ltdot = \"⋖\";\r\nvar lthree = \"⋋\";\r\nvar ltimes = \"⋉\";\r\nvar ltlarr = \"⥶\";\r\nvar ltquest = \"⩻\";\r\nvar ltrPar = \"⦖\";\r\nvar ltri = \"◃\";\r\nvar ltrie = \"⊴\";\r\nvar ltrif = \"◂\";\r\nvar lurdshar = \"⥊\";\r\nvar luruhar = \"⥦\";\r\nvar lvertneqq = \"≨︀\";\r\nvar lvnE = \"≨︀\";\r\nvar mDDot = \"∺\";\r\nvar mac = \"¯\";\r\nvar macr = \"¯\";\r\nvar male = \"♂\";\r\nvar malt = \"✠\";\r\nvar maltese = \"✠\";\r\nvar map = \"↦\";\r\nvar mapsto = \"↦\";\r\nvar mapstodown = \"↧\";\r\nvar mapstoleft = \"↤\";\r\nvar mapstoup = \"↥\";\r\nvar marker = \"▮\";\r\nvar mcomma = \"⨩\";\r\nvar mcy = \"м\";\r\nvar mdash = \"—\";\r\nvar measuredangle = \"∡\";\r\nvar mfr = \"𝔪\";\r\nvar mho = \"℧\";\r\nvar micr = \"µ\";\r\nvar micro = \"µ\";\r\nvar mid = \"∣\";\r\nvar midast = \"*\";\r\nvar midcir = \"⫰\";\r\nvar middo = \"·\";\r\nvar middot = \"·\";\r\nvar minus = \"−\";\r\nvar minusb = \"⊟\";\r\nvar minusd = \"∸\";\r\nvar minusdu = \"⨪\";\r\nvar mlcp = \"⫛\";\r\nvar mldr = \"…\";\r\nvar mnplus = \"∓\";\r\nvar models = \"⊧\";\r\nvar mopf = \"𝕞\";\r\nvar mp = \"∓\";\r\nvar mscr = \"𝓂\";\r\nvar mstpos = \"∾\";\r\nvar mu = \"μ\";\r\nvar multimap = \"⊸\";\r\nvar mumap = \"⊸\";\r\nvar nGg = \"⋙̸\";\r\nvar nGt = \"≫⃒\";\r\nvar nGtv = \"≫̸\";\r\nvar nLeftarrow = \"⇍\";\r\nvar nLeftrightarrow = \"⇎\";\r\nvar nLl = \"⋘̸\";\r\nvar nLt = \"≪⃒\";\r\nvar nLtv = \"≪̸\";\r\nvar nRightarrow = \"⇏\";\r\nvar nVDash = \"⊯\";\r\nvar nVdash = \"⊮\";\r\nvar nabla = \"∇\";\r\nvar nacute = \"ń\";\r\nvar nang = \"∠⃒\";\r\nvar nap = \"≉\";\r\nvar napE = \"⩰̸\";\r\nvar napid = \"≋̸\";\r\nvar napos = \"ŉ\";\r\nvar napprox = \"≉\";\r\nvar natur = \"♮\";\r\nvar natural = \"♮\";\r\nvar naturals = \"ℕ\";\r\nvar nbs = \" \";\r\nvar nbsp = \" \";\r\nvar nbump = \"≎̸\";\r\nvar nbumpe = \"≏̸\";\r\nvar ncap = \"⩃\";\r\nvar ncaron = \"ň\";\r\nvar ncedil = \"ņ\";\r\nvar ncong = \"≇\";\r\nvar ncongdot = \"⩭̸\";\r\nvar ncup = \"⩂\";\r\nvar ncy = \"н\";\r\nvar ndash = \"–\";\r\nvar ne = \"≠\";\r\nvar neArr = \"⇗\";\r\nvar nearhk = \"⤤\";\r\nvar nearr = \"↗\";\r\nvar nearrow = \"↗\";\r\nvar nedot = \"≐̸\";\r\nvar nequiv = \"≢\";\r\nvar nesear = \"⤨\";\r\nvar nesim = \"≂̸\";\r\nvar nexist = \"∄\";\r\nvar nexists = \"∄\";\r\nvar nfr = \"𝔫\";\r\nvar ngE = \"≧̸\";\r\nvar nge = \"≱\";\r\nvar ngeq = \"≱\";\r\nvar ngeqq = \"≧̸\";\r\nvar ngeqslant = \"⩾̸\";\r\nvar nges = \"⩾̸\";\r\nvar ngsim = \"≵\";\r\nvar ngt = \"≯\";\r\nvar ngtr = \"≯\";\r\nvar nhArr = \"⇎\";\r\nvar nharr = \"↮\";\r\nvar nhpar = \"⫲\";\r\nvar ni = \"∋\";\r\nvar nis = \"⋼\";\r\nvar nisd = \"⋺\";\r\nvar niv = \"∋\";\r\nvar njcy = \"њ\";\r\nvar nlArr = \"⇍\";\r\nvar nlE = \"≦̸\";\r\nvar nlarr = \"↚\";\r\nvar nldr = \"‥\";\r\nvar nle = \"≰\";\r\nvar nleftarrow = \"↚\";\r\nvar nleftrightarrow = \"↮\";\r\nvar nleq = \"≰\";\r\nvar nleqq = \"≦̸\";\r\nvar nleqslant = \"⩽̸\";\r\nvar nles = \"⩽̸\";\r\nvar nless = \"≮\";\r\nvar nlsim = \"≴\";\r\nvar nlt = \"≮\";\r\nvar nltri = \"⋪\";\r\nvar nltrie = \"⋬\";\r\nvar nmid = \"∤\";\r\nvar nopf = \"𝕟\";\r\nvar no = \"¬\";\r\nvar not = \"¬\";\r\nvar notin = \"∉\";\r\nvar notinE = \"⋹̸\";\r\nvar notindot = \"⋵̸\";\r\nvar notinva = \"∉\";\r\nvar notinvb = \"⋷\";\r\nvar notinvc = \"⋶\";\r\nvar notni = \"∌\";\r\nvar notniva = \"∌\";\r\nvar notnivb = \"⋾\";\r\nvar notnivc = \"⋽\";\r\nvar npar = \"∦\";\r\nvar nparallel = \"∦\";\r\nvar nparsl = \"⫽⃥\";\r\nvar npart = \"∂̸\";\r\nvar npolint = \"⨔\";\r\nvar npr = \"⊀\";\r\nvar nprcue = \"⋠\";\r\nvar npre = \"⪯̸\";\r\nvar nprec = \"⊀\";\r\nvar npreceq = \"⪯̸\";\r\nvar nrArr = \"⇏\";\r\nvar nrarr = \"↛\";\r\nvar nrarrc = \"⤳̸\";\r\nvar nrarrw = \"↝̸\";\r\nvar nrightarrow = \"↛\";\r\nvar nrtri = \"⋫\";\r\nvar nrtrie = \"⋭\";\r\nvar nsc = \"⊁\";\r\nvar nsccue = \"⋡\";\r\nvar nsce = \"⪰̸\";\r\nvar nscr = \"𝓃\";\r\nvar nshortmid = \"∤\";\r\nvar nshortparallel = \"∦\";\r\nvar nsim = \"≁\";\r\nvar nsime = \"≄\";\r\nvar nsimeq = \"≄\";\r\nvar nsmid = \"∤\";\r\nvar nspar = \"∦\";\r\nvar nsqsube = \"⋢\";\r\nvar nsqsupe = \"⋣\";\r\nvar nsub = \"⊄\";\r\nvar nsubE = \"⫅̸\";\r\nvar nsube = \"⊈\";\r\nvar nsubset = \"⊂⃒\";\r\nvar nsubseteq = \"⊈\";\r\nvar nsubseteqq = \"⫅̸\";\r\nvar nsucc = \"⊁\";\r\nvar nsucceq = \"⪰̸\";\r\nvar nsup = \"⊅\";\r\nvar nsupE = \"⫆̸\";\r\nvar nsupe = \"⊉\";\r\nvar nsupset = \"⊃⃒\";\r\nvar nsupseteq = \"⊉\";\r\nvar nsupseteqq = \"⫆̸\";\r\nvar ntgl = \"≹\";\r\nvar ntild = \"ñ\";\r\nvar ntilde = \"ñ\";\r\nvar ntlg = \"≸\";\r\nvar ntriangleleft = \"⋪\";\r\nvar ntrianglelefteq = \"⋬\";\r\nvar ntriangleright = \"⋫\";\r\nvar ntrianglerighteq = \"⋭\";\r\nvar nu = \"ν\";\r\nvar num = \"#\";\r\nvar numero = \"№\";\r\nvar numsp = \" \";\r\nvar nvDash = \"⊭\";\r\nvar nvHarr = \"⤄\";\r\nvar nvap = \"≍⃒\";\r\nvar nvdash = \"⊬\";\r\nvar nvge = \"≥⃒\";\r\nvar nvgt = \">⃒\";\r\nvar nvinfin = \"⧞\";\r\nvar nvlArr = \"⤂\";\r\nvar nvle = \"≤⃒\";\r\nvar nvlt = \"<⃒\";\r\nvar nvltrie = \"⊴⃒\";\r\nvar nvrArr = \"⤃\";\r\nvar nvrtrie = \"⊵⃒\";\r\nvar nvsim = \"∼⃒\";\r\nvar nwArr = \"⇖\";\r\nvar nwarhk = \"⤣\";\r\nvar nwarr = \"↖\";\r\nvar nwarrow = \"↖\";\r\nvar nwnear = \"⤧\";\r\nvar oS = \"Ⓢ\";\r\nvar oacut = \"ó\";\r\nvar oacute = \"ó\";\r\nvar oast = \"⊛\";\r\nvar ocir = \"ô\";\r\nvar ocirc = \"ô\";\r\nvar ocy = \"о\";\r\nvar odash = \"⊝\";\r\nvar odblac = \"ő\";\r\nvar odiv = \"⨸\";\r\nvar odot = \"⊙\";\r\nvar odsold = \"⦼\";\r\nvar oelig = \"œ\";\r\nvar ofcir = \"⦿\";\r\nvar ofr = \"𝔬\";\r\nvar ogon = \"˛\";\r\nvar ograv = \"ò\";\r\nvar ograve = \"ò\";\r\nvar ogt = \"⧁\";\r\nvar ohbar = \"⦵\";\r\nvar ohm = \"Ω\";\r\nvar oint = \"∮\";\r\nvar olarr = \"↺\";\r\nvar olcir = \"⦾\";\r\nvar olcross = \"⦻\";\r\nvar oline = \"‾\";\r\nvar olt = \"⧀\";\r\nvar omacr = \"ō\";\r\nvar omega = \"ω\";\r\nvar omicron = \"ο\";\r\nvar omid = \"⦶\";\r\nvar ominus = \"⊖\";\r\nvar oopf = \"𝕠\";\r\nvar opar = \"⦷\";\r\nvar operp = \"⦹\";\r\nvar oplus = \"⊕\";\r\nvar or = \"∨\";\r\nvar orarr = \"↻\";\r\nvar ord = \"º\";\r\nvar order = \"ℴ\";\r\nvar orderof = \"ℴ\";\r\nvar ordf = \"ª\";\r\nvar ordm = \"º\";\r\nvar origof = \"⊶\";\r\nvar oror = \"⩖\";\r\nvar orslope = \"⩗\";\r\nvar orv = \"⩛\";\r\nvar oscr = \"ℴ\";\r\nvar oslas = \"ø\";\r\nvar oslash = \"ø\";\r\nvar osol = \"⊘\";\r\nvar otild = \"õ\";\r\nvar otilde = \"õ\";\r\nvar otimes = \"⊗\";\r\nvar otimesas = \"⨶\";\r\nvar oum = \"ö\";\r\nvar ouml = \"ö\";\r\nvar ovbar = \"⌽\";\r\nvar par = \"¶\";\r\nvar para = \"¶\";\r\nvar parallel = \"∥\";\r\nvar parsim = \"⫳\";\r\nvar parsl = \"⫽\";\r\nvar part = \"∂\";\r\nvar pcy = \"п\";\r\nvar percnt = \"%\";\r\nvar period = \".\";\r\nvar permil = \"‰\";\r\nvar perp = \"⊥\";\r\nvar pertenk = \"‱\";\r\nvar pfr = \"𝔭\";\r\nvar phi = \"φ\";\r\nvar phiv = \"ϕ\";\r\nvar phmmat = \"ℳ\";\r\nvar phone = \"☎\";\r\nvar pi = \"π\";\r\nvar pitchfork = \"⋔\";\r\nvar piv = \"ϖ\";\r\nvar planck = \"ℏ\";\r\nvar planckh = \"ℎ\";\r\nvar plankv = \"ℏ\";\r\nvar plus = \"+\";\r\nvar plusacir = \"⨣\";\r\nvar plusb = \"⊞\";\r\nvar pluscir = \"⨢\";\r\nvar plusdo = \"∔\";\r\nvar plusdu = \"⨥\";\r\nvar pluse = \"⩲\";\r\nvar plusm = \"±\";\r\nvar plusmn = \"±\";\r\nvar plussim = \"⨦\";\r\nvar plustwo = \"⨧\";\r\nvar pm = \"±\";\r\nvar pointint = \"⨕\";\r\nvar popf = \"𝕡\";\r\nvar poun = \"£\";\r\nvar pound = \"£\";\r\nvar pr = \"≺\";\r\nvar prE = \"⪳\";\r\nvar prap = \"⪷\";\r\nvar prcue = \"≼\";\r\nvar pre = \"⪯\";\r\nvar prec = \"≺\";\r\nvar precapprox = \"⪷\";\r\nvar preccurlyeq = \"≼\";\r\nvar preceq = \"⪯\";\r\nvar precnapprox = \"⪹\";\r\nvar precneqq = \"⪵\";\r\nvar precnsim = \"⋨\";\r\nvar precsim = \"≾\";\r\nvar prime = \"′\";\r\nvar primes = \"ℙ\";\r\nvar prnE = \"⪵\";\r\nvar prnap = \"⪹\";\r\nvar prnsim = \"⋨\";\r\nvar prod = \"∏\";\r\nvar profalar = \"⌮\";\r\nvar profline = \"⌒\";\r\nvar profsurf = \"⌓\";\r\nvar prop = \"∝\";\r\nvar propto = \"∝\";\r\nvar prsim = \"≾\";\r\nvar prurel = \"⊰\";\r\nvar pscr = \"𝓅\";\r\nvar psi = \"ψ\";\r\nvar puncsp = \" \";\r\nvar qfr = \"𝔮\";\r\nvar qint = \"⨌\";\r\nvar qopf = \"𝕢\";\r\nvar qprime = \"⁗\";\r\nvar qscr = \"𝓆\";\r\nvar quaternions = \"ℍ\";\r\nvar quatint = \"⨖\";\r\nvar quest = \"?\";\r\nvar questeq = \"≟\";\r\nvar quo = \"\\\"\";\r\nvar quot = \"\\\"\";\r\nvar rAarr = \"⇛\";\r\nvar rArr = \"⇒\";\r\nvar rAtail = \"⤜\";\r\nvar rBarr = \"⤏\";\r\nvar rHar = \"⥤\";\r\nvar race = \"∽̱\";\r\nvar racute = \"ŕ\";\r\nvar radic = \"√\";\r\nvar raemptyv = \"⦳\";\r\nvar rang = \"⟩\";\r\nvar rangd = \"⦒\";\r\nvar range = \"⦥\";\r\nvar rangle = \"⟩\";\r\nvar raqu = \"»\";\r\nvar raquo = \"»\";\r\nvar rarr = \"→\";\r\nvar rarrap = \"⥵\";\r\nvar rarrb = \"⇥\";\r\nvar rarrbfs = \"⤠\";\r\nvar rarrc = \"⤳\";\r\nvar rarrfs = \"⤞\";\r\nvar rarrhk = \"↪\";\r\nvar rarrlp = \"↬\";\r\nvar rarrpl = \"⥅\";\r\nvar rarrsim = \"⥴\";\r\nvar rarrtl = \"↣\";\r\nvar rarrw = \"↝\";\r\nvar ratail = \"⤚\";\r\nvar ratio = \"∶\";\r\nvar rationals = \"ℚ\";\r\nvar rbarr = \"⤍\";\r\nvar rbbrk = \"❳\";\r\nvar rbrace = \"}\";\r\nvar rbrack = \"]\";\r\nvar rbrke = \"⦌\";\r\nvar rbrksld = \"⦎\";\r\nvar rbrkslu = \"⦐\";\r\nvar rcaron = \"ř\";\r\nvar rcedil = \"ŗ\";\r\nvar rceil = \"⌉\";\r\nvar rcub = \"}\";\r\nvar rcy = \"р\";\r\nvar rdca = \"⤷\";\r\nvar rdldhar = \"⥩\";\r\nvar rdquo = \"”\";\r\nvar rdquor = \"”\";\r\nvar rdsh = \"↳\";\r\nvar real = \"ℜ\";\r\nvar realine = \"ℛ\";\r\nvar realpart = \"ℜ\";\r\nvar reals = \"ℝ\";\r\nvar rect = \"▭\";\r\nvar re = \"®\";\r\nvar reg = \"®\";\r\nvar rfisht = \"⥽\";\r\nvar rfloor = \"⌋\";\r\nvar rfr = \"𝔯\";\r\nvar rhard = \"⇁\";\r\nvar rharu = \"⇀\";\r\nvar rharul = \"⥬\";\r\nvar rho = \"ρ\";\r\nvar rhov = \"ϱ\";\r\nvar rightarrow = \"→\";\r\nvar rightarrowtail = \"↣\";\r\nvar rightharpoondown = \"⇁\";\r\nvar rightharpoonup = \"⇀\";\r\nvar rightleftarrows = \"⇄\";\r\nvar rightleftharpoons = \"⇌\";\r\nvar rightrightarrows = \"⇉\";\r\nvar rightsquigarrow = \"↝\";\r\nvar rightthreetimes = \"⋌\";\r\nvar ring = \"˚\";\r\nvar risingdotseq = \"≓\";\r\nvar rlarr = \"⇄\";\r\nvar rlhar = \"⇌\";\r\nvar rlm = \"‏\";\r\nvar rmoust = \"⎱\";\r\nvar rmoustache = \"⎱\";\r\nvar rnmid = \"⫮\";\r\nvar roang = \"⟭\";\r\nvar roarr = \"⇾\";\r\nvar robrk = \"⟧\";\r\nvar ropar = \"⦆\";\r\nvar ropf = \"𝕣\";\r\nvar roplus = \"⨮\";\r\nvar rotimes = \"⨵\";\r\nvar rpar = \")\";\r\nvar rpargt = \"⦔\";\r\nvar rppolint = \"⨒\";\r\nvar rrarr = \"⇉\";\r\nvar rsaquo = \"›\";\r\nvar rscr = \"𝓇\";\r\nvar rsh = \"↱\";\r\nvar rsqb = \"]\";\r\nvar rsquo = \"’\";\r\nvar rsquor = \"’\";\r\nvar rthree = \"⋌\";\r\nvar rtimes = \"⋊\";\r\nvar rtri = \"▹\";\r\nvar rtrie = \"⊵\";\r\nvar rtrif = \"▸\";\r\nvar rtriltri = \"⧎\";\r\nvar ruluhar = \"⥨\";\r\nvar rx = \"℞\";\r\nvar sacute = \"ś\";\r\nvar sbquo = \"‚\";\r\nvar sc = \"≻\";\r\nvar scE = \"⪴\";\r\nvar scap = \"⪸\";\r\nvar scaron = \"š\";\r\nvar sccue = \"≽\";\r\nvar sce = \"⪰\";\r\nvar scedil = \"ş\";\r\nvar scirc = \"ŝ\";\r\nvar scnE = \"⪶\";\r\nvar scnap = \"⪺\";\r\nvar scnsim = \"⋩\";\r\nvar scpolint = \"⨓\";\r\nvar scsim = \"≿\";\r\nvar scy = \"с\";\r\nvar sdot = \"⋅\";\r\nvar sdotb = \"⊡\";\r\nvar sdote = \"⩦\";\r\nvar seArr = \"⇘\";\r\nvar searhk = \"⤥\";\r\nvar searr = \"↘\";\r\nvar searrow = \"↘\";\r\nvar sec = \"§\";\r\nvar sect = \"§\";\r\nvar semi = \";\";\r\nvar seswar = \"⤩\";\r\nvar setminus = \"∖\";\r\nvar setmn = \"∖\";\r\nvar sext = \"✶\";\r\nvar sfr = \"𝔰\";\r\nvar sfrown = \"⌢\";\r\nvar sharp = \"♯\";\r\nvar shchcy = \"щ\";\r\nvar shcy = \"ш\";\r\nvar shortmid = \"∣\";\r\nvar shortparallel = \"∥\";\r\nvar sh = \"­\";\r\nvar shy = \"­\";\r\nvar sigma = \"σ\";\r\nvar sigmaf = \"ς\";\r\nvar sigmav = \"ς\";\r\nvar sim = \"∼\";\r\nvar simdot = \"⩪\";\r\nvar sime = \"≃\";\r\nvar simeq = \"≃\";\r\nvar simg = \"⪞\";\r\nvar simgE = \"⪠\";\r\nvar siml = \"⪝\";\r\nvar simlE = \"⪟\";\r\nvar simne = \"≆\";\r\nvar simplus = \"⨤\";\r\nvar simrarr = \"⥲\";\r\nvar slarr = \"←\";\r\nvar smallsetminus = \"∖\";\r\nvar smashp = \"⨳\";\r\nvar smeparsl = \"⧤\";\r\nvar smid = \"∣\";\r\nvar smile = \"⌣\";\r\nvar smt = \"⪪\";\r\nvar smte = \"⪬\";\r\nvar smtes = \"⪬︀\";\r\nvar softcy = \"ь\";\r\nvar sol = \"/\";\r\nvar solb = \"⧄\";\r\nvar solbar = \"⌿\";\r\nvar sopf = \"𝕤\";\r\nvar spades = \"♠\";\r\nvar spadesuit = \"♠\";\r\nvar spar = \"∥\";\r\nvar sqcap = \"⊓\";\r\nvar sqcaps = \"⊓︀\";\r\nvar sqcup = \"⊔\";\r\nvar sqcups = \"⊔︀\";\r\nvar sqsub = \"⊏\";\r\nvar sqsube = \"⊑\";\r\nvar sqsubset = \"⊏\";\r\nvar sqsubseteq = \"⊑\";\r\nvar sqsup = \"⊐\";\r\nvar sqsupe = \"⊒\";\r\nvar sqsupset = \"⊐\";\r\nvar sqsupseteq = \"⊒\";\r\nvar squ = \"□\";\r\nvar square = \"□\";\r\nvar squarf = \"▪\";\r\nvar squf = \"▪\";\r\nvar srarr = \"→\";\r\nvar sscr = \"𝓈\";\r\nvar ssetmn = \"∖\";\r\nvar ssmile = \"⌣\";\r\nvar sstarf = \"⋆\";\r\nvar star = \"☆\";\r\nvar starf = \"★\";\r\nvar straightepsilon = \"ϵ\";\r\nvar straightphi = \"ϕ\";\r\nvar strns = \"¯\";\r\nvar sub = \"⊂\";\r\nvar subE = \"⫅\";\r\nvar subdot = \"⪽\";\r\nvar sube = \"⊆\";\r\nvar subedot = \"⫃\";\r\nvar submult = \"⫁\";\r\nvar subnE = \"⫋\";\r\nvar subne = \"⊊\";\r\nvar subplus = \"⪿\";\r\nvar subrarr = \"⥹\";\r\nvar subset = \"⊂\";\r\nvar subseteq = \"⊆\";\r\nvar subseteqq = \"⫅\";\r\nvar subsetneq = \"⊊\";\r\nvar subsetneqq = \"⫋\";\r\nvar subsim = \"⫇\";\r\nvar subsub = \"⫕\";\r\nvar subsup = \"⫓\";\r\nvar succ = \"≻\";\r\nvar succapprox = \"⪸\";\r\nvar succcurlyeq = \"≽\";\r\nvar succeq = \"⪰\";\r\nvar succnapprox = \"⪺\";\r\nvar succneqq = \"⪶\";\r\nvar succnsim = \"⋩\";\r\nvar succsim = \"≿\";\r\nvar sum = \"∑\";\r\nvar sung = \"♪\";\r\nvar sup = \"⊃\";\r\nvar sup1 = \"¹\";\r\nvar sup2 = \"²\";\r\nvar sup3 = \"³\";\r\nvar supE = \"⫆\";\r\nvar supdot = \"⪾\";\r\nvar supdsub = \"⫘\";\r\nvar supe = \"⊇\";\r\nvar supedot = \"⫄\";\r\nvar suphsol = \"⟉\";\r\nvar suphsub = \"⫗\";\r\nvar suplarr = \"⥻\";\r\nvar supmult = \"⫂\";\r\nvar supnE = \"⫌\";\r\nvar supne = \"⊋\";\r\nvar supplus = \"⫀\";\r\nvar supset = \"⊃\";\r\nvar supseteq = \"⊇\";\r\nvar supseteqq = \"⫆\";\r\nvar supsetneq = \"⊋\";\r\nvar supsetneqq = \"⫌\";\r\nvar supsim = \"⫈\";\r\nvar supsub = \"⫔\";\r\nvar supsup = \"⫖\";\r\nvar swArr = \"⇙\";\r\nvar swarhk = \"⤦\";\r\nvar swarr = \"↙\";\r\nvar swarrow = \"↙\";\r\nvar swnwar = \"⤪\";\r\nvar szli = \"ß\";\r\nvar szlig = \"ß\";\r\nvar target = \"⌖\";\r\nvar tau = \"τ\";\r\nvar tbrk = \"⎴\";\r\nvar tcaron = \"ť\";\r\nvar tcedil = \"ţ\";\r\nvar tcy = \"т\";\r\nvar tdot = \"⃛\";\r\nvar telrec = \"⌕\";\r\nvar tfr = \"𝔱\";\r\nvar there4 = \"∴\";\r\nvar therefore = \"∴\";\r\nvar theta = \"θ\";\r\nvar thetasym = \"ϑ\";\r\nvar thetav = \"ϑ\";\r\nvar thickapprox = \"≈\";\r\nvar thicksim = \"∼\";\r\nvar thinsp = \" \";\r\nvar thkap = \"≈\";\r\nvar thksim = \"∼\";\r\nvar thor = \"þ\";\r\nvar thorn = \"þ\";\r\nvar tilde = \"˜\";\r\nvar time = \"×\";\r\nvar times = \"×\";\r\nvar timesb = \"⊠\";\r\nvar timesbar = \"⨱\";\r\nvar timesd = \"⨰\";\r\nvar tint = \"∭\";\r\nvar toea = \"⤨\";\r\nvar top = \"⊤\";\r\nvar topbot = \"⌶\";\r\nvar topcir = \"⫱\";\r\nvar topf = \"𝕥\";\r\nvar topfork = \"⫚\";\r\nvar tosa = \"⤩\";\r\nvar tprime = \"‴\";\r\nvar trade = \"™\";\r\nvar triangle = \"▵\";\r\nvar triangledown = \"▿\";\r\nvar triangleleft = \"◃\";\r\nvar trianglelefteq = \"⊴\";\r\nvar triangleq = \"≜\";\r\nvar triangleright = \"▹\";\r\nvar trianglerighteq = \"⊵\";\r\nvar tridot = \"◬\";\r\nvar trie = \"≜\";\r\nvar triminus = \"⨺\";\r\nvar triplus = \"⨹\";\r\nvar trisb = \"⧍\";\r\nvar tritime = \"⨻\";\r\nvar trpezium = \"⏢\";\r\nvar tscr = \"𝓉\";\r\nvar tscy = \"ц\";\r\nvar tshcy = \"ћ\";\r\nvar tstrok = \"ŧ\";\r\nvar twixt = \"≬\";\r\nvar twoheadleftarrow = \"↞\";\r\nvar twoheadrightarrow = \"↠\";\r\nvar uArr = \"⇑\";\r\nvar uHar = \"⥣\";\r\nvar uacut = \"ú\";\r\nvar uacute = \"ú\";\r\nvar uarr = \"↑\";\r\nvar ubrcy = \"ў\";\r\nvar ubreve = \"ŭ\";\r\nvar ucir = \"û\";\r\nvar ucirc = \"û\";\r\nvar ucy = \"у\";\r\nvar udarr = \"⇅\";\r\nvar udblac = \"ű\";\r\nvar udhar = \"⥮\";\r\nvar ufisht = \"⥾\";\r\nvar ufr = \"𝔲\";\r\nvar ugrav = \"ù\";\r\nvar ugrave = \"ù\";\r\nvar uharl = \"↿\";\r\nvar uharr = \"↾\";\r\nvar uhblk = \"▀\";\r\nvar ulcorn = \"⌜\";\r\nvar ulcorner = \"⌜\";\r\nvar ulcrop = \"⌏\";\r\nvar ultri = \"◸\";\r\nvar umacr = \"ū\";\r\nvar um = \"¨\";\r\nvar uml = \"¨\";\r\nvar uogon = \"ų\";\r\nvar uopf = \"𝕦\";\r\nvar uparrow = \"↑\";\r\nvar updownarrow = \"↕\";\r\nvar upharpoonleft = \"↿\";\r\nvar upharpoonright = \"↾\";\r\nvar uplus = \"⊎\";\r\nvar upsi = \"υ\";\r\nvar upsih = \"ϒ\";\r\nvar upsilon = \"υ\";\r\nvar upuparrows = \"⇈\";\r\nvar urcorn = \"⌝\";\r\nvar urcorner = \"⌝\";\r\nvar urcrop = \"⌎\";\r\nvar uring = \"ů\";\r\nvar urtri = \"◹\";\r\nvar uscr = \"𝓊\";\r\nvar utdot = \"⋰\";\r\nvar utilde = \"ũ\";\r\nvar utri = \"▵\";\r\nvar utrif = \"▴\";\r\nvar uuarr = \"⇈\";\r\nvar uum = \"ü\";\r\nvar uuml = \"ü\";\r\nvar uwangle = \"⦧\";\r\nvar vArr = \"⇕\";\r\nvar vBar = \"⫨\";\r\nvar vBarv = \"⫩\";\r\nvar vDash = \"⊨\";\r\nvar vangrt = \"⦜\";\r\nvar varepsilon = \"ϵ\";\r\nvar varkappa = \"ϰ\";\r\nvar varnothing = \"∅\";\r\nvar varphi = \"ϕ\";\r\nvar varpi = \"ϖ\";\r\nvar varpropto = \"∝\";\r\nvar varr = \"↕\";\r\nvar varrho = \"ϱ\";\r\nvar varsigma = \"ς\";\r\nvar varsubsetneq = \"⊊︀\";\r\nvar varsubsetneqq = \"⫋︀\";\r\nvar varsupsetneq = \"⊋︀\";\r\nvar varsupsetneqq = \"⫌︀\";\r\nvar vartheta = \"ϑ\";\r\nvar vartriangleleft = \"⊲\";\r\nvar vartriangleright = \"⊳\";\r\nvar vcy = \"в\";\r\nvar vdash = \"⊢\";\r\nvar vee = \"∨\";\r\nvar veebar = \"⊻\";\r\nvar veeeq = \"≚\";\r\nvar vellip = \"⋮\";\r\nvar verbar = \"|\";\r\nvar vert = \"|\";\r\nvar vfr = \"𝔳\";\r\nvar vltri = \"⊲\";\r\nvar vnsub = \"⊂⃒\";\r\nvar vnsup = \"⊃⃒\";\r\nvar vopf = \"𝕧\";\r\nvar vprop = \"∝\";\r\nvar vrtri = \"⊳\";\r\nvar vscr = \"𝓋\";\r\nvar vsubnE = \"⫋︀\";\r\nvar vsubne = \"⊊︀\";\r\nvar vsupnE = \"⫌︀\";\r\nvar vsupne = \"⊋︀\";\r\nvar vzigzag = \"⦚\";\r\nvar wcirc = \"ŵ\";\r\nvar wedbar = \"⩟\";\r\nvar wedge = \"∧\";\r\nvar wedgeq = \"≙\";\r\nvar weierp = \"℘\";\r\nvar wfr = \"𝔴\";\r\nvar wopf = \"𝕨\";\r\nvar wp = \"℘\";\r\nvar wr = \"≀\";\r\nvar wreath = \"≀\";\r\nvar wscr = \"𝓌\";\r\nvar xcap = \"⋂\";\r\nvar xcirc = \"◯\";\r\nvar xcup = \"⋃\";\r\nvar xdtri = \"▽\";\r\nvar xfr = \"𝔵\";\r\nvar xhArr = \"⟺\";\r\nvar xharr = \"⟷\";\r\nvar xi = \"ξ\";\r\nvar xlArr = \"⟸\";\r\nvar xlarr = \"⟵\";\r\nvar xmap = \"⟼\";\r\nvar xnis = \"⋻\";\r\nvar xodot = \"⨀\";\r\nvar xopf = \"𝕩\";\r\nvar xoplus = \"⨁\";\r\nvar xotime = \"⨂\";\r\nvar xrArr = \"⟹\";\r\nvar xrarr = \"⟶\";\r\nvar xscr = \"𝓍\";\r\nvar xsqcup = \"⨆\";\r\nvar xuplus = \"⨄\";\r\nvar xutri = \"△\";\r\nvar xvee = \"⋁\";\r\nvar xwedge = \"⋀\";\r\nvar yacut = \"ý\";\r\nvar yacute = \"ý\";\r\nvar yacy = \"я\";\r\nvar ycirc = \"ŷ\";\r\nvar ycy = \"ы\";\r\nvar ye = \"¥\";\r\nvar yen = \"¥\";\r\nvar yfr = \"𝔶\";\r\nvar yicy = \"ї\";\r\nvar yopf = \"𝕪\";\r\nvar yscr = \"𝓎\";\r\nvar yucy = \"ю\";\r\nvar yum = \"ÿ\";\r\nvar yuml = \"ÿ\";\r\nvar zacute = \"ź\";\r\nvar zcaron = \"ž\";\r\nvar zcy = \"з\";\r\nvar zdot = \"ż\";\r\nvar zeetrf = \"ℨ\";\r\nvar zeta = \"ζ\";\r\nvar zfr = \"𝔷\";\r\nvar zhcy = \"ж\";\r\nvar zigrarr = \"⇝\";\r\nvar zopf = \"𝕫\";\r\nvar zscr = \"𝓏\";\r\nvar zwj = \"‍\";\r\nvar zwnj = \"‌\";\r\nvar require$$0 = {\r\n  AEli: AEli,\r\n  AElig: AElig,\r\n  AM: AM,\r\n  AMP: AMP,\r\n  Aacut: Aacut,\r\n  Aacute: Aacute,\r\n  Abreve: Abreve,\r\n  Acir: Acir,\r\n  Acirc: Acirc,\r\n  Acy: Acy,\r\n  Afr: Afr,\r\n  Agrav: Agrav,\r\n  Agrave: Agrave,\r\n  Alpha: Alpha,\r\n  Amacr: Amacr,\r\n  And: And,\r\n  Aogon: Aogon,\r\n  Aopf: Aopf,\r\n  ApplyFunction: ApplyFunction,\r\n  Arin: Arin,\r\n  Aring: Aring,\r\n  Ascr: Ascr,\r\n  Assign: Assign,\r\n  Atild: Atild,\r\n  Atilde: Atilde,\r\n  Aum: Aum,\r\n  Auml: Auml,\r\n  Backslash: Backslash,\r\n  Barv: Barv,\r\n  Barwed: Barwed,\r\n  Bcy: Bcy,\r\n  Because: Because,\r\n  Bernoullis: Bernoullis,\r\n  Beta: Beta,\r\n  Bfr: Bfr,\r\n  Bopf: Bopf,\r\n  Breve: Breve,\r\n  Bscr: Bscr,\r\n  Bumpeq: Bumpeq,\r\n  CHcy: CHcy,\r\n  COP: COP,\r\n  COPY: COPY,\r\n  Cacute: Cacute,\r\n  Cap: Cap,\r\n  CapitalDifferentialD: CapitalDifferentialD,\r\n  Cayleys: Cayleys,\r\n  Ccaron: Ccaron,\r\n  Ccedi: Ccedi,\r\n  Ccedil: Ccedil,\r\n  Ccirc: Ccirc,\r\n  Cconint: Cconint,\r\n  Cdot: Cdot,\r\n  Cedilla: Cedilla,\r\n  CenterDot: CenterDot,\r\n  Cfr: Cfr,\r\n  Chi: Chi,\r\n  CircleDot: CircleDot,\r\n  CircleMinus: CircleMinus,\r\n  CirclePlus: CirclePlus,\r\n  CircleTimes: CircleTimes,\r\n  ClockwiseContourIntegral: ClockwiseContourIntegral,\r\n  CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,\r\n  CloseCurlyQuote: CloseCurlyQuote,\r\n  Colon: Colon,\r\n  Colone: Colone,\r\n  Congruent: Congruent,\r\n  Conint: Conint,\r\n  ContourIntegral: ContourIntegral,\r\n  Copf: Copf,\r\n  Coproduct: Coproduct,\r\n  CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,\r\n  Cross: Cross,\r\n  Cscr: Cscr,\r\n  Cup: Cup,\r\n  CupCap: CupCap,\r\n  DD: DD,\r\n  DDotrahd: DDotrahd,\r\n  DJcy: DJcy,\r\n  DScy: DScy,\r\n  DZcy: DZcy,\r\n  Dagger: Dagger,\r\n  Darr: Darr,\r\n  Dashv: Dashv,\r\n  Dcaron: Dcaron,\r\n  Dcy: Dcy,\r\n  Del: Del,\r\n  Delta: Delta,\r\n  Dfr: Dfr,\r\n  DiacriticalAcute: DiacriticalAcute,\r\n  DiacriticalDot: DiacriticalDot,\r\n  DiacriticalDoubleAcute: DiacriticalDoubleAcute,\r\n  DiacriticalGrave: DiacriticalGrave,\r\n  DiacriticalTilde: DiacriticalTilde,\r\n  Diamond: Diamond,\r\n  DifferentialD: DifferentialD,\r\n  Dopf: Dopf,\r\n  Dot: Dot,\r\n  DotDot: DotDot,\r\n  DotEqual: DotEqual,\r\n  DoubleContourIntegral: DoubleContourIntegral,\r\n  DoubleDot: DoubleDot,\r\n  DoubleDownArrow: DoubleDownArrow,\r\n  DoubleLeftArrow: DoubleLeftArrow,\r\n  DoubleLeftRightArrow: DoubleLeftRightArrow,\r\n  DoubleLeftTee: DoubleLeftTee,\r\n  DoubleLongLeftArrow: DoubleLongLeftArrow,\r\n  DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,\r\n  DoubleLongRightArrow: DoubleLongRightArrow,\r\n  DoubleRightArrow: DoubleRightArrow,\r\n  DoubleRightTee: DoubleRightTee,\r\n  DoubleUpArrow: DoubleUpArrow,\r\n  DoubleUpDownArrow: DoubleUpDownArrow,\r\n  DoubleVerticalBar: DoubleVerticalBar,\r\n  DownArrow: DownArrow,\r\n  DownArrowBar: DownArrowBar,\r\n  DownArrowUpArrow: DownArrowUpArrow,\r\n  DownBreve: DownBreve,\r\n  DownLeftRightVector: DownLeftRightVector,\r\n  DownLeftTeeVector: DownLeftTeeVector,\r\n  DownLeftVector: DownLeftVector,\r\n  DownLeftVectorBar: DownLeftVectorBar,\r\n  DownRightTeeVector: DownRightTeeVector,\r\n  DownRightVector: DownRightVector,\r\n  DownRightVectorBar: DownRightVectorBar,\r\n  DownTee: DownTee,\r\n  DownTeeArrow: DownTeeArrow,\r\n  Downarrow: Downarrow,\r\n  Dscr: Dscr,\r\n  Dstrok: Dstrok,\r\n  ENG: ENG,\r\n  ET: ET,\r\n  ETH: ETH,\r\n  Eacut: Eacut,\r\n  Eacute: Eacute,\r\n  Ecaron: Ecaron,\r\n  Ecir: Ecir,\r\n  Ecirc: Ecirc,\r\n  Ecy: Ecy,\r\n  Edot: Edot,\r\n  Efr: Efr,\r\n  Egrav: Egrav,\r\n  Egrave: Egrave,\r\n  Element: Element,\r\n  Emacr: Emacr,\r\n  EmptySmallSquare: EmptySmallSquare,\r\n  EmptyVerySmallSquare: EmptyVerySmallSquare,\r\n  Eogon: Eogon,\r\n  Eopf: Eopf,\r\n  Epsilon: Epsilon,\r\n  Equal: Equal,\r\n  EqualTilde: EqualTilde,\r\n  Equilibrium: Equilibrium,\r\n  Escr: Escr,\r\n  Esim: Esim,\r\n  Eta: Eta,\r\n  Eum: Eum,\r\n  Euml: Euml,\r\n  Exists: Exists,\r\n  ExponentialE: ExponentialE,\r\n  Fcy: Fcy,\r\n  Ffr: Ffr,\r\n  FilledSmallSquare: FilledSmallSquare,\r\n  FilledVerySmallSquare: FilledVerySmallSquare,\r\n  Fopf: Fopf,\r\n  ForAll: ForAll,\r\n  Fouriertrf: Fouriertrf,\r\n  Fscr: Fscr,\r\n  GJcy: GJcy,\r\n  G: G,\r\n  GT: GT,\r\n  Gamma: Gamma,\r\n  Gammad: Gammad,\r\n  Gbreve: Gbreve,\r\n  Gcedil: Gcedil,\r\n  Gcirc: Gcirc,\r\n  Gcy: Gcy,\r\n  Gdot: Gdot,\r\n  Gfr: Gfr,\r\n  Gg: Gg,\r\n  Gopf: Gopf,\r\n  GreaterEqual: GreaterEqual,\r\n  GreaterEqualLess: GreaterEqualLess,\r\n  GreaterFullEqual: GreaterFullEqual,\r\n  GreaterGreater: GreaterGreater,\r\n  GreaterLess: GreaterLess,\r\n  GreaterSlantEqual: GreaterSlantEqual,\r\n  GreaterTilde: GreaterTilde,\r\n  Gscr: Gscr,\r\n  Gt: Gt,\r\n  HARDcy: HARDcy,\r\n  Hacek: Hacek,\r\n  Hat: Hat,\r\n  Hcirc: Hcirc,\r\n  Hfr: Hfr,\r\n  HilbertSpace: HilbertSpace,\r\n  Hopf: Hopf,\r\n  HorizontalLine: HorizontalLine,\r\n  Hscr: Hscr,\r\n  Hstrok: Hstrok,\r\n  HumpDownHump: HumpDownHump,\r\n  HumpEqual: HumpEqual,\r\n  IEcy: IEcy,\r\n  IJlig: IJlig,\r\n  IOcy: IOcy,\r\n  Iacut: Iacut,\r\n  Iacute: Iacute,\r\n  Icir: Icir,\r\n  Icirc: Icirc,\r\n  Icy: Icy,\r\n  Idot: Idot,\r\n  Ifr: Ifr,\r\n  Igrav: Igrav,\r\n  Igrave: Igrave,\r\n  Im: Im,\r\n  Imacr: Imacr,\r\n  ImaginaryI: ImaginaryI,\r\n  Implies: Implies,\r\n  Int: Int,\r\n  Integral: Integral,\r\n  Intersection: Intersection,\r\n  InvisibleComma: InvisibleComma,\r\n  InvisibleTimes: InvisibleTimes,\r\n  Iogon: Iogon,\r\n  Iopf: Iopf,\r\n  Iota: Iota,\r\n  Iscr: Iscr,\r\n  Itilde: Itilde,\r\n  Iukcy: Iukcy,\r\n  Ium: Ium,\r\n  Iuml: Iuml,\r\n  Jcirc: Jcirc,\r\n  Jcy: Jcy,\r\n  Jfr: Jfr,\r\n  Jopf: Jopf,\r\n  Jscr: Jscr,\r\n  Jsercy: Jsercy,\r\n  Jukcy: Jukcy,\r\n  KHcy: KHcy,\r\n  KJcy: KJcy,\r\n  Kappa: Kappa,\r\n  Kcedil: Kcedil,\r\n  Kcy: Kcy,\r\n  Kfr: Kfr,\r\n  Kopf: Kopf,\r\n  Kscr: Kscr,\r\n  LJcy: LJcy,\r\n  L: L,\r\n  LT: LT,\r\n  Lacute: Lacute,\r\n  Lambda: Lambda,\r\n  Lang: Lang,\r\n  Laplacetrf: Laplacetrf,\r\n  Larr: Larr,\r\n  Lcaron: Lcaron,\r\n  Lcedil: Lcedil,\r\n  Lcy: Lcy,\r\n  LeftAngleBracket: LeftAngleBracket,\r\n  LeftArrow: LeftArrow,\r\n  LeftArrowBar: LeftArrowBar,\r\n  LeftArrowRightArrow: LeftArrowRightArrow,\r\n  LeftCeiling: LeftCeiling,\r\n  LeftDoubleBracket: LeftDoubleBracket,\r\n  LeftDownTeeVector: LeftDownTeeVector,\r\n  LeftDownVector: LeftDownVector,\r\n  LeftDownVectorBar: LeftDownVectorBar,\r\n  LeftFloor: LeftFloor,\r\n  LeftRightArrow: LeftRightArrow,\r\n  LeftRightVector: LeftRightVector,\r\n  LeftTee: LeftTee,\r\n  LeftTeeArrow: LeftTeeArrow,\r\n  LeftTeeVector: LeftTeeVector,\r\n  LeftTriangle: LeftTriangle,\r\n  LeftTriangleBar: LeftTriangleBar,\r\n  LeftTriangleEqual: LeftTriangleEqual,\r\n  LeftUpDownVector: LeftUpDownVector,\r\n  LeftUpTeeVector: LeftUpTeeVector,\r\n  LeftUpVector: LeftUpVector,\r\n  LeftUpVectorBar: LeftUpVectorBar,\r\n  LeftVector: LeftVector,\r\n  LeftVectorBar: LeftVectorBar,\r\n  Leftarrow: Leftarrow,\r\n  Leftrightarrow: Leftrightarrow,\r\n  LessEqualGreater: LessEqualGreater,\r\n  LessFullEqual: LessFullEqual,\r\n  LessGreater: LessGreater,\r\n  LessLess: LessLess,\r\n  LessSlantEqual: LessSlantEqual,\r\n  LessTilde: LessTilde,\r\n  Lfr: Lfr,\r\n  Ll: Ll,\r\n  Lleftarrow: Lleftarrow,\r\n  Lmidot: Lmidot,\r\n  LongLeftArrow: LongLeftArrow,\r\n  LongLeftRightArrow: LongLeftRightArrow,\r\n  LongRightArrow: LongRightArrow,\r\n  Longleftarrow: Longleftarrow,\r\n  Longleftrightarrow: Longleftrightarrow,\r\n  Longrightarrow: Longrightarrow,\r\n  Lopf: Lopf,\r\n  LowerLeftArrow: LowerLeftArrow,\r\n  LowerRightArrow: LowerRightArrow,\r\n  Lscr: Lscr,\r\n  Lsh: Lsh,\r\n  Lstrok: Lstrok,\r\n  Lt: Lt,\r\n  \"Map\": \"⤅\",\r\n  Mcy: Mcy,\r\n  MediumSpace: MediumSpace,\r\n  Mellintrf: Mellintrf,\r\n  Mfr: Mfr,\r\n  MinusPlus: MinusPlus,\r\n  Mopf: Mopf,\r\n  Mscr: Mscr,\r\n  Mu: Mu,\r\n  NJcy: NJcy,\r\n  Nacute: Nacute,\r\n  Ncaron: Ncaron,\r\n  Ncedil: Ncedil,\r\n  Ncy: Ncy,\r\n  NegativeMediumSpace: NegativeMediumSpace,\r\n  NegativeThickSpace: NegativeThickSpace,\r\n  NegativeThinSpace: NegativeThinSpace,\r\n  NegativeVeryThinSpace: NegativeVeryThinSpace,\r\n  NestedGreaterGreater: NestedGreaterGreater,\r\n  NestedLessLess: NestedLessLess,\r\n  NewLine: NewLine,\r\n  Nfr: Nfr,\r\n  NoBreak: NoBreak,\r\n  NonBreakingSpace: NonBreakingSpace,\r\n  Nopf: Nopf,\r\n  Not: Not,\r\n  NotCongruent: NotCongruent,\r\n  NotCupCap: NotCupCap,\r\n  NotDoubleVerticalBar: NotDoubleVerticalBar,\r\n  NotElement: NotElement,\r\n  NotEqual: NotEqual,\r\n  NotEqualTilde: NotEqualTilde,\r\n  NotExists: NotExists,\r\n  NotGreater: NotGreater,\r\n  NotGreaterEqual: NotGreaterEqual,\r\n  NotGreaterFullEqual: NotGreaterFullEqual,\r\n  NotGreaterGreater: NotGreaterGreater,\r\n  NotGreaterLess: NotGreaterLess,\r\n  NotGreaterSlantEqual: NotGreaterSlantEqual,\r\n  NotGreaterTilde: NotGreaterTilde,\r\n  NotHumpDownHump: NotHumpDownHump,\r\n  NotHumpEqual: NotHumpEqual,\r\n  NotLeftTriangle: NotLeftTriangle,\r\n  NotLeftTriangleBar: NotLeftTriangleBar,\r\n  NotLeftTriangleEqual: NotLeftTriangleEqual,\r\n  NotLess: NotLess,\r\n  NotLessEqual: NotLessEqual,\r\n  NotLessGreater: NotLessGreater,\r\n  NotLessLess: NotLessLess,\r\n  NotLessSlantEqual: NotLessSlantEqual,\r\n  NotLessTilde: NotLessTilde,\r\n  NotNestedGreaterGreater: NotNestedGreaterGreater,\r\n  NotNestedLessLess: NotNestedLessLess,\r\n  NotPrecedes: NotPrecedes,\r\n  NotPrecedesEqual: NotPrecedesEqual,\r\n  NotPrecedesSlantEqual: NotPrecedesSlantEqual,\r\n  NotReverseElement: NotReverseElement,\r\n  NotRightTriangle: NotRightTriangle,\r\n  NotRightTriangleBar: NotRightTriangleBar,\r\n  NotRightTriangleEqual: NotRightTriangleEqual,\r\n  NotSquareSubset: NotSquareSubset,\r\n  NotSquareSubsetEqual: NotSquareSubsetEqual,\r\n  NotSquareSuperset: NotSquareSuperset,\r\n  NotSquareSupersetEqual: NotSquareSupersetEqual,\r\n  NotSubset: NotSubset,\r\n  NotSubsetEqual: NotSubsetEqual,\r\n  NotSucceeds: NotSucceeds,\r\n  NotSucceedsEqual: NotSucceedsEqual,\r\n  NotSucceedsSlantEqual: NotSucceedsSlantEqual,\r\n  NotSucceedsTilde: NotSucceedsTilde,\r\n  NotSuperset: NotSuperset,\r\n  NotSupersetEqual: NotSupersetEqual,\r\n  NotTilde: NotTilde,\r\n  NotTildeEqual: NotTildeEqual,\r\n  NotTildeFullEqual: NotTildeFullEqual,\r\n  NotTildeTilde: NotTildeTilde,\r\n  NotVerticalBar: NotVerticalBar,\r\n  Nscr: Nscr,\r\n  Ntild: Ntild,\r\n  Ntilde: Ntilde,\r\n  Nu: Nu,\r\n  OElig: OElig,\r\n  Oacut: Oacut,\r\n  Oacute: Oacute,\r\n  Ocir: Ocir,\r\n  Ocirc: Ocirc,\r\n  Ocy: Ocy,\r\n  Odblac: Odblac,\r\n  Ofr: Ofr,\r\n  Ograv: Ograv,\r\n  Ograve: Ograve,\r\n  Omacr: Omacr,\r\n  Omega: Omega,\r\n  Omicron: Omicron,\r\n  Oopf: Oopf,\r\n  OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,\r\n  OpenCurlyQuote: OpenCurlyQuote,\r\n  Or: Or,\r\n  Oscr: Oscr,\r\n  Oslas: Oslas,\r\n  Oslash: Oslash,\r\n  Otild: Otild,\r\n  Otilde: Otilde,\r\n  Otimes: Otimes,\r\n  Oum: Oum,\r\n  Ouml: Ouml,\r\n  OverBar: OverBar,\r\n  OverBrace: OverBrace,\r\n  OverBracket: OverBracket,\r\n  OverParenthesis: OverParenthesis,\r\n  PartialD: PartialD,\r\n  Pcy: Pcy,\r\n  Pfr: Pfr,\r\n  Phi: Phi,\r\n  Pi: Pi,\r\n  PlusMinus: PlusMinus,\r\n  Poincareplane: Poincareplane,\r\n  Popf: Popf,\r\n  Pr: Pr,\r\n  Precedes: Precedes,\r\n  PrecedesEqual: PrecedesEqual,\r\n  PrecedesSlantEqual: PrecedesSlantEqual,\r\n  PrecedesTilde: PrecedesTilde,\r\n  Prime: Prime,\r\n  Product: Product,\r\n  Proportion: Proportion,\r\n  Proportional: Proportional,\r\n  Pscr: Pscr,\r\n  Psi: Psi,\r\n  QUO: QUO,\r\n  QUOT: QUOT,\r\n  Qfr: Qfr,\r\n  Qopf: Qopf,\r\n  Qscr: Qscr,\r\n  RBarr: RBarr,\r\n  RE: RE,\r\n  REG: REG,\r\n  Racute: Racute,\r\n  Rang: Rang,\r\n  Rarr: Rarr,\r\n  Rarrtl: Rarrtl,\r\n  Rcaron: Rcaron,\r\n  Rcedil: Rcedil,\r\n  Rcy: Rcy,\r\n  Re: Re,\r\n  ReverseElement: ReverseElement,\r\n  ReverseEquilibrium: ReverseEquilibrium,\r\n  ReverseUpEquilibrium: ReverseUpEquilibrium,\r\n  Rfr: Rfr,\r\n  Rho: Rho,\r\n  RightAngleBracket: RightAngleBracket,\r\n  RightArrow: RightArrow,\r\n  RightArrowBar: RightArrowBar,\r\n  RightArrowLeftArrow: RightArrowLeftArrow,\r\n  RightCeiling: RightCeiling,\r\n  RightDoubleBracket: RightDoubleBracket,\r\n  RightDownTeeVector: RightDownTeeVector,\r\n  RightDownVector: RightDownVector,\r\n  RightDownVectorBar: RightDownVectorBar,\r\n  RightFloor: RightFloor,\r\n  RightTee: RightTee,\r\n  RightTeeArrow: RightTeeArrow,\r\n  RightTeeVector: RightTeeVector,\r\n  RightTriangle: RightTriangle,\r\n  RightTriangleBar: RightTriangleBar,\r\n  RightTriangleEqual: RightTriangleEqual,\r\n  RightUpDownVector: RightUpDownVector,\r\n  RightUpTeeVector: RightUpTeeVector,\r\n  RightUpVector: RightUpVector,\r\n  RightUpVectorBar: RightUpVectorBar,\r\n  RightVector: RightVector,\r\n  RightVectorBar: RightVectorBar,\r\n  Rightarrow: Rightarrow,\r\n  Ropf: Ropf,\r\n  RoundImplies: RoundImplies,\r\n  Rrightarrow: Rrightarrow,\r\n  Rscr: Rscr,\r\n  Rsh: Rsh,\r\n  RuleDelayed: RuleDelayed,\r\n  SHCHcy: SHCHcy,\r\n  SHcy: SHcy,\r\n  SOFTcy: SOFTcy,\r\n  Sacute: Sacute,\r\n  Sc: Sc,\r\n  Scaron: Scaron,\r\n  Scedil: Scedil,\r\n  Scirc: Scirc,\r\n  Scy: Scy,\r\n  Sfr: Sfr,\r\n  ShortDownArrow: ShortDownArrow,\r\n  ShortLeftArrow: ShortLeftArrow,\r\n  ShortRightArrow: ShortRightArrow,\r\n  ShortUpArrow: ShortUpArrow,\r\n  Sigma: Sigma,\r\n  SmallCircle: SmallCircle,\r\n  Sopf: Sopf,\r\n  Sqrt: Sqrt,\r\n  Square: Square,\r\n  SquareIntersection: SquareIntersection,\r\n  SquareSubset: SquareSubset,\r\n  SquareSubsetEqual: SquareSubsetEqual,\r\n  SquareSuperset: SquareSuperset,\r\n  SquareSupersetEqual: SquareSupersetEqual,\r\n  SquareUnion: SquareUnion,\r\n  Sscr: Sscr,\r\n  Star: Star,\r\n  Sub: Sub,\r\n  Subset: Subset,\r\n  SubsetEqual: SubsetEqual,\r\n  Succeeds: Succeeds,\r\n  SucceedsEqual: SucceedsEqual,\r\n  SucceedsSlantEqual: SucceedsSlantEqual,\r\n  SucceedsTilde: SucceedsTilde,\r\n  SuchThat: SuchThat,\r\n  Sum: Sum,\r\n  Sup: Sup,\r\n  Superset: Superset,\r\n  SupersetEqual: SupersetEqual,\r\n  Supset: Supset,\r\n  THOR: THOR,\r\n  THORN: THORN,\r\n  TRADE: TRADE,\r\n  TSHcy: TSHcy,\r\n  TScy: TScy,\r\n  Tab: Tab,\r\n  Tau: Tau,\r\n  Tcaron: Tcaron,\r\n  Tcedil: Tcedil,\r\n  Tcy: Tcy,\r\n  Tfr: Tfr,\r\n  Therefore: Therefore,\r\n  Theta: Theta,\r\n  ThickSpace: ThickSpace,\r\n  ThinSpace: ThinSpace,\r\n  Tilde: Tilde,\r\n  TildeEqual: TildeEqual,\r\n  TildeFullEqual: TildeFullEqual,\r\n  TildeTilde: TildeTilde,\r\n  Topf: Topf,\r\n  TripleDot: TripleDot,\r\n  Tscr: Tscr,\r\n  Tstrok: Tstrok,\r\n  Uacut: Uacut,\r\n  Uacute: Uacute,\r\n  Uarr: Uarr,\r\n  Uarrocir: Uarrocir,\r\n  Ubrcy: Ubrcy,\r\n  Ubreve: Ubreve,\r\n  Ucir: Ucir,\r\n  Ucirc: Ucirc,\r\n  Ucy: Ucy,\r\n  Udblac: Udblac,\r\n  Ufr: Ufr,\r\n  Ugrav: Ugrav,\r\n  Ugrave: Ugrave,\r\n  Umacr: Umacr,\r\n  UnderBar: UnderBar,\r\n  UnderBrace: UnderBrace,\r\n  UnderBracket: UnderBracket,\r\n  UnderParenthesis: UnderParenthesis,\r\n  Union: Union,\r\n  UnionPlus: UnionPlus,\r\n  Uogon: Uogon,\r\n  Uopf: Uopf,\r\n  UpArrow: UpArrow,\r\n  UpArrowBar: UpArrowBar,\r\n  UpArrowDownArrow: UpArrowDownArrow,\r\n  UpDownArrow: UpDownArrow,\r\n  UpEquilibrium: UpEquilibrium,\r\n  UpTee: UpTee,\r\n  UpTeeArrow: UpTeeArrow,\r\n  Uparrow: Uparrow,\r\n  Updownarrow: Updownarrow,\r\n  UpperLeftArrow: UpperLeftArrow,\r\n  UpperRightArrow: UpperRightArrow,\r\n  Upsi: Upsi,\r\n  Upsilon: Upsilon,\r\n  Uring: Uring,\r\n  Uscr: Uscr,\r\n  Utilde: Utilde,\r\n  Uum: Uum,\r\n  Uuml: Uuml,\r\n  VDash: VDash,\r\n  Vbar: Vbar,\r\n  Vcy: Vcy,\r\n  Vdash: Vdash,\r\n  Vdashl: Vdashl,\r\n  Vee: Vee,\r\n  Verbar: Verbar,\r\n  Vert: Vert,\r\n  VerticalBar: VerticalBar,\r\n  VerticalLine: VerticalLine,\r\n  VerticalSeparator: VerticalSeparator,\r\n  VerticalTilde: VerticalTilde,\r\n  VeryThinSpace: VeryThinSpace,\r\n  Vfr: Vfr,\r\n  Vopf: Vopf,\r\n  Vscr: Vscr,\r\n  Vvdash: Vvdash,\r\n  Wcirc: Wcirc,\r\n  Wedge: Wedge,\r\n  Wfr: Wfr,\r\n  Wopf: Wopf,\r\n  Wscr: Wscr,\r\n  Xfr: Xfr,\r\n  Xi: Xi,\r\n  Xopf: Xopf,\r\n  Xscr: Xscr,\r\n  YAcy: YAcy,\r\n  YIcy: YIcy,\r\n  YUcy: YUcy,\r\n  Yacut: Yacut,\r\n  Yacute: Yacute,\r\n  Ycirc: Ycirc,\r\n  Ycy: Ycy,\r\n  Yfr: Yfr,\r\n  Yopf: Yopf,\r\n  Yscr: Yscr,\r\n  Yuml: Yuml,\r\n  ZHcy: ZHcy,\r\n  Zacute: Zacute,\r\n  Zcaron: Zcaron,\r\n  Zcy: Zcy,\r\n  Zdot: Zdot,\r\n  ZeroWidthSpace: ZeroWidthSpace,\r\n  Zeta: Zeta,\r\n  Zfr: Zfr,\r\n  Zopf: Zopf,\r\n  Zscr: Zscr,\r\n  aacut: aacut,\r\n  aacute: aacute,\r\n  abreve: abreve,\r\n  ac: ac,\r\n  acE: acE,\r\n  acd: acd,\r\n  acir: acir,\r\n  acirc: acirc,\r\n  acut: acut,\r\n  acute: acute,\r\n  acy: acy,\r\n  aeli: aeli,\r\n  aelig: aelig,\r\n  af: af,\r\n  afr: afr,\r\n  agrav: agrav,\r\n  agrave: agrave,\r\n  alefsym: alefsym,\r\n  aleph: aleph,\r\n  alpha: alpha,\r\n  amacr: amacr,\r\n  amalg: amalg,\r\n  am: am,\r\n  amp: amp,\r\n  and: and,\r\n  andand: andand,\r\n  andd: andd,\r\n  andslope: andslope,\r\n  andv: andv,\r\n  ang: ang,\r\n  ange: ange,\r\n  angle: angle,\r\n  angmsd: angmsd,\r\n  angmsdaa: angmsdaa,\r\n  angmsdab: angmsdab,\r\n  angmsdac: angmsdac,\r\n  angmsdad: angmsdad,\r\n  angmsdae: angmsdae,\r\n  angmsdaf: angmsdaf,\r\n  angmsdag: angmsdag,\r\n  angmsdah: angmsdah,\r\n  angrt: angrt,\r\n  angrtvb: angrtvb,\r\n  angrtvbd: angrtvbd,\r\n  angsph: angsph,\r\n  angst: angst,\r\n  angzarr: angzarr,\r\n  aogon: aogon,\r\n  aopf: aopf,\r\n  ap: ap,\r\n  apE: apE,\r\n  apacir: apacir,\r\n  ape: ape,\r\n  apid: apid,\r\n  apos: apos,\r\n  approx: approx,\r\n  approxeq: approxeq,\r\n  arin: arin,\r\n  aring: aring,\r\n  ascr: ascr,\r\n  ast: ast,\r\n  asymp: asymp,\r\n  asympeq: asympeq,\r\n  atild: atild,\r\n  atilde: atilde,\r\n  aum: aum,\r\n  auml: auml,\r\n  awconint: awconint,\r\n  awint: awint,\r\n  bNot: bNot,\r\n  backcong: backcong,\r\n  backepsilon: backepsilon,\r\n  backprime: backprime,\r\n  backsim: backsim,\r\n  backsimeq: backsimeq,\r\n  barvee: barvee,\r\n  barwed: barwed,\r\n  barwedge: barwedge,\r\n  bbrk: bbrk,\r\n  bbrktbrk: bbrktbrk,\r\n  bcong: bcong,\r\n  bcy: bcy,\r\n  bdquo: bdquo,\r\n  becaus: becaus,\r\n  because: because,\r\n  bemptyv: bemptyv,\r\n  bepsi: bepsi,\r\n  bernou: bernou,\r\n  beta: beta,\r\n  beth: beth,\r\n  between: between,\r\n  bfr: bfr,\r\n  bigcap: bigcap,\r\n  bigcirc: bigcirc,\r\n  bigcup: bigcup,\r\n  bigodot: bigodot,\r\n  bigoplus: bigoplus,\r\n  bigotimes: bigotimes,\r\n  bigsqcup: bigsqcup,\r\n  bigstar: bigstar,\r\n  bigtriangledown: bigtriangledown,\r\n  bigtriangleup: bigtriangleup,\r\n  biguplus: biguplus,\r\n  bigvee: bigvee,\r\n  bigwedge: bigwedge,\r\n  bkarow: bkarow,\r\n  blacklozenge: blacklozenge,\r\n  blacksquare: blacksquare,\r\n  blacktriangle: blacktriangle,\r\n  blacktriangledown: blacktriangledown,\r\n  blacktriangleleft: blacktriangleleft,\r\n  blacktriangleright: blacktriangleright,\r\n  blank: blank,\r\n  blk12: blk12,\r\n  blk14: blk14,\r\n  blk34: blk34,\r\n  block: block,\r\n  bne: bne,\r\n  bnequiv: bnequiv,\r\n  bnot: bnot,\r\n  bopf: bopf,\r\n  bot: bot,\r\n  bottom: bottom,\r\n  bowtie: bowtie,\r\n  boxDL: boxDL,\r\n  boxDR: boxDR,\r\n  boxDl: boxDl,\r\n  boxDr: boxDr,\r\n  boxH: boxH,\r\n  boxHD: boxHD,\r\n  boxHU: boxHU,\r\n  boxHd: boxHd,\r\n  boxHu: boxHu,\r\n  boxUL: boxUL,\r\n  boxUR: boxUR,\r\n  boxUl: boxUl,\r\n  boxUr: boxUr,\r\n  boxV: boxV,\r\n  boxVH: boxVH,\r\n  boxVL: boxVL,\r\n  boxVR: boxVR,\r\n  boxVh: boxVh,\r\n  boxVl: boxVl,\r\n  boxVr: boxVr,\r\n  boxbox: boxbox,\r\n  boxdL: boxdL,\r\n  boxdR: boxdR,\r\n  boxdl: boxdl,\r\n  boxdr: boxdr,\r\n  boxh: boxh,\r\n  boxhD: boxhD,\r\n  boxhU: boxhU,\r\n  boxhd: boxhd,\r\n  boxhu: boxhu,\r\n  boxminus: boxminus,\r\n  boxplus: boxplus,\r\n  boxtimes: boxtimes,\r\n  boxuL: boxuL,\r\n  boxuR: boxuR,\r\n  boxul: boxul,\r\n  boxur: boxur,\r\n  boxv: boxv,\r\n  boxvH: boxvH,\r\n  boxvL: boxvL,\r\n  boxvR: boxvR,\r\n  boxvh: boxvh,\r\n  boxvl: boxvl,\r\n  boxvr: boxvr,\r\n  bprime: bprime,\r\n  breve: breve,\r\n  brvba: brvba,\r\n  brvbar: brvbar,\r\n  bscr: bscr,\r\n  bsemi: bsemi,\r\n  bsim: bsim,\r\n  bsime: bsime,\r\n  bsol: bsol,\r\n  bsolb: bsolb,\r\n  bsolhsub: bsolhsub,\r\n  bull: bull,\r\n  bullet: bullet,\r\n  bump: bump,\r\n  bumpE: bumpE,\r\n  bumpe: bumpe,\r\n  bumpeq: bumpeq,\r\n  cacute: cacute,\r\n  cap: cap,\r\n  capand: capand,\r\n  capbrcup: capbrcup,\r\n  capcap: capcap,\r\n  capcup: capcup,\r\n  capdot: capdot,\r\n  caps: caps,\r\n  caret: caret,\r\n  caron: caron,\r\n  ccaps: ccaps,\r\n  ccaron: ccaron,\r\n  ccedi: ccedi,\r\n  ccedil: ccedil,\r\n  ccirc: ccirc,\r\n  ccups: ccups,\r\n  ccupssm: ccupssm,\r\n  cdot: cdot,\r\n  cedi: cedi,\r\n  cedil: cedil,\r\n  cemptyv: cemptyv,\r\n  cen: cen,\r\n  cent: cent,\r\n  centerdot: centerdot,\r\n  cfr: cfr,\r\n  chcy: chcy,\r\n  check: check,\r\n  checkmark: checkmark,\r\n  chi: chi,\r\n  cir: cir,\r\n  cirE: cirE,\r\n  circ: circ,\r\n  circeq: circeq,\r\n  circlearrowleft: circlearrowleft,\r\n  circlearrowright: circlearrowright,\r\n  circledR: circledR,\r\n  circledS: circledS,\r\n  circledast: circledast,\r\n  circledcirc: circledcirc,\r\n  circleddash: circleddash,\r\n  cire: cire,\r\n  cirfnint: cirfnint,\r\n  cirmid: cirmid,\r\n  cirscir: cirscir,\r\n  clubs: clubs,\r\n  clubsuit: clubsuit,\r\n  colon: colon,\r\n  colone: colone,\r\n  coloneq: coloneq,\r\n  comma: comma,\r\n  commat: commat,\r\n  comp: comp,\r\n  compfn: compfn,\r\n  complement: complement,\r\n  complexes: complexes,\r\n  cong: cong,\r\n  congdot: congdot,\r\n  conint: conint,\r\n  copf: copf,\r\n  coprod: coprod,\r\n  cop: cop,\r\n  copy: copy,\r\n  copysr: copysr,\r\n  crarr: crarr,\r\n  cross: cross,\r\n  cscr: cscr,\r\n  csub: csub,\r\n  csube: csube,\r\n  csup: csup,\r\n  csupe: csupe,\r\n  ctdot: ctdot,\r\n  cudarrl: cudarrl,\r\n  cudarrr: cudarrr,\r\n  cuepr: cuepr,\r\n  cuesc: cuesc,\r\n  cularr: cularr,\r\n  cularrp: cularrp,\r\n  cup: cup,\r\n  cupbrcap: cupbrcap,\r\n  cupcap: cupcap,\r\n  cupcup: cupcup,\r\n  cupdot: cupdot,\r\n  cupor: cupor,\r\n  cups: cups,\r\n  curarr: curarr,\r\n  curarrm: curarrm,\r\n  curlyeqprec: curlyeqprec,\r\n  curlyeqsucc: curlyeqsucc,\r\n  curlyvee: curlyvee,\r\n  curlywedge: curlywedge,\r\n  curre: curre,\r\n  curren: curren,\r\n  curvearrowleft: curvearrowleft,\r\n  curvearrowright: curvearrowright,\r\n  cuvee: cuvee,\r\n  cuwed: cuwed,\r\n  cwconint: cwconint,\r\n  cwint: cwint,\r\n  cylcty: cylcty,\r\n  dArr: dArr,\r\n  dHar: dHar,\r\n  dagger: dagger,\r\n  daleth: daleth,\r\n  darr: darr,\r\n  dash: dash,\r\n  dashv: dashv,\r\n  dbkarow: dbkarow,\r\n  dblac: dblac,\r\n  dcaron: dcaron,\r\n  dcy: dcy,\r\n  dd: dd,\r\n  ddagger: ddagger,\r\n  ddarr: ddarr,\r\n  ddotseq: ddotseq,\r\n  de: de,\r\n  deg: deg,\r\n  delta: delta,\r\n  demptyv: demptyv,\r\n  dfisht: dfisht,\r\n  dfr: dfr,\r\n  dharl: dharl,\r\n  dharr: dharr,\r\n  diam: diam,\r\n  diamond: diamond,\r\n  diamondsuit: diamondsuit,\r\n  diams: diams,\r\n  die: die,\r\n  digamma: digamma,\r\n  disin: disin,\r\n  div: div,\r\n  divid: divid,\r\n  divide: divide,\r\n  divideontimes: divideontimes,\r\n  divonx: divonx,\r\n  djcy: djcy,\r\n  dlcorn: dlcorn,\r\n  dlcrop: dlcrop,\r\n  dollar: dollar,\r\n  dopf: dopf,\r\n  dot: dot,\r\n  doteq: doteq,\r\n  doteqdot: doteqdot,\r\n  dotminus: dotminus,\r\n  dotplus: dotplus,\r\n  dotsquare: dotsquare,\r\n  doublebarwedge: doublebarwedge,\r\n  downarrow: downarrow,\r\n  downdownarrows: downdownarrows,\r\n  downharpoonleft: downharpoonleft,\r\n  downharpoonright: downharpoonright,\r\n  drbkarow: drbkarow,\r\n  drcorn: drcorn,\r\n  drcrop: drcrop,\r\n  dscr: dscr,\r\n  dscy: dscy,\r\n  dsol: dsol,\r\n  dstrok: dstrok,\r\n  dtdot: dtdot,\r\n  dtri: dtri,\r\n  dtrif: dtrif,\r\n  duarr: duarr,\r\n  duhar: duhar,\r\n  dwangle: dwangle,\r\n  dzcy: dzcy,\r\n  dzigrarr: dzigrarr,\r\n  eDDot: eDDot,\r\n  eDot: eDot,\r\n  eacut: eacut,\r\n  eacute: eacute,\r\n  easter: easter,\r\n  ecaron: ecaron,\r\n  ecir: ecir,\r\n  ecirc: ecirc,\r\n  ecolon: ecolon,\r\n  ecy: ecy,\r\n  edot: edot,\r\n  ee: ee,\r\n  efDot: efDot,\r\n  efr: efr,\r\n  eg: eg,\r\n  egrav: egrav,\r\n  egrave: egrave,\r\n  egs: egs,\r\n  egsdot: egsdot,\r\n  el: el,\r\n  elinters: elinters,\r\n  ell: ell,\r\n  els: els,\r\n  elsdot: elsdot,\r\n  emacr: emacr,\r\n  empty: empty,\r\n  emptyset: emptyset,\r\n  emptyv: emptyv,\r\n  emsp13: emsp13,\r\n  emsp14: emsp14,\r\n  emsp: emsp,\r\n  eng: eng,\r\n  ensp: ensp,\r\n  eogon: eogon,\r\n  eopf: eopf,\r\n  epar: epar,\r\n  eparsl: eparsl,\r\n  eplus: eplus,\r\n  epsi: epsi,\r\n  epsilon: epsilon,\r\n  epsiv: epsiv,\r\n  eqcirc: eqcirc,\r\n  eqcolon: eqcolon,\r\n  eqsim: eqsim,\r\n  eqslantgtr: eqslantgtr,\r\n  eqslantless: eqslantless,\r\n  equals: equals,\r\n  equest: equest,\r\n  equiv: equiv,\r\n  equivDD: equivDD,\r\n  eqvparsl: eqvparsl,\r\n  erDot: erDot,\r\n  erarr: erarr,\r\n  escr: escr,\r\n  esdot: esdot,\r\n  esim: esim,\r\n  eta: eta,\r\n  et: et,\r\n  eth: eth,\r\n  eum: eum,\r\n  euml: euml,\r\n  euro: euro,\r\n  excl: excl,\r\n  exist: exist,\r\n  expectation: expectation,\r\n  exponentiale: exponentiale,\r\n  fallingdotseq: fallingdotseq,\r\n  fcy: fcy,\r\n  female: female,\r\n  ffilig: ffilig,\r\n  fflig: fflig,\r\n  ffllig: ffllig,\r\n  ffr: ffr,\r\n  filig: filig,\r\n  fjlig: fjlig,\r\n  flat: flat,\r\n  fllig: fllig,\r\n  fltns: fltns,\r\n  fnof: fnof,\r\n  fopf: fopf,\r\n  forall: forall,\r\n  fork: fork,\r\n  forkv: forkv,\r\n  fpartint: fpartint,\r\n  frac1: frac1,\r\n  frac12: frac12,\r\n  frac13: frac13,\r\n  frac14: frac14,\r\n  frac15: frac15,\r\n  frac16: frac16,\r\n  frac18: frac18,\r\n  frac23: frac23,\r\n  frac25: frac25,\r\n  frac3: frac3,\r\n  frac34: frac34,\r\n  frac35: frac35,\r\n  frac38: frac38,\r\n  frac45: frac45,\r\n  frac56: frac56,\r\n  frac58: frac58,\r\n  frac78: frac78,\r\n  frasl: frasl,\r\n  frown: frown,\r\n  fscr: fscr,\r\n  gE: gE,\r\n  gEl: gEl,\r\n  gacute: gacute,\r\n  gamma: gamma,\r\n  gammad: gammad,\r\n  gap: gap,\r\n  gbreve: gbreve,\r\n  gcirc: gcirc,\r\n  gcy: gcy,\r\n  gdot: gdot,\r\n  ge: ge,\r\n  gel: gel,\r\n  geq: geq,\r\n  geqq: geqq,\r\n  geqslant: geqslant,\r\n  ges: ges,\r\n  gescc: gescc,\r\n  gesdot: gesdot,\r\n  gesdoto: gesdoto,\r\n  gesdotol: gesdotol,\r\n  gesl: gesl,\r\n  gesles: gesles,\r\n  gfr: gfr,\r\n  gg: gg,\r\n  ggg: ggg,\r\n  gimel: gimel,\r\n  gjcy: gjcy,\r\n  gl: gl,\r\n  glE: glE,\r\n  gla: gla,\r\n  glj: glj,\r\n  gnE: gnE,\r\n  gnap: gnap,\r\n  gnapprox: gnapprox,\r\n  gne: gne,\r\n  gneq: gneq,\r\n  gneqq: gneqq,\r\n  gnsim: gnsim,\r\n  gopf: gopf,\r\n  grave: grave,\r\n  gscr: gscr,\r\n  gsim: gsim,\r\n  gsime: gsime,\r\n  gsiml: gsiml,\r\n  g: g,\r\n  gt: gt,\r\n  gtcc: gtcc,\r\n  gtcir: gtcir,\r\n  gtdot: gtdot,\r\n  gtlPar: gtlPar,\r\n  gtquest: gtquest,\r\n  gtrapprox: gtrapprox,\r\n  gtrarr: gtrarr,\r\n  gtrdot: gtrdot,\r\n  gtreqless: gtreqless,\r\n  gtreqqless: gtreqqless,\r\n  gtrless: gtrless,\r\n  gtrsim: gtrsim,\r\n  gvertneqq: gvertneqq,\r\n  gvnE: gvnE,\r\n  hArr: hArr,\r\n  hairsp: hairsp,\r\n  half: half,\r\n  hamilt: hamilt,\r\n  hardcy: hardcy,\r\n  harr: harr,\r\n  harrcir: harrcir,\r\n  harrw: harrw,\r\n  hbar: hbar,\r\n  hcirc: hcirc,\r\n  hearts: hearts,\r\n  heartsuit: heartsuit,\r\n  hellip: hellip,\r\n  hercon: hercon,\r\n  hfr: hfr,\r\n  hksearow: hksearow,\r\n  hkswarow: hkswarow,\r\n  hoarr: hoarr,\r\n  homtht: homtht,\r\n  hookleftarrow: hookleftarrow,\r\n  hookrightarrow: hookrightarrow,\r\n  hopf: hopf,\r\n  horbar: horbar,\r\n  hscr: hscr,\r\n  hslash: hslash,\r\n  hstrok: hstrok,\r\n  hybull: hybull,\r\n  hyphen: hyphen,\r\n  iacut: iacut,\r\n  iacute: iacute,\r\n  ic: ic,\r\n  icir: icir,\r\n  icirc: icirc,\r\n  icy: icy,\r\n  iecy: iecy,\r\n  iexc: iexc,\r\n  iexcl: iexcl,\r\n  iff: iff,\r\n  ifr: ifr,\r\n  igrav: igrav,\r\n  igrave: igrave,\r\n  ii: ii,\r\n  iiiint: iiiint,\r\n  iiint: iiint,\r\n  iinfin: iinfin,\r\n  iiota: iiota,\r\n  ijlig: ijlig,\r\n  imacr: imacr,\r\n  image: image,\r\n  imagline: imagline,\r\n  imagpart: imagpart,\r\n  imath: imath,\r\n  imof: imof,\r\n  imped: imped,\r\n  \"in\": \"∈\",\r\n  incare: incare,\r\n  infin: infin,\r\n  infintie: infintie,\r\n  inodot: inodot,\r\n  int: int,\r\n  intcal: intcal,\r\n  integers: integers,\r\n  intercal: intercal,\r\n  intlarhk: intlarhk,\r\n  intprod: intprod,\r\n  iocy: iocy,\r\n  iogon: iogon,\r\n  iopf: iopf,\r\n  iota: iota,\r\n  iprod: iprod,\r\n  iques: iques,\r\n  iquest: iquest,\r\n  iscr: iscr,\r\n  isin: isin,\r\n  isinE: isinE,\r\n  isindot: isindot,\r\n  isins: isins,\r\n  isinsv: isinsv,\r\n  isinv: isinv,\r\n  it: it,\r\n  itilde: itilde,\r\n  iukcy: iukcy,\r\n  ium: ium,\r\n  iuml: iuml,\r\n  jcirc: jcirc,\r\n  jcy: jcy,\r\n  jfr: jfr,\r\n  jmath: jmath,\r\n  jopf: jopf,\r\n  jscr: jscr,\r\n  jsercy: jsercy,\r\n  jukcy: jukcy,\r\n  kappa: kappa,\r\n  kappav: kappav,\r\n  kcedil: kcedil,\r\n  kcy: kcy,\r\n  kfr: kfr,\r\n  kgreen: kgreen,\r\n  khcy: khcy,\r\n  kjcy: kjcy,\r\n  kopf: kopf,\r\n  kscr: kscr,\r\n  lAarr: lAarr,\r\n  lArr: lArr,\r\n  lAtail: lAtail,\r\n  lBarr: lBarr,\r\n  lE: lE,\r\n  lEg: lEg,\r\n  lHar: lHar,\r\n  lacute: lacute,\r\n  laemptyv: laemptyv,\r\n  lagran: lagran,\r\n  lambda: lambda,\r\n  lang: lang,\r\n  langd: langd,\r\n  langle: langle,\r\n  lap: lap,\r\n  laqu: laqu,\r\n  laquo: laquo,\r\n  larr: larr,\r\n  larrb: larrb,\r\n  larrbfs: larrbfs,\r\n  larrfs: larrfs,\r\n  larrhk: larrhk,\r\n  larrlp: larrlp,\r\n  larrpl: larrpl,\r\n  larrsim: larrsim,\r\n  larrtl: larrtl,\r\n  lat: lat,\r\n  latail: latail,\r\n  late: late,\r\n  lates: lates,\r\n  lbarr: lbarr,\r\n  lbbrk: lbbrk,\r\n  lbrace: lbrace,\r\n  lbrack: lbrack,\r\n  lbrke: lbrke,\r\n  lbrksld: lbrksld,\r\n  lbrkslu: lbrkslu,\r\n  lcaron: lcaron,\r\n  lcedil: lcedil,\r\n  lceil: lceil,\r\n  lcub: lcub,\r\n  lcy: lcy,\r\n  ldca: ldca,\r\n  ldquo: ldquo,\r\n  ldquor: ldquor,\r\n  ldrdhar: ldrdhar,\r\n  ldrushar: ldrushar,\r\n  ldsh: ldsh,\r\n  le: le,\r\n  leftarrow: leftarrow,\r\n  leftarrowtail: leftarrowtail,\r\n  leftharpoondown: leftharpoondown,\r\n  leftharpoonup: leftharpoonup,\r\n  leftleftarrows: leftleftarrows,\r\n  leftrightarrow: leftrightarrow,\r\n  leftrightarrows: leftrightarrows,\r\n  leftrightharpoons: leftrightharpoons,\r\n  leftrightsquigarrow: leftrightsquigarrow,\r\n  leftthreetimes: leftthreetimes,\r\n  leg: leg,\r\n  leq: leq,\r\n  leqq: leqq,\r\n  leqslant: leqslant,\r\n  les: les,\r\n  lescc: lescc,\r\n  lesdot: lesdot,\r\n  lesdoto: lesdoto,\r\n  lesdotor: lesdotor,\r\n  lesg: lesg,\r\n  lesges: lesges,\r\n  lessapprox: lessapprox,\r\n  lessdot: lessdot,\r\n  lesseqgtr: lesseqgtr,\r\n  lesseqqgtr: lesseqqgtr,\r\n  lessgtr: lessgtr,\r\n  lesssim: lesssim,\r\n  lfisht: lfisht,\r\n  lfloor: lfloor,\r\n  lfr: lfr,\r\n  lg: lg,\r\n  lgE: lgE,\r\n  lhard: lhard,\r\n  lharu: lharu,\r\n  lharul: lharul,\r\n  lhblk: lhblk,\r\n  ljcy: ljcy,\r\n  ll: ll,\r\n  llarr: llarr,\r\n  llcorner: llcorner,\r\n  llhard: llhard,\r\n  lltri: lltri,\r\n  lmidot: lmidot,\r\n  lmoust: lmoust,\r\n  lmoustache: lmoustache,\r\n  lnE: lnE,\r\n  lnap: lnap,\r\n  lnapprox: lnapprox,\r\n  lne: lne,\r\n  lneq: lneq,\r\n  lneqq: lneqq,\r\n  lnsim: lnsim,\r\n  loang: loang,\r\n  loarr: loarr,\r\n  lobrk: lobrk,\r\n  longleftarrow: longleftarrow,\r\n  longleftrightarrow: longleftrightarrow,\r\n  longmapsto: longmapsto,\r\n  longrightarrow: longrightarrow,\r\n  looparrowleft: looparrowleft,\r\n  looparrowright: looparrowright,\r\n  lopar: lopar,\r\n  lopf: lopf,\r\n  loplus: loplus,\r\n  lotimes: lotimes,\r\n  lowast: lowast,\r\n  lowbar: lowbar,\r\n  loz: loz,\r\n  lozenge: lozenge,\r\n  lozf: lozf,\r\n  lpar: lpar,\r\n  lparlt: lparlt,\r\n  lrarr: lrarr,\r\n  lrcorner: lrcorner,\r\n  lrhar: lrhar,\r\n  lrhard: lrhard,\r\n  lrm: lrm,\r\n  lrtri: lrtri,\r\n  lsaquo: lsaquo,\r\n  lscr: lscr,\r\n  lsh: lsh,\r\n  lsim: lsim,\r\n  lsime: lsime,\r\n  lsimg: lsimg,\r\n  lsqb: lsqb,\r\n  lsquo: lsquo,\r\n  lsquor: lsquor,\r\n  lstrok: lstrok,\r\n  l: l,\r\n  lt: lt,\r\n  ltcc: ltcc,\r\n  ltcir: ltcir,\r\n  ltdot: ltdot,\r\n  lthree: lthree,\r\n  ltimes: ltimes,\r\n  ltlarr: ltlarr,\r\n  ltquest: ltquest,\r\n  ltrPar: ltrPar,\r\n  ltri: ltri,\r\n  ltrie: ltrie,\r\n  ltrif: ltrif,\r\n  lurdshar: lurdshar,\r\n  luruhar: luruhar,\r\n  lvertneqq: lvertneqq,\r\n  lvnE: lvnE,\r\n  mDDot: mDDot,\r\n  mac: mac,\r\n  macr: macr,\r\n  male: male,\r\n  malt: malt,\r\n  maltese: maltese,\r\n  map: map,\r\n  mapsto: mapsto,\r\n  mapstodown: mapstodown,\r\n  mapstoleft: mapstoleft,\r\n  mapstoup: mapstoup,\r\n  marker: marker,\r\n  mcomma: mcomma,\r\n  mcy: mcy,\r\n  mdash: mdash,\r\n  measuredangle: measuredangle,\r\n  mfr: mfr,\r\n  mho: mho,\r\n  micr: micr,\r\n  micro: micro,\r\n  mid: mid,\r\n  midast: midast,\r\n  midcir: midcir,\r\n  middo: middo,\r\n  middot: middot,\r\n  minus: minus,\r\n  minusb: minusb,\r\n  minusd: minusd,\r\n  minusdu: minusdu,\r\n  mlcp: mlcp,\r\n  mldr: mldr,\r\n  mnplus: mnplus,\r\n  models: models,\r\n  mopf: mopf,\r\n  mp: mp,\r\n  mscr: mscr,\r\n  mstpos: mstpos,\r\n  mu: mu,\r\n  multimap: multimap,\r\n  mumap: mumap,\r\n  nGg: nGg,\r\n  nGt: nGt,\r\n  nGtv: nGtv,\r\n  nLeftarrow: nLeftarrow,\r\n  nLeftrightarrow: nLeftrightarrow,\r\n  nLl: nLl,\r\n  nLt: nLt,\r\n  nLtv: nLtv,\r\n  nRightarrow: nRightarrow,\r\n  nVDash: nVDash,\r\n  nVdash: nVdash,\r\n  nabla: nabla,\r\n  nacute: nacute,\r\n  nang: nang,\r\n  nap: nap,\r\n  napE: napE,\r\n  napid: napid,\r\n  napos: napos,\r\n  napprox: napprox,\r\n  natur: natur,\r\n  natural: natural,\r\n  naturals: naturals,\r\n  nbs: nbs,\r\n  nbsp: nbsp,\r\n  nbump: nbump,\r\n  nbumpe: nbumpe,\r\n  ncap: ncap,\r\n  ncaron: ncaron,\r\n  ncedil: ncedil,\r\n  ncong: ncong,\r\n  ncongdot: ncongdot,\r\n  ncup: ncup,\r\n  ncy: ncy,\r\n  ndash: ndash,\r\n  ne: ne,\r\n  neArr: neArr,\r\n  nearhk: nearhk,\r\n  nearr: nearr,\r\n  nearrow: nearrow,\r\n  nedot: nedot,\r\n  nequiv: nequiv,\r\n  nesear: nesear,\r\n  nesim: nesim,\r\n  nexist: nexist,\r\n  nexists: nexists,\r\n  nfr: nfr,\r\n  ngE: ngE,\r\n  nge: nge,\r\n  ngeq: ngeq,\r\n  ngeqq: ngeqq,\r\n  ngeqslant: ngeqslant,\r\n  nges: nges,\r\n  ngsim: ngsim,\r\n  ngt: ngt,\r\n  ngtr: ngtr,\r\n  nhArr: nhArr,\r\n  nharr: nharr,\r\n  nhpar: nhpar,\r\n  ni: ni,\r\n  nis: nis,\r\n  nisd: nisd,\r\n  niv: niv,\r\n  njcy: njcy,\r\n  nlArr: nlArr,\r\n  nlE: nlE,\r\n  nlarr: nlarr,\r\n  nldr: nldr,\r\n  nle: nle,\r\n  nleftarrow: nleftarrow,\r\n  nleftrightarrow: nleftrightarrow,\r\n  nleq: nleq,\r\n  nleqq: nleqq,\r\n  nleqslant: nleqslant,\r\n  nles: nles,\r\n  nless: nless,\r\n  nlsim: nlsim,\r\n  nlt: nlt,\r\n  nltri: nltri,\r\n  nltrie: nltrie,\r\n  nmid: nmid,\r\n  nopf: nopf,\r\n  no: no,\r\n  not: not,\r\n  notin: notin,\r\n  notinE: notinE,\r\n  notindot: notindot,\r\n  notinva: notinva,\r\n  notinvb: notinvb,\r\n  notinvc: notinvc,\r\n  notni: notni,\r\n  notniva: notniva,\r\n  notnivb: notnivb,\r\n  notnivc: notnivc,\r\n  npar: npar,\r\n  nparallel: nparallel,\r\n  nparsl: nparsl,\r\n  npart: npart,\r\n  npolint: npolint,\r\n  npr: npr,\r\n  nprcue: nprcue,\r\n  npre: npre,\r\n  nprec: nprec,\r\n  npreceq: npreceq,\r\n  nrArr: nrArr,\r\n  nrarr: nrarr,\r\n  nrarrc: nrarrc,\r\n  nrarrw: nrarrw,\r\n  nrightarrow: nrightarrow,\r\n  nrtri: nrtri,\r\n  nrtrie: nrtrie,\r\n  nsc: nsc,\r\n  nsccue: nsccue,\r\n  nsce: nsce,\r\n  nscr: nscr,\r\n  nshortmid: nshortmid,\r\n  nshortparallel: nshortparallel,\r\n  nsim: nsim,\r\n  nsime: nsime,\r\n  nsimeq: nsimeq,\r\n  nsmid: nsmid,\r\n  nspar: nspar,\r\n  nsqsube: nsqsube,\r\n  nsqsupe: nsqsupe,\r\n  nsub: nsub,\r\n  nsubE: nsubE,\r\n  nsube: nsube,\r\n  nsubset: nsubset,\r\n  nsubseteq: nsubseteq,\r\n  nsubseteqq: nsubseteqq,\r\n  nsucc: nsucc,\r\n  nsucceq: nsucceq,\r\n  nsup: nsup,\r\n  nsupE: nsupE,\r\n  nsupe: nsupe,\r\n  nsupset: nsupset,\r\n  nsupseteq: nsupseteq,\r\n  nsupseteqq: nsupseteqq,\r\n  ntgl: ntgl,\r\n  ntild: ntild,\r\n  ntilde: ntilde,\r\n  ntlg: ntlg,\r\n  ntriangleleft: ntriangleleft,\r\n  ntrianglelefteq: ntrianglelefteq,\r\n  ntriangleright: ntriangleright,\r\n  ntrianglerighteq: ntrianglerighteq,\r\n  nu: nu,\r\n  num: num,\r\n  numero: numero,\r\n  numsp: numsp,\r\n  nvDash: nvDash,\r\n  nvHarr: nvHarr,\r\n  nvap: nvap,\r\n  nvdash: nvdash,\r\n  nvge: nvge,\r\n  nvgt: nvgt,\r\n  nvinfin: nvinfin,\r\n  nvlArr: nvlArr,\r\n  nvle: nvle,\r\n  nvlt: nvlt,\r\n  nvltrie: nvltrie,\r\n  nvrArr: nvrArr,\r\n  nvrtrie: nvrtrie,\r\n  nvsim: nvsim,\r\n  nwArr: nwArr,\r\n  nwarhk: nwarhk,\r\n  nwarr: nwarr,\r\n  nwarrow: nwarrow,\r\n  nwnear: nwnear,\r\n  oS: oS,\r\n  oacut: oacut,\r\n  oacute: oacute,\r\n  oast: oast,\r\n  ocir: ocir,\r\n  ocirc: ocirc,\r\n  ocy: ocy,\r\n  odash: odash,\r\n  odblac: odblac,\r\n  odiv: odiv,\r\n  odot: odot,\r\n  odsold: odsold,\r\n  oelig: oelig,\r\n  ofcir: ofcir,\r\n  ofr: ofr,\r\n  ogon: ogon,\r\n  ograv: ograv,\r\n  ograve: ograve,\r\n  ogt: ogt,\r\n  ohbar: ohbar,\r\n  ohm: ohm,\r\n  oint: oint,\r\n  olarr: olarr,\r\n  olcir: olcir,\r\n  olcross: olcross,\r\n  oline: oline,\r\n  olt: olt,\r\n  omacr: omacr,\r\n  omega: omega,\r\n  omicron: omicron,\r\n  omid: omid,\r\n  ominus: ominus,\r\n  oopf: oopf,\r\n  opar: opar,\r\n  operp: operp,\r\n  oplus: oplus,\r\n  or: or,\r\n  orarr: orarr,\r\n  ord: ord,\r\n  order: order,\r\n  orderof: orderof,\r\n  ordf: ordf,\r\n  ordm: ordm,\r\n  origof: origof,\r\n  oror: oror,\r\n  orslope: orslope,\r\n  orv: orv,\r\n  oscr: oscr,\r\n  oslas: oslas,\r\n  oslash: oslash,\r\n  osol: osol,\r\n  otild: otild,\r\n  otilde: otilde,\r\n  otimes: otimes,\r\n  otimesas: otimesas,\r\n  oum: oum,\r\n  ouml: ouml,\r\n  ovbar: ovbar,\r\n  par: par,\r\n  para: para,\r\n  parallel: parallel,\r\n  parsim: parsim,\r\n  parsl: parsl,\r\n  part: part,\r\n  pcy: pcy,\r\n  percnt: percnt,\r\n  period: period,\r\n  permil: permil,\r\n  perp: perp,\r\n  pertenk: pertenk,\r\n  pfr: pfr,\r\n  phi: phi,\r\n  phiv: phiv,\r\n  phmmat: phmmat,\r\n  phone: phone,\r\n  pi: pi,\r\n  pitchfork: pitchfork,\r\n  piv: piv,\r\n  planck: planck,\r\n  planckh: planckh,\r\n  plankv: plankv,\r\n  plus: plus,\r\n  plusacir: plusacir,\r\n  plusb: plusb,\r\n  pluscir: pluscir,\r\n  plusdo: plusdo,\r\n  plusdu: plusdu,\r\n  pluse: pluse,\r\n  plusm: plusm,\r\n  plusmn: plusmn,\r\n  plussim: plussim,\r\n  plustwo: plustwo,\r\n  pm: pm,\r\n  pointint: pointint,\r\n  popf: popf,\r\n  poun: poun,\r\n  pound: pound,\r\n  pr: pr,\r\n  prE: prE,\r\n  prap: prap,\r\n  prcue: prcue,\r\n  pre: pre,\r\n  prec: prec,\r\n  precapprox: precapprox,\r\n  preccurlyeq: preccurlyeq,\r\n  preceq: preceq,\r\n  precnapprox: precnapprox,\r\n  precneqq: precneqq,\r\n  precnsim: precnsim,\r\n  precsim: precsim,\r\n  prime: prime,\r\n  primes: primes,\r\n  prnE: prnE,\r\n  prnap: prnap,\r\n  prnsim: prnsim,\r\n  prod: prod,\r\n  profalar: profalar,\r\n  profline: profline,\r\n  profsurf: profsurf,\r\n  prop: prop,\r\n  propto: propto,\r\n  prsim: prsim,\r\n  prurel: prurel,\r\n  pscr: pscr,\r\n  psi: psi,\r\n  puncsp: puncsp,\r\n  qfr: qfr,\r\n  qint: qint,\r\n  qopf: qopf,\r\n  qprime: qprime,\r\n  qscr: qscr,\r\n  quaternions: quaternions,\r\n  quatint: quatint,\r\n  quest: quest,\r\n  questeq: questeq,\r\n  quo: quo,\r\n  quot: quot,\r\n  rAarr: rAarr,\r\n  rArr: rArr,\r\n  rAtail: rAtail,\r\n  rBarr: rBarr,\r\n  rHar: rHar,\r\n  race: race,\r\n  racute: racute,\r\n  radic: radic,\r\n  raemptyv: raemptyv,\r\n  rang: rang,\r\n  rangd: rangd,\r\n  range: range,\r\n  rangle: rangle,\r\n  raqu: raqu,\r\n  raquo: raquo,\r\n  rarr: rarr,\r\n  rarrap: rarrap,\r\n  rarrb: rarrb,\r\n  rarrbfs: rarrbfs,\r\n  rarrc: rarrc,\r\n  rarrfs: rarrfs,\r\n  rarrhk: rarrhk,\r\n  rarrlp: rarrlp,\r\n  rarrpl: rarrpl,\r\n  rarrsim: rarrsim,\r\n  rarrtl: rarrtl,\r\n  rarrw: rarrw,\r\n  ratail: ratail,\r\n  ratio: ratio,\r\n  rationals: rationals,\r\n  rbarr: rbarr,\r\n  rbbrk: rbbrk,\r\n  rbrace: rbrace,\r\n  rbrack: rbrack,\r\n  rbrke: rbrke,\r\n  rbrksld: rbrksld,\r\n  rbrkslu: rbrkslu,\r\n  rcaron: rcaron,\r\n  rcedil: rcedil,\r\n  rceil: rceil,\r\n  rcub: rcub,\r\n  rcy: rcy,\r\n  rdca: rdca,\r\n  rdldhar: rdldhar,\r\n  rdquo: rdquo,\r\n  rdquor: rdquor,\r\n  rdsh: rdsh,\r\n  real: real,\r\n  realine: realine,\r\n  realpart: realpart,\r\n  reals: reals,\r\n  rect: rect,\r\n  re: re,\r\n  reg: reg,\r\n  rfisht: rfisht,\r\n  rfloor: rfloor,\r\n  rfr: rfr,\r\n  rhard: rhard,\r\n  rharu: rharu,\r\n  rharul: rharul,\r\n  rho: rho,\r\n  rhov: rhov,\r\n  rightarrow: rightarrow,\r\n  rightarrowtail: rightarrowtail,\r\n  rightharpoondown: rightharpoondown,\r\n  rightharpoonup: rightharpoonup,\r\n  rightleftarrows: rightleftarrows,\r\n  rightleftharpoons: rightleftharpoons,\r\n  rightrightarrows: rightrightarrows,\r\n  rightsquigarrow: rightsquigarrow,\r\n  rightthreetimes: rightthreetimes,\r\n  ring: ring,\r\n  risingdotseq: risingdotseq,\r\n  rlarr: rlarr,\r\n  rlhar: rlhar,\r\n  rlm: rlm,\r\n  rmoust: rmoust,\r\n  rmoustache: rmoustache,\r\n  rnmid: rnmid,\r\n  roang: roang,\r\n  roarr: roarr,\r\n  robrk: robrk,\r\n  ropar: ropar,\r\n  ropf: ropf,\r\n  roplus: roplus,\r\n  rotimes: rotimes,\r\n  rpar: rpar,\r\n  rpargt: rpargt,\r\n  rppolint: rppolint,\r\n  rrarr: rrarr,\r\n  rsaquo: rsaquo,\r\n  rscr: rscr,\r\n  rsh: rsh,\r\n  rsqb: rsqb,\r\n  rsquo: rsquo,\r\n  rsquor: rsquor,\r\n  rthree: rthree,\r\n  rtimes: rtimes,\r\n  rtri: rtri,\r\n  rtrie: rtrie,\r\n  rtrif: rtrif,\r\n  rtriltri: rtriltri,\r\n  ruluhar: ruluhar,\r\n  rx: rx,\r\n  sacute: sacute,\r\n  sbquo: sbquo,\r\n  sc: sc,\r\n  scE: scE,\r\n  scap: scap,\r\n  scaron: scaron,\r\n  sccue: sccue,\r\n  sce: sce,\r\n  scedil: scedil,\r\n  scirc: scirc,\r\n  scnE: scnE,\r\n  scnap: scnap,\r\n  scnsim: scnsim,\r\n  scpolint: scpolint,\r\n  scsim: scsim,\r\n  scy: scy,\r\n  sdot: sdot,\r\n  sdotb: sdotb,\r\n  sdote: sdote,\r\n  seArr: seArr,\r\n  searhk: searhk,\r\n  searr: searr,\r\n  searrow: searrow,\r\n  sec: sec,\r\n  sect: sect,\r\n  semi: semi,\r\n  seswar: seswar,\r\n  setminus: setminus,\r\n  setmn: setmn,\r\n  sext: sext,\r\n  sfr: sfr,\r\n  sfrown: sfrown,\r\n  sharp: sharp,\r\n  shchcy: shchcy,\r\n  shcy: shcy,\r\n  shortmid: shortmid,\r\n  shortparallel: shortparallel,\r\n  sh: sh,\r\n  shy: shy,\r\n  sigma: sigma,\r\n  sigmaf: sigmaf,\r\n  sigmav: sigmav,\r\n  sim: sim,\r\n  simdot: simdot,\r\n  sime: sime,\r\n  simeq: simeq,\r\n  simg: simg,\r\n  simgE: simgE,\r\n  siml: siml,\r\n  simlE: simlE,\r\n  simne: simne,\r\n  simplus: simplus,\r\n  simrarr: simrarr,\r\n  slarr: slarr,\r\n  smallsetminus: smallsetminus,\r\n  smashp: smashp,\r\n  smeparsl: smeparsl,\r\n  smid: smid,\r\n  smile: smile,\r\n  smt: smt,\r\n  smte: smte,\r\n  smtes: smtes,\r\n  softcy: softcy,\r\n  sol: sol,\r\n  solb: solb,\r\n  solbar: solbar,\r\n  sopf: sopf,\r\n  spades: spades,\r\n  spadesuit: spadesuit,\r\n  spar: spar,\r\n  sqcap: sqcap,\r\n  sqcaps: sqcaps,\r\n  sqcup: sqcup,\r\n  sqcups: sqcups,\r\n  sqsub: sqsub,\r\n  sqsube: sqsube,\r\n  sqsubset: sqsubset,\r\n  sqsubseteq: sqsubseteq,\r\n  sqsup: sqsup,\r\n  sqsupe: sqsupe,\r\n  sqsupset: sqsupset,\r\n  sqsupseteq: sqsupseteq,\r\n  squ: squ,\r\n  square: square,\r\n  squarf: squarf,\r\n  squf: squf,\r\n  srarr: srarr,\r\n  sscr: sscr,\r\n  ssetmn: ssetmn,\r\n  ssmile: ssmile,\r\n  sstarf: sstarf,\r\n  star: star,\r\n  starf: starf,\r\n  straightepsilon: straightepsilon,\r\n  straightphi: straightphi,\r\n  strns: strns,\r\n  sub: sub,\r\n  subE: subE,\r\n  subdot: subdot,\r\n  sube: sube,\r\n  subedot: subedot,\r\n  submult: submult,\r\n  subnE: subnE,\r\n  subne: subne,\r\n  subplus: subplus,\r\n  subrarr: subrarr,\r\n  subset: subset,\r\n  subseteq: subseteq,\r\n  subseteqq: subseteqq,\r\n  subsetneq: subsetneq,\r\n  subsetneqq: subsetneqq,\r\n  subsim: subsim,\r\n  subsub: subsub,\r\n  subsup: subsup,\r\n  succ: succ,\r\n  succapprox: succapprox,\r\n  succcurlyeq: succcurlyeq,\r\n  succeq: succeq,\r\n  succnapprox: succnapprox,\r\n  succneqq: succneqq,\r\n  succnsim: succnsim,\r\n  succsim: succsim,\r\n  sum: sum,\r\n  sung: sung,\r\n  sup: sup,\r\n  sup1: sup1,\r\n  sup2: sup2,\r\n  sup3: sup3,\r\n  supE: supE,\r\n  supdot: supdot,\r\n  supdsub: supdsub,\r\n  supe: supe,\r\n  supedot: supedot,\r\n  suphsol: suphsol,\r\n  suphsub: suphsub,\r\n  suplarr: suplarr,\r\n  supmult: supmult,\r\n  supnE: supnE,\r\n  supne: supne,\r\n  supplus: supplus,\r\n  supset: supset,\r\n  supseteq: supseteq,\r\n  supseteqq: supseteqq,\r\n  supsetneq: supsetneq,\r\n  supsetneqq: supsetneqq,\r\n  supsim: supsim,\r\n  supsub: supsub,\r\n  supsup: supsup,\r\n  swArr: swArr,\r\n  swarhk: swarhk,\r\n  swarr: swarr,\r\n  swarrow: swarrow,\r\n  swnwar: swnwar,\r\n  szli: szli,\r\n  szlig: szlig,\r\n  target: target,\r\n  tau: tau,\r\n  tbrk: tbrk,\r\n  tcaron: tcaron,\r\n  tcedil: tcedil,\r\n  tcy: tcy,\r\n  tdot: tdot,\r\n  telrec: telrec,\r\n  tfr: tfr,\r\n  there4: there4,\r\n  therefore: therefore,\r\n  theta: theta,\r\n  thetasym: thetasym,\r\n  thetav: thetav,\r\n  thickapprox: thickapprox,\r\n  thicksim: thicksim,\r\n  thinsp: thinsp,\r\n  thkap: thkap,\r\n  thksim: thksim,\r\n  thor: thor,\r\n  thorn: thorn,\r\n  tilde: tilde,\r\n  time: time,\r\n  times: times,\r\n  timesb: timesb,\r\n  timesbar: timesbar,\r\n  timesd: timesd,\r\n  tint: tint,\r\n  toea: toea,\r\n  top: top,\r\n  topbot: topbot,\r\n  topcir: topcir,\r\n  topf: topf,\r\n  topfork: topfork,\r\n  tosa: tosa,\r\n  tprime: tprime,\r\n  trade: trade,\r\n  triangle: triangle,\r\n  triangledown: triangledown,\r\n  triangleleft: triangleleft,\r\n  trianglelefteq: trianglelefteq,\r\n  triangleq: triangleq,\r\n  triangleright: triangleright,\r\n  trianglerighteq: trianglerighteq,\r\n  tridot: tridot,\r\n  trie: trie,\r\n  triminus: triminus,\r\n  triplus: triplus,\r\n  trisb: trisb,\r\n  tritime: tritime,\r\n  trpezium: trpezium,\r\n  tscr: tscr,\r\n  tscy: tscy,\r\n  tshcy: tshcy,\r\n  tstrok: tstrok,\r\n  twixt: twixt,\r\n  twoheadleftarrow: twoheadleftarrow,\r\n  twoheadrightarrow: twoheadrightarrow,\r\n  uArr: uArr,\r\n  uHar: uHar,\r\n  uacut: uacut,\r\n  uacute: uacute,\r\n  uarr: uarr,\r\n  ubrcy: ubrcy,\r\n  ubreve: ubreve,\r\n  ucir: ucir,\r\n  ucirc: ucirc,\r\n  ucy: ucy,\r\n  udarr: udarr,\r\n  udblac: udblac,\r\n  udhar: udhar,\r\n  ufisht: ufisht,\r\n  ufr: ufr,\r\n  ugrav: ugrav,\r\n  ugrave: ugrave,\r\n  uharl: uharl,\r\n  uharr: uharr,\r\n  uhblk: uhblk,\r\n  ulcorn: ulcorn,\r\n  ulcorner: ulcorner,\r\n  ulcrop: ulcrop,\r\n  ultri: ultri,\r\n  umacr: umacr,\r\n  um: um,\r\n  uml: uml,\r\n  uogon: uogon,\r\n  uopf: uopf,\r\n  uparrow: uparrow,\r\n  updownarrow: updownarrow,\r\n  upharpoonleft: upharpoonleft,\r\n  upharpoonright: upharpoonright,\r\n  uplus: uplus,\r\n  upsi: upsi,\r\n  upsih: upsih,\r\n  upsilon: upsilon,\r\n  upuparrows: upuparrows,\r\n  urcorn: urcorn,\r\n  urcorner: urcorner,\r\n  urcrop: urcrop,\r\n  uring: uring,\r\n  urtri: urtri,\r\n  uscr: uscr,\r\n  utdot: utdot,\r\n  utilde: utilde,\r\n  utri: utri,\r\n  utrif: utrif,\r\n  uuarr: uuarr,\r\n  uum: uum,\r\n  uuml: uuml,\r\n  uwangle: uwangle,\r\n  vArr: vArr,\r\n  vBar: vBar,\r\n  vBarv: vBarv,\r\n  vDash: vDash,\r\n  vangrt: vangrt,\r\n  varepsilon: varepsilon,\r\n  varkappa: varkappa,\r\n  varnothing: varnothing,\r\n  varphi: varphi,\r\n  varpi: varpi,\r\n  varpropto: varpropto,\r\n  varr: varr,\r\n  varrho: varrho,\r\n  varsigma: varsigma,\r\n  varsubsetneq: varsubsetneq,\r\n  varsubsetneqq: varsubsetneqq,\r\n  varsupsetneq: varsupsetneq,\r\n  varsupsetneqq: varsupsetneqq,\r\n  vartheta: vartheta,\r\n  vartriangleleft: vartriangleleft,\r\n  vartriangleright: vartriangleright,\r\n  vcy: vcy,\r\n  vdash: vdash,\r\n  vee: vee,\r\n  veebar: veebar,\r\n  veeeq: veeeq,\r\n  vellip: vellip,\r\n  verbar: verbar,\r\n  vert: vert,\r\n  vfr: vfr,\r\n  vltri: vltri,\r\n  vnsub: vnsub,\r\n  vnsup: vnsup,\r\n  vopf: vopf,\r\n  vprop: vprop,\r\n  vrtri: vrtri,\r\n  vscr: vscr,\r\n  vsubnE: vsubnE,\r\n  vsubne: vsubne,\r\n  vsupnE: vsupnE,\r\n  vsupne: vsupne,\r\n  vzigzag: vzigzag,\r\n  wcirc: wcirc,\r\n  wedbar: wedbar,\r\n  wedge: wedge,\r\n  wedgeq: wedgeq,\r\n  weierp: weierp,\r\n  wfr: wfr,\r\n  wopf: wopf,\r\n  wp: wp,\r\n  wr: wr,\r\n  wreath: wreath,\r\n  wscr: wscr,\r\n  xcap: xcap,\r\n  xcirc: xcirc,\r\n  xcup: xcup,\r\n  xdtri: xdtri,\r\n  xfr: xfr,\r\n  xhArr: xhArr,\r\n  xharr: xharr,\r\n  xi: xi,\r\n  xlArr: xlArr,\r\n  xlarr: xlarr,\r\n  xmap: xmap,\r\n  xnis: xnis,\r\n  xodot: xodot,\r\n  xopf: xopf,\r\n  xoplus: xoplus,\r\n  xotime: xotime,\r\n  xrArr: xrArr,\r\n  xrarr: xrarr,\r\n  xscr: xscr,\r\n  xsqcup: xsqcup,\r\n  xuplus: xuplus,\r\n  xutri: xutri,\r\n  xvee: xvee,\r\n  xwedge: xwedge,\r\n  yacut: yacut,\r\n  yacute: yacute,\r\n  yacy: yacy,\r\n  ycirc: ycirc,\r\n  ycy: ycy,\r\n  ye: ye,\r\n  yen: yen,\r\n  yfr: yfr,\r\n  yicy: yicy,\r\n  yopf: yopf,\r\n  yscr: yscr,\r\n  yucy: yucy,\r\n  yum: yum,\r\n  yuml: yuml,\r\n  zacute: zacute,\r\n  zcaron: zcaron,\r\n  zcy: zcy,\r\n  zdot: zdot,\r\n  zeetrf: zeetrf,\r\n  zeta: zeta,\r\n  zfr: zfr,\r\n  zhcy: zhcy,\r\n  zigrarr: zigrarr,\r\n  zopf: zopf,\r\n  zscr: zscr,\r\n  zwj: zwj,\r\n  zwnj: zwnj\r\n};\r\nvar characterEntities = require$$0;\r\nvar decodeEntity_1 = decodeEntity$1;\r\nvar own$2 = {}.hasOwnProperty;\r\n\r\nfunction decodeEntity$1(characters) {\r\n  return own$2.call(characterEntities, characters) ? characterEntities[characters] : false;\r\n}\r\n\r\nvar legacy = require$$0$1;\r\nvar invalid = require$$1;\r\nvar decimal = isDecimal;\r\nvar hexadecimal = isHexadecimal;\r\nvar alphanumerical = isAlphanumerical;\r\nvar decodeEntity = decodeEntity_1;\r\nvar parseEntities_1 = parseEntities;\r\nvar own$1 = {}.hasOwnProperty;\r\nvar fromCharCode = String.fromCharCode;\r\nvar noop = Function.prototype; // Default settings.\r\n\r\nvar defaults = {\r\n  warning: null,\r\n  reference: null,\r\n  text: null,\r\n  warningContext: null,\r\n  referenceContext: null,\r\n  textContext: null,\r\n  position: {},\r\n  additional: null,\r\n  attribute: false,\r\n  nonTerminated: true\r\n}; // Characters.\r\n\r\nvar tab = 9; // '\\t'\r\n\r\nvar lineFeed = 10; // '\\n'\r\n\r\nvar formFeed = 12; // '\\f'\r\n\r\nvar space = 32; // ' '\r\n\r\nvar ampersand = 38; // '&'\r\n\r\nvar semicolon = 59; // ';'\r\n\r\nvar lessThan = 60; // '<'\r\n\r\nvar equalsTo = 61; // '='\r\n\r\nvar numberSign = 35; // '#'\r\n\r\nvar uppercaseX = 88; // 'X'\r\n\r\nvar lowercaseX = 120; // 'x'\r\n\r\nvar replacementCharacter = 65533; // '�'\r\n// Reference types.\r\n\r\nvar name = 'named';\r\nvar hexa = 'hexadecimal';\r\nvar deci = 'decimal'; // Map of bases.\r\n\r\nvar bases = {};\r\nbases[hexa] = 16;\r\nbases[deci] = 10; // Map of types to tests.\r\n// Each type of character reference accepts different characters.\r\n// This test is used to detect whether a reference has ended (as the semicolon\r\n// is not strictly needed).\r\n\r\nvar tests = {};\r\ntests[name] = alphanumerical;\r\ntests[deci] = decimal;\r\ntests[hexa] = hexadecimal; // Warning types.\r\n\r\nvar namedNotTerminated = 1;\r\nvar numericNotTerminated = 2;\r\nvar namedEmpty = 3;\r\nvar numericEmpty = 4;\r\nvar namedUnknown = 5;\r\nvar numericDisallowed = 6;\r\nvar numericProhibited = 7; // Warning messages.\r\n\r\nvar messages = {};\r\nmessages[namedNotTerminated] = 'Named character references must be terminated by a semicolon';\r\nmessages[numericNotTerminated] = 'Numeric character references must be terminated by a semicolon';\r\nmessages[namedEmpty] = 'Named character references cannot be empty';\r\nmessages[numericEmpty] = 'Numeric character references cannot be empty';\r\nmessages[namedUnknown] = 'Named character references must be known';\r\nmessages[numericDisallowed] = 'Numeric character references cannot be disallowed';\r\nmessages[numericProhibited] = 'Numeric character references cannot be outside the permissible Unicode range'; // Wrap to ensure clean parameters are given to `parse`.\r\n\r\nfunction parseEntities(value, options) {\r\n  var settings = {};\r\n  var option;\r\n  var key;\r\n\r\n  if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  for (key in defaults) {\r\n    option = options[key];\r\n    settings[key] = option === null || option === undefined ? defaults[key] : option;\r\n  }\r\n\r\n  if (settings.position.indent || settings.position.start) {\r\n    settings.indent = settings.position.indent || [];\r\n    settings.position = settings.position.start;\r\n  }\r\n\r\n  return parse(value, settings);\r\n} // Parse entities.\r\n// eslint-disable-next-line complexity\r\n\r\n\r\nfunction parse(value, settings) {\r\n  var additional = settings.additional;\r\n  var nonTerminated = settings.nonTerminated;\r\n  var handleText = settings.text;\r\n  var handleReference = settings.reference;\r\n  var handleWarning = settings.warning;\r\n  var textContext = settings.textContext;\r\n  var referenceContext = settings.referenceContext;\r\n  var warningContext = settings.warningContext;\r\n  var pos = settings.position;\r\n  var indent = settings.indent || [];\r\n  var length = value.length;\r\n  var index = 0;\r\n  var lines = -1;\r\n  var column = pos.column || 1;\r\n  var line = pos.line || 1;\r\n  var queue = '';\r\n  var result = [];\r\n  var entityCharacters;\r\n  var namedEntity;\r\n  var terminated;\r\n  var characters;\r\n  var character;\r\n  var reference;\r\n  var following;\r\n  var warning;\r\n  var reason;\r\n  var output;\r\n  var entity;\r\n  var begin;\r\n  var start;\r\n  var type;\r\n  var test;\r\n  var prev;\r\n  var next;\r\n  var diff;\r\n  var end;\r\n\r\n  if (typeof additional === 'string') {\r\n    additional = additional.charCodeAt(0);\r\n  } // Cache the current point.\r\n\r\n\r\n  prev = now(); // Wrap `handleWarning`.\r\n\r\n  warning = handleWarning ? parseError : noop; // Ensure the algorithm walks over the first character and the end\r\n  // (inclusive).\r\n\r\n  index--;\r\n  length++;\r\n\r\n  while (++index < length) {\r\n    // If the previous character was a newline.\r\n    if (character === lineFeed) {\r\n      column = indent[lines] || 1;\r\n    }\r\n\r\n    character = value.charCodeAt(index);\r\n\r\n    if (character === ampersand) {\r\n      following = value.charCodeAt(index + 1); // The behaviour depends on the identity of the next character.\r\n\r\n      if (following === tab || following === lineFeed || following === formFeed || following === space || following === ampersand || following === lessThan || following !== following || additional && following === additional) {\r\n        // Not a character reference.\r\n        // No characters are consumed, and nothing is returned.\r\n        // This is not an error, either.\r\n        queue += fromCharCode(character);\r\n        column++;\r\n        continue;\r\n      }\r\n\r\n      start = index + 1;\r\n      begin = start;\r\n      end = start;\r\n\r\n      if (following === numberSign) {\r\n        // Numerical entity.\r\n        end = ++begin; // The behaviour further depends on the next character.\r\n\r\n        following = value.charCodeAt(end);\r\n\r\n        if (following === uppercaseX || following === lowercaseX) {\r\n          // ASCII hex digits.\r\n          type = hexa;\r\n          end = ++begin;\r\n        } else {\r\n          // ASCII digits.\r\n          type = deci;\r\n        }\r\n      } else {\r\n        // Named entity.\r\n        type = name;\r\n      }\r\n\r\n      entityCharacters = '';\r\n      entity = '';\r\n      characters = '';\r\n      test = tests[type];\r\n      end--;\r\n\r\n      while (++end < length) {\r\n        following = value.charCodeAt(end);\r\n\r\n        if (!test(following)) {\r\n          break;\r\n        }\r\n\r\n        characters += fromCharCode(following); // Check if we can match a legacy named reference.\r\n        // If so, we cache that as the last viable named reference.\r\n        // This ensures we do not need to walk backwards later.\r\n\r\n        if (type === name && own$1.call(legacy, characters)) {\r\n          entityCharacters = characters;\r\n          entity = legacy[characters];\r\n        }\r\n      }\r\n\r\n      terminated = value.charCodeAt(end) === semicolon;\r\n\r\n      if (terminated) {\r\n        end++;\r\n        namedEntity = type === name ? decodeEntity(characters) : false;\r\n\r\n        if (namedEntity) {\r\n          entityCharacters = characters;\r\n          entity = namedEntity;\r\n        }\r\n      }\r\n\r\n      diff = 1 + end - start;\r\n      if (!terminated && !nonTerminated) ;else if (!characters) {\r\n        // An empty (possible) entity is valid, unless it’s numeric (thus an\r\n        // ampersand followed by an octothorp).\r\n        if (type !== name) {\r\n          warning(numericEmpty, diff);\r\n        }\r\n      } else if (type === name) {\r\n        // An ampersand followed by anything unknown, and not terminated, is\r\n        // invalid.\r\n        if (terminated && !entity) {\r\n          warning(namedUnknown, 1);\r\n        } else {\r\n          // If theres something after an entity name which is not known, cap\r\n          // the reference.\r\n          if (entityCharacters !== characters) {\r\n            end = begin + entityCharacters.length;\r\n            diff = 1 + end - begin;\r\n            terminated = false;\r\n          } // If the reference is not terminated, warn.\r\n\r\n\r\n          if (!terminated) {\r\n            reason = entityCharacters ? namedNotTerminated : namedEmpty;\r\n\r\n            if (settings.attribute) {\r\n              following = value.charCodeAt(end);\r\n\r\n              if (following === equalsTo) {\r\n                warning(reason, diff);\r\n                entity = null;\r\n              } else if (alphanumerical(following)) {\r\n                entity = null;\r\n              } else {\r\n                warning(reason, diff);\r\n              }\r\n            } else {\r\n              warning(reason, diff);\r\n            }\r\n          }\r\n        }\r\n\r\n        reference = entity;\r\n      } else {\r\n        if (!terminated) {\r\n          // All non-terminated numeric entities are not rendered, and trigger a\r\n          // warning.\r\n          warning(numericNotTerminated, diff);\r\n        } // When terminated and number, parse as either hexadecimal or decimal.\r\n\r\n\r\n        reference = parseInt(characters, bases[type]); // Trigger a warning when the parsed number is prohibited, and replace\r\n        // with replacement character.\r\n\r\n        if (prohibited(reference)) {\r\n          warning(numericProhibited, diff);\r\n          reference = fromCharCode(replacementCharacter);\r\n        } else if (reference in invalid) {\r\n          // Trigger a warning when the parsed number is disallowed, and replace\r\n          // by an alternative.\r\n          warning(numericDisallowed, diff);\r\n          reference = invalid[reference];\r\n        } else {\r\n          // Parse the number.\r\n          output = ''; // Trigger a warning when the parsed number should not be used.\r\n\r\n          if (disallowed(reference)) {\r\n            warning(numericDisallowed, diff);\r\n          } // Stringify the number.\r\n\r\n\r\n          if (reference > 0xffff) {\r\n            reference -= 0x10000;\r\n            output += fromCharCode(reference >>> (10 & 0x3ff) | 0xd800);\r\n            reference = 0xdc00 | reference & 0x3ff;\r\n          }\r\n\r\n          reference = output + fromCharCode(reference);\r\n        }\r\n      } // Found it!\r\n      // First eat the queued characters as normal text, then eat an entity.\r\n\r\n      if (reference) {\r\n        flush();\r\n        prev = now();\r\n        index = end - 1;\r\n        column += end - start + 1;\r\n        result.push(reference);\r\n        next = now();\r\n        next.offset++;\r\n\r\n        if (handleReference) {\r\n          handleReference.call(referenceContext, reference, {\r\n            start: prev,\r\n            end: next\r\n          }, value.slice(start - 1, end));\r\n        }\r\n\r\n        prev = next;\r\n      } else {\r\n        // If we could not find a reference, queue the checked characters (as\r\n        // normal characters), and move the pointer to their end.\r\n        // This is possible because we can be certain neither newlines nor\r\n        // ampersands are included.\r\n        characters = value.slice(start - 1, end);\r\n        queue += characters;\r\n        column += characters.length;\r\n        index = end - 1;\r\n      }\r\n    } else {\r\n      // Handle anything other than an ampersand, including newlines and EOF.\r\n      if (character === 10 // Line feed\r\n      ) {\r\n        line++;\r\n        lines++;\r\n        column = 0;\r\n      }\r\n\r\n      if (character === character) {\r\n        queue += fromCharCode(character);\r\n        column++;\r\n      } else {\r\n        flush();\r\n      }\r\n    }\r\n  } // Return the reduced nodes.\r\n\r\n\r\n  return result.join(''); // Get current position.\r\n\r\n  function now() {\r\n    return {\r\n      line: line,\r\n      column: column,\r\n      offset: index + (pos.offset || 0)\r\n    };\r\n  } // “Throw” a parse-error: a warning.\r\n\r\n\r\n  function parseError(code, offset) {\r\n    var position = now();\r\n    position.column += offset;\r\n    position.offset += offset;\r\n    handleWarning.call(warningContext, messages[code], position, code);\r\n  } // Flush `queue` (normal text).\r\n  // Macro invoked before each entity and at the end of `value`.\r\n  // Does nothing when `queue` is empty.\r\n\r\n\r\n  function flush() {\r\n    if (queue) {\r\n      result.push(queue);\r\n\r\n      if (handleText) {\r\n        handleText.call(textContext, queue, {\r\n          start: prev,\r\n          end: now()\r\n        });\r\n      }\r\n\r\n      queue = '';\r\n    }\r\n  }\r\n} // Check if `character` is outside the permissible unicode range.\r\n\r\n\r\nfunction prohibited(code) {\r\n  return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;\r\n} // Check if `character` is disallowed.\r\n\r\n\r\nfunction disallowed(code) {\r\n  return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;\r\n}\r\n\r\nvar prismCore = {\r\n  exports: {}\r\n};\r\n\r\n(function (module) {\r\n  /// <reference lib=\"WebWorker\"/>\r\n  var _self = typeof window !== 'undefined' ? window // if in browser\r\n  : typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker\r\n  : {} // if in node js\r\n  ;\r\n  /**\r\n   * Prism: Lightweight, robust, elegant syntax highlighting\r\n   *\r\n   * @license MIT <https://opensource.org/licenses/MIT>\r\n   * @author Lea Verou <https://lea.verou.me>\r\n   * @namespace\r\n   * @public\r\n   */\r\n\r\n\r\n  var Prism = function (_self) {\r\n    // Private helper vars\r\n    var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\r\n    var uniqueId = 0; // The grammar object for plaintext\r\n\r\n    var plainTextGrammar = {};\r\n    var _ = {\r\n      /**\r\n       * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\r\n       * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\r\n       * additional languages or plugins yourself.\r\n       *\r\n       * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\r\n       *\r\n       * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\r\n       * empty Prism object into the global scope before loading the Prism script like this:\r\n       *\r\n       * ```js\r\n       * window.Prism = window.Prism || {};\r\n       * Prism.manual = true;\r\n       * // add a new <script> to load Prism's script\r\n       * ```\r\n       *\r\n       * @default false\r\n       * @type {boolean}\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      manual: _self.Prism && _self.Prism.manual,\r\n\r\n      /**\r\n       * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\r\n       * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\r\n       * own worker, you don't want it to do this.\r\n       *\r\n       * By setting this value to `true`, Prism will not add its own listeners to the worker.\r\n       *\r\n       * You obviously have to change this value before Prism executes. To do this, you can add an\r\n       * empty Prism object into the global scope before loading the Prism script like this:\r\n       *\r\n       * ```js\r\n       * window.Prism = window.Prism || {};\r\n       * Prism.disableWorkerMessageHandler = true;\r\n       * // Load Prism's script\r\n       * ```\r\n       *\r\n       * @default false\r\n       * @type {boolean}\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\r\n\r\n      /**\r\n       * A namespace for utility methods.\r\n       *\r\n       * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\r\n       * change or disappear at any time.\r\n       *\r\n       * @namespace\r\n       * @memberof Prism\r\n       */\r\n      util: {\r\n        encode: function encode(tokens) {\r\n          if (tokens instanceof Token) {\r\n            return new Token(tokens.type, encode(tokens.content), tokens.alias);\r\n          } else if (Array.isArray(tokens)) {\r\n            return tokens.map(encode);\r\n          } else {\r\n            return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Returns the name of the type of the given value.\r\n         *\r\n         * @param {any} o\r\n         * @returns {string}\r\n         * @example\r\n         * type(null)      === 'Null'\r\n         * type(undefined) === 'Undefined'\r\n         * type(123)       === 'Number'\r\n         * type('foo')     === 'String'\r\n         * type(true)      === 'Boolean'\r\n         * type([1, 2])    === 'Array'\r\n         * type({})        === 'Object'\r\n         * type(String)    === 'Function'\r\n         * type(/abc+/)    === 'RegExp'\r\n         */\r\n        type: function type(o) {\r\n          return Object.prototype.toString.call(o).slice(8, -1);\r\n        },\r\n\r\n        /**\r\n         * Returns a unique number for the given object. Later calls will still return the same number.\r\n         *\r\n         * @param {Object} obj\r\n         * @returns {number}\r\n         */\r\n        objId: function objId(obj) {\r\n          if (!obj['__id']) {\r\n            Object.defineProperty(obj, '__id', {\r\n              value: ++uniqueId\r\n            });\r\n          }\r\n\r\n          return obj['__id'];\r\n        },\r\n\r\n        /**\r\n         * Creates a deep clone of the given object.\r\n         *\r\n         * The main intended use of this function is to clone language definitions.\r\n         *\r\n         * @param {T} o\r\n         * @param {Record<number, any>} [visited]\r\n         * @returns {T}\r\n         * @template T\r\n         */\r\n        clone: function deepClone(o, visited) {\r\n          visited = visited || {};\r\n          var clone;\r\n          var id;\r\n\r\n          switch (_.util.type(o)) {\r\n            case 'Object':\r\n              id = _.util.objId(o);\r\n\r\n              if (visited[id]) {\r\n                return visited[id];\r\n              }\r\n\r\n              clone =\r\n              /** @type {Record<string, any>} */\r\n              {};\r\n              visited[id] = clone;\r\n\r\n              for (var key in o) {\r\n                if (o.hasOwnProperty(key)) {\r\n                  clone[key] = deepClone(o[key], visited);\r\n                }\r\n              }\r\n\r\n              return (\r\n                /** @type {any} */\r\n                clone\r\n              );\r\n\r\n            case 'Array':\r\n              id = _.util.objId(o);\r\n\r\n              if (visited[id]) {\r\n                return visited[id];\r\n              }\r\n\r\n              clone = [];\r\n              visited[id] = clone;\r\n              /** @type {Array} */\r\n\r\n              /** @type {any} */\r\n\r\n              o.forEach(function (v, i) {\r\n                clone[i] = deepClone(v, visited);\r\n              });\r\n              return (\r\n                /** @type {any} */\r\n                clone\r\n              );\r\n\r\n            default:\r\n              return o;\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\r\n         *\r\n         * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\r\n         *\r\n         * @param {Element} element\r\n         * @returns {string}\r\n         */\r\n        getLanguage: function getLanguage(element) {\r\n          while (element) {\r\n            var m = lang.exec(element.className);\r\n\r\n            if (m) {\r\n              return m[1].toLowerCase();\r\n            }\r\n\r\n            element = element.parentElement;\r\n          }\r\n\r\n          return 'none';\r\n        },\r\n\r\n        /**\r\n         * Sets the Prism `language-xxxx` class of the given element.\r\n         *\r\n         * @param {Element} element\r\n         * @param {string} language\r\n         * @returns {void}\r\n         */\r\n        setLanguage: function setLanguage(element, language) {\r\n          // remove all `language-xxxx` classes\r\n          // (this might leave behind a leading space)\r\n          element.className = element.className.replace(RegExp(lang, 'gi'), ''); // add the new `language-xxxx` class\r\n          // (using `classList` will automatically clean up spaces for us)\r\n\r\n          element.classList.add('language-' + language);\r\n        },\r\n\r\n        /**\r\n         * Returns the script element that is currently executing.\r\n         *\r\n         * This does __not__ work for line script element.\r\n         *\r\n         * @returns {HTMLScriptElement | null}\r\n         */\r\n        currentScript: function currentScript() {\r\n          if (typeof document === 'undefined') {\r\n            return null;\r\n          }\r\n\r\n          if ('currentScript' in document && 1 < 2\r\n          /* hack to trip TS' flow analysis */\r\n          ) {\r\n            return (\r\n              /** @type {any} */\r\n              document.currentScript\r\n            );\r\n          } // IE11 workaround\r\n          // we'll get the src of the current script by parsing IE11's error stack trace\r\n          // this will not work for inline scripts\r\n\r\n\r\n          try {\r\n            throw new Error();\r\n          } catch (err) {\r\n            // Get file src url from stack. Specifically works with the format of stack traces in IE.\r\n            // A stack will look like this:\r\n            //\r\n            // Error\r\n            //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\r\n            //    at Global code (http://localhost/components/prism-core.js:606:1)\r\n            var src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\r\n\r\n            if (src) {\r\n              var scripts = document.getElementsByTagName('script');\r\n\r\n              for (var i in scripts) {\r\n                if (scripts[i].src == src) {\r\n                  return scripts[i];\r\n                }\r\n              }\r\n            }\r\n\r\n            return null;\r\n          }\r\n        },\r\n\r\n        /**\r\n         * Returns whether a given class is active for `element`.\r\n         *\r\n         * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\r\n         * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\r\n         * given class is just the given class with a `no-` prefix.\r\n         *\r\n         * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\r\n         * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\r\n         * ancestors have the given class or the negated version of it, then the default activation will be returned.\r\n         *\r\n         * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\r\n         * version of it, the class is considered active.\r\n         *\r\n         * @param {Element} element\r\n         * @param {string} className\r\n         * @param {boolean} [defaultActivation=false]\r\n         * @returns {boolean}\r\n         */\r\n        isActive: function isActive(element, className, defaultActivation) {\r\n          var no = 'no-' + className;\r\n\r\n          while (element) {\r\n            var classList = element.classList;\r\n\r\n            if (classList.contains(className)) {\r\n              return true;\r\n            }\r\n\r\n            if (classList.contains(no)) {\r\n              return false;\r\n            }\r\n\r\n            element = element.parentElement;\r\n          }\r\n\r\n          return !!defaultActivation;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\r\n       *\r\n       * @namespace\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      languages: {\r\n        /**\r\n         * The grammar for plain, unformatted text.\r\n         */\r\n        plain: plainTextGrammar,\r\n        plaintext: plainTextGrammar,\r\n        text: plainTextGrammar,\r\n        txt: plainTextGrammar,\r\n\r\n        /**\r\n         * Creates a deep copy of the language with the given id and appends the given tokens.\r\n         *\r\n         * If a token in `redef` also appears in the copied language, then the existing token in the copied language\r\n         * will be overwritten at its original position.\r\n         *\r\n         * ## Best practices\r\n         *\r\n         * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\r\n         * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\r\n         * understand the language definition because, normally, the order of tokens matters in Prism grammars.\r\n         *\r\n         * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\r\n         * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\r\n         *\r\n         * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\r\n         * @param {Grammar} redef The new tokens to append.\r\n         * @returns {Grammar} The new language created.\r\n         * @public\r\n         * @example\r\n         * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\r\n         *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\r\n         *     // at its original position\r\n         *     'comment': { ... },\r\n         *     // CSS doesn't have a 'color' token, so this token will be appended\r\n         *     'color': /\\b(?:red|green|blue)\\b/\r\n         * });\r\n         */\r\n        extend: function extend(id, redef) {\r\n          var lang = _.util.clone(_.languages[id]);\r\n\r\n          for (var key in redef) {\r\n            lang[key] = redef[key];\r\n          }\r\n\r\n          return lang;\r\n        },\r\n\r\n        /**\r\n         * Inserts tokens _before_ another token in a language definition or any other grammar.\r\n         *\r\n         * ## Usage\r\n         *\r\n         * This helper method makes it easy to modify existing languages. For example, the CSS language definition\r\n         * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\r\n         * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\r\n         * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\r\n         * this:\r\n         *\r\n         * ```js\r\n         * Prism.languages.markup.style = {\r\n         *     // token\r\n         * };\r\n         * ```\r\n         *\r\n         * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\r\n         * before existing tokens. For the CSS example above, you would use it like this:\r\n         *\r\n         * ```js\r\n         * Prism.languages.insertBefore('markup', 'cdata', {\r\n         *     'style': {\r\n         *         // token\r\n         *     }\r\n         * });\r\n         * ```\r\n         *\r\n         * ## Special cases\r\n         *\r\n         * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\r\n         * will be ignored.\r\n         *\r\n         * This behavior can be used to insert tokens after `before`:\r\n         *\r\n         * ```js\r\n         * Prism.languages.insertBefore('markup', 'comment', {\r\n         *     'comment': Prism.languages.markup.comment,\r\n         *     // tokens after 'comment'\r\n         * });\r\n         * ```\r\n         *\r\n         * ## Limitations\r\n         *\r\n         * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\r\n         * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\r\n         * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\r\n         * deleting properties which is necessary to insert at arbitrary positions.\r\n         *\r\n         * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\r\n         * Instead, it will create a new object and replace all references to the target object with the new one. This\r\n         * can be done without temporarily deleting properties, so the iteration order is well-defined.\r\n         *\r\n         * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\r\n         * you hold the target object in a variable, then the value of the variable will not change.\r\n         *\r\n         * ```js\r\n         * var oldMarkup = Prism.languages.markup;\r\n         * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\r\n         *\r\n         * assert(oldMarkup !== Prism.languages.markup);\r\n         * assert(newMarkup === Prism.languages.markup);\r\n         * ```\r\n         *\r\n         * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\r\n         * object to be modified.\r\n         * @param {string} before The key to insert before.\r\n         * @param {Grammar} insert An object containing the key-value pairs to be inserted.\r\n         * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\r\n         * object to be modified.\r\n         *\r\n         * Defaults to `Prism.languages`.\r\n         * @returns {Grammar} The new grammar object.\r\n         * @public\r\n         */\r\n        insertBefore: function insertBefore(inside, before, insert, root) {\r\n          root = root ||\r\n          /** @type {any} */\r\n          _.languages;\r\n          var grammar = root[inside];\r\n          /** @type {Grammar} */\r\n\r\n          var ret = {};\r\n\r\n          for (var token in grammar) {\r\n            if (grammar.hasOwnProperty(token)) {\r\n              if (token == before) {\r\n                for (var newToken in insert) {\r\n                  if (insert.hasOwnProperty(newToken)) {\r\n                    ret[newToken] = insert[newToken];\r\n                  }\r\n                }\r\n              } // Do not insert token which also occur in insert. See #1525\r\n\r\n\r\n              if (!insert.hasOwnProperty(token)) {\r\n                ret[token] = grammar[token];\r\n              }\r\n            }\r\n          }\r\n\r\n          var old = root[inside];\r\n          root[inside] = ret; // Update references in other language definitions\r\n\r\n          _.languages.DFS(_.languages, function (key, value) {\r\n            if (value === old && key != inside) {\r\n              this[key] = ret;\r\n            }\r\n          });\r\n\r\n          return ret;\r\n        },\r\n        // Traverse a language definition with Depth First Search\r\n        DFS: function DFS(o, callback, type, visited) {\r\n          visited = visited || {};\r\n          var objId = _.util.objId;\r\n\r\n          for (var i in o) {\r\n            if (o.hasOwnProperty(i)) {\r\n              callback.call(o, i, o[i], type || i);\r\n              var property = o[i];\r\n\r\n              var propertyType = _.util.type(property);\r\n\r\n              if (propertyType === 'Object' && !visited[objId(property)]) {\r\n                visited[objId(property)] = true;\r\n                DFS(property, callback, null, visited);\r\n              } else if (propertyType === 'Array' && !visited[objId(property)]) {\r\n                visited[objId(property)] = true;\r\n                DFS(property, callback, i, visited);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      plugins: {},\r\n\r\n      /**\r\n       * This is the most high-level function in Prism’s API.\r\n       * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\r\n       * each one of them.\r\n       *\r\n       * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\r\n       *\r\n       * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\r\n       * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      highlightAll: function highlightAll(async, callback) {\r\n        _.highlightAllUnder(document, async, callback);\r\n      },\r\n\r\n      /**\r\n       * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\r\n       * {@link Prism.highlightElement} on each one of them.\r\n       *\r\n       * The following hooks will be run:\r\n       * 1. `before-highlightall`\r\n       * 2. `before-all-elements-highlight`\r\n       * 3. All hooks of {@link Prism.highlightElement} for each element.\r\n       *\r\n       * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\r\n       * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\r\n       * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      highlightAllUnder: function highlightAllUnder(container, async, callback) {\r\n        var env = {\r\n          callback: callback,\r\n          container: container,\r\n          selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\r\n        };\r\n\r\n        _.hooks.run('before-highlightall', env);\r\n\r\n        env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\r\n\r\n        _.hooks.run('before-all-elements-highlight', env);\r\n\r\n        for (var i = 0, element; element = env.elements[i++];) {\r\n          _.highlightElement(element, async === true, env.callback);\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Highlights the code inside a single element.\r\n       *\r\n       * The following hooks will be run:\r\n       * 1. `before-sanity-check`\r\n       * 2. `before-highlight`\r\n       * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\r\n       * 4. `before-insert`\r\n       * 5. `after-highlight`\r\n       * 6. `complete`\r\n       *\r\n       * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\r\n       * the element's language.\r\n       *\r\n       * @param {Element} element The element containing the code.\r\n       * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\r\n       * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\r\n       * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\r\n       * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\r\n       *\r\n       * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\r\n       * asynchronous highlighting to work. You can build your own bundle on the\r\n       * [Download page](https://prismjs.com/download.html).\r\n       * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\r\n       * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      highlightElement: function highlightElement(element, async, callback) {\r\n        // Find language\r\n        var language = _.util.getLanguage(element);\r\n\r\n        var grammar = _.languages[language]; // Set language on the element, if not present\r\n\r\n        _.util.setLanguage(element, language); // Set language on the parent, for styling\r\n\r\n\r\n        var parent = element.parentElement;\r\n\r\n        if (parent && parent.nodeName.toLowerCase() === 'pre') {\r\n          _.util.setLanguage(parent, language);\r\n        }\r\n\r\n        var code = element.textContent;\r\n        var env = {\r\n          element: element,\r\n          language: language,\r\n          grammar: grammar,\r\n          code: code\r\n        };\r\n\r\n        function insertHighlightedCode(highlightedCode) {\r\n          env.highlightedCode = highlightedCode;\r\n\r\n          _.hooks.run('before-insert', env);\r\n\r\n          env.element.innerHTML = env.highlightedCode;\r\n\r\n          _.hooks.run('after-highlight', env);\r\n\r\n          _.hooks.run('complete', env);\r\n\r\n          callback && callback.call(env.element);\r\n        }\r\n\r\n        _.hooks.run('before-sanity-check', env); // plugins may change/add the parent/element\r\n\r\n\r\n        parent = env.element.parentElement;\r\n\r\n        if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\r\n          parent.setAttribute('tabindex', '0');\r\n        }\r\n\r\n        if (!env.code) {\r\n          _.hooks.run('complete', env);\r\n\r\n          callback && callback.call(env.element);\r\n          return;\r\n        }\r\n\r\n        _.hooks.run('before-highlight', env);\r\n\r\n        if (!env.grammar) {\r\n          insertHighlightedCode(_.util.encode(env.code));\r\n          return;\r\n        }\r\n\r\n        if (async && _self.Worker) {\r\n          var worker = new Worker(_.filename);\r\n\r\n          worker.onmessage = function (evt) {\r\n            insertHighlightedCode(evt.data);\r\n          };\r\n\r\n          worker.postMessage(JSON.stringify({\r\n            language: env.language,\r\n            code: env.code,\r\n            immediateClose: true\r\n          }));\r\n        } else {\r\n          insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\r\n       * and the language definitions to use, and returns a string with the HTML produced.\r\n       *\r\n       * The following hooks will be run:\r\n       * 1. `before-tokenize`\r\n       * 2. `after-tokenize`\r\n       * 3. `wrap`: On each {@link Token}.\r\n       *\r\n       * @param {string} text A string with the code to be highlighted.\r\n       * @param {Grammar} grammar An object containing the tokens to use.\r\n       *\r\n       * Usually a language definition like `Prism.languages.markup`.\r\n       * @param {string} language The name of the language definition passed to `grammar`.\r\n       * @returns {string} The highlighted HTML.\r\n       * @memberof Prism\r\n       * @public\r\n       * @example\r\n       * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\r\n       */\r\n      highlight: function highlight(text, grammar, language) {\r\n        var env = {\r\n          code: text,\r\n          grammar: grammar,\r\n          language: language\r\n        };\r\n\r\n        _.hooks.run('before-tokenize', env);\r\n\r\n        if (!env.grammar) {\r\n          throw new Error('The language \"' + env.language + '\" has no grammar.');\r\n        }\r\n\r\n        env.tokens = _.tokenize(env.code, env.grammar);\r\n\r\n        _.hooks.run('after-tokenize', env);\r\n\r\n        return Token.stringify(_.util.encode(env.tokens), env.language);\r\n      },\r\n\r\n      /**\r\n       * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\r\n       * and the language definitions to use, and returns an array with the tokenized code.\r\n       *\r\n       * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\r\n       *\r\n       * This method could be useful in other contexts as well, as a very crude parser.\r\n       *\r\n       * @param {string} text A string with the code to be highlighted.\r\n       * @param {Grammar} grammar An object containing the tokens to use.\r\n       *\r\n       * Usually a language definition like `Prism.languages.markup`.\r\n       * @returns {TokenStream} An array of strings and tokens, a token stream.\r\n       * @memberof Prism\r\n       * @public\r\n       * @example\r\n       * let code = `var foo = 0;`;\r\n       * let tokens = Prism.tokenize(code, Prism.languages.javascript);\r\n       * tokens.forEach(token => {\r\n       *     if (token instanceof Prism.Token && token.type === 'number') {\r\n       *         console.log(`Found numeric literal: ${token.content}`);\r\n       *     }\r\n       * });\r\n       */\r\n      tokenize: function tokenize(text, grammar) {\r\n        var rest = grammar.rest;\r\n\r\n        if (rest) {\r\n          for (var token in rest) {\r\n            grammar[token] = rest[token];\r\n          }\r\n\r\n          delete grammar.rest;\r\n        }\r\n\r\n        var tokenList = new LinkedList();\r\n        addAfter(tokenList, tokenList.head, text);\r\n        matchGrammar(text, tokenList, grammar, tokenList.head, 0);\r\n        return toArray(tokenList);\r\n      },\r\n\r\n      /**\r\n       * @namespace\r\n       * @memberof Prism\r\n       * @public\r\n       */\r\n      hooks: {\r\n        all: {},\r\n\r\n        /**\r\n         * Adds the given callback to the list of callbacks for the given hook.\r\n         *\r\n         * The callback will be invoked when the hook it is registered for is run.\r\n         * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\r\n         *\r\n         * One callback function can be registered to multiple hooks and the same hook multiple times.\r\n         *\r\n         * @param {string} name The name of the hook.\r\n         * @param {HookCallback} callback The callback function which is given environment variables.\r\n         * @public\r\n         */\r\n        add: function add(name, callback) {\r\n          var hooks = _.hooks.all;\r\n          hooks[name] = hooks[name] || [];\r\n          hooks[name].push(callback);\r\n        },\r\n\r\n        /**\r\n         * Runs a hook invoking all registered callbacks with the given environment variables.\r\n         *\r\n         * Callbacks will be invoked synchronously and in the order in which they were registered.\r\n         *\r\n         * @param {string} name The name of the hook.\r\n         * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\r\n         * @public\r\n         */\r\n        run: function run(name, env) {\r\n          var callbacks = _.hooks.all[name];\r\n\r\n          if (!callbacks || !callbacks.length) {\r\n            return;\r\n          }\r\n\r\n          for (var i = 0, callback; callback = callbacks[i++];) {\r\n            callback(env);\r\n          }\r\n        }\r\n      },\r\n      Token: Token\r\n    };\r\n    _self.Prism = _; // Typescript note:\r\n    // The following can be used to import the Token type in JSDoc:\r\n    //\r\n    //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\r\n\r\n    /**\r\n     * Creates a new token.\r\n     *\r\n     * @param {string} type See {@link Token#type type}\r\n     * @param {string | TokenStream} content See {@link Token#content content}\r\n     * @param {string|string[]} [alias] The alias(es) of the token.\r\n     * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\r\n     * @class\r\n     * @global\r\n     * @public\r\n     */\r\n\r\n    function Token(type, content, alias, matchedStr) {\r\n      /**\r\n       * The type of the token.\r\n       *\r\n       * This is usually the key of a pattern in a {@link Grammar}.\r\n       *\r\n       * @type {string}\r\n       * @see GrammarToken\r\n       * @public\r\n       */\r\n      this.type = type;\r\n      /**\r\n       * The strings or tokens contained by this token.\r\n       *\r\n       * This will be a token stream if the pattern matched also defined an `inside` grammar.\r\n       *\r\n       * @type {string | TokenStream}\r\n       * @public\r\n       */\r\n\r\n      this.content = content;\r\n      /**\r\n       * The alias(es) of the token.\r\n       *\r\n       * @type {string|string[]}\r\n       * @see GrammarToken\r\n       * @public\r\n       */\r\n\r\n      this.alias = alias; // Copy of the full string this token was created from\r\n\r\n      this.length = (matchedStr || '').length | 0;\r\n    }\r\n    /**\r\n     * A token stream is an array of strings and {@link Token Token} objects.\r\n     *\r\n     * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\r\n     * them.\r\n     *\r\n     * 1. No adjacent strings.\r\n     * 2. No empty strings.\r\n     *\r\n     *    The only exception here is the token stream that only contains the empty string and nothing else.\r\n     *\r\n     * @typedef {Array<string | Token>} TokenStream\r\n     * @global\r\n     * @public\r\n     */\r\n\r\n    /**\r\n     * Converts the given token or token stream to an HTML representation.\r\n     *\r\n     * The following hooks will be run:\r\n     * 1. `wrap`: On each {@link Token}.\r\n     *\r\n     * @param {string | Token | TokenStream} o The token or token stream to be converted.\r\n     * @param {string} language The name of current language.\r\n     * @returns {string} The HTML representation of the token or token stream.\r\n     * @memberof Token\r\n     * @static\r\n     */\r\n\r\n\r\n    Token.stringify = function stringify(o, language) {\r\n      if (typeof o == 'string') {\r\n        return o;\r\n      }\r\n\r\n      if (Array.isArray(o)) {\r\n        var s = '';\r\n        o.forEach(function (e) {\r\n          s += stringify(e, language);\r\n        });\r\n        return s;\r\n      }\r\n\r\n      var env = {\r\n        type: o.type,\r\n        content: stringify(o.content, language),\r\n        tag: 'span',\r\n        classes: ['token', o.type],\r\n        attributes: {},\r\n        language: language\r\n      };\r\n      var aliases = o.alias;\r\n\r\n      if (aliases) {\r\n        if (Array.isArray(aliases)) {\r\n          Array.prototype.push.apply(env.classes, aliases);\r\n        } else {\r\n          env.classes.push(aliases);\r\n        }\r\n      }\r\n\r\n      _.hooks.run('wrap', env);\r\n\r\n      var attributes = '';\r\n\r\n      for (var name in env.attributes) {\r\n        attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\r\n      }\r\n\r\n      return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\r\n    };\r\n    /**\r\n     * @param {RegExp} pattern\r\n     * @param {number} pos\r\n     * @param {string} text\r\n     * @param {boolean} lookbehind\r\n     * @returns {RegExpExecArray | null}\r\n     */\r\n\r\n\r\n    function matchPattern(pattern, pos, text, lookbehind) {\r\n      pattern.lastIndex = pos;\r\n      var match = pattern.exec(text);\r\n\r\n      if (match && lookbehind && match[1]) {\r\n        // change the match to remove the text matched by the Prism lookbehind group\r\n        var lookbehindLength = match[1].length;\r\n        match.index += lookbehindLength;\r\n        match[0] = match[0].slice(lookbehindLength);\r\n      }\r\n\r\n      return match;\r\n    }\r\n    /**\r\n     * @param {string} text\r\n     * @param {LinkedList<string | Token>} tokenList\r\n     * @param {any} grammar\r\n     * @param {LinkedListNode<string | Token>} startNode\r\n     * @param {number} startPos\r\n     * @param {RematchOptions} [rematch]\r\n     * @returns {void}\r\n     * @private\r\n     *\r\n     * @typedef RematchOptions\r\n     * @property {string} cause\r\n     * @property {number} reach\r\n     */\r\n\r\n\r\n    function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\r\n      for (var token in grammar) {\r\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\r\n          continue;\r\n        }\r\n\r\n        var patterns = grammar[token];\r\n        patterns = Array.isArray(patterns) ? patterns : [patterns];\r\n\r\n        for (var j = 0; j < patterns.length; ++j) {\r\n          if (rematch && rematch.cause == token + ',' + j) {\r\n            return;\r\n          }\r\n\r\n          var patternObj = patterns[j];\r\n          var inside = patternObj.inside;\r\n          var lookbehind = !!patternObj.lookbehind;\r\n          var greedy = !!patternObj.greedy;\r\n          var alias = patternObj.alias;\r\n\r\n          if (greedy && !patternObj.pattern.global) {\r\n            // Without the global flag, lastIndex won't work\r\n            var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\r\n            patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\r\n          }\r\n          /** @type {RegExp} */\r\n\r\n\r\n          var pattern = patternObj.pattern || patternObj;\r\n\r\n          for ( // iterate the token list and keep track of the current token/string position\r\n          var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\r\n            if (rematch && pos >= rematch.reach) {\r\n              break;\r\n            }\r\n\r\n            var str = currentNode.value;\r\n\r\n            if (tokenList.length > text.length) {\r\n              // Something went terribly wrong, ABORT, ABORT!\r\n              return;\r\n            }\r\n\r\n            if (str instanceof Token) {\r\n              continue;\r\n            }\r\n\r\n            var removeCount = 1; // this is the to parameter of removeBetween\r\n\r\n            var match;\r\n\r\n            if (greedy) {\r\n              match = matchPattern(pattern, pos, text, lookbehind);\r\n\r\n              if (!match || match.index >= text.length) {\r\n                break;\r\n              }\r\n\r\n              var from = match.index;\r\n              var to = match.index + match[0].length;\r\n              var p = pos; // find the node that contains the match\r\n\r\n              p += currentNode.value.length;\r\n\r\n              while (from >= p) {\r\n                currentNode = currentNode.next;\r\n                p += currentNode.value.length;\r\n              } // adjust pos (and p)\r\n\r\n\r\n              p -= currentNode.value.length;\r\n              pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid\r\n\r\n              if (currentNode.value instanceof Token) {\r\n                continue;\r\n              } // find the last node which is affected by this match\r\n\r\n\r\n              for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\r\n                removeCount++;\r\n                p += k.value.length;\r\n              }\r\n\r\n              removeCount--; // replace with the new match\r\n\r\n              str = text.slice(pos, p);\r\n              match.index -= pos;\r\n            } else {\r\n              match = matchPattern(pattern, 0, str, lookbehind);\r\n\r\n              if (!match) {\r\n                continue;\r\n              }\r\n            } // eslint-disable-next-line no-redeclare\r\n\r\n\r\n            var from = match.index;\r\n            var matchStr = match[0];\r\n            var before = str.slice(0, from);\r\n            var after = str.slice(from + matchStr.length);\r\n            var reach = pos + str.length;\r\n\r\n            if (rematch && reach > rematch.reach) {\r\n              rematch.reach = reach;\r\n            }\r\n\r\n            var removeFrom = currentNode.prev;\r\n\r\n            if (before) {\r\n              removeFrom = addAfter(tokenList, removeFrom, before);\r\n              pos += before.length;\r\n            }\r\n\r\n            removeRange(tokenList, removeFrom, removeCount);\r\n            var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\r\n            currentNode = addAfter(tokenList, removeFrom, wrapped);\r\n\r\n            if (after) {\r\n              addAfter(tokenList, currentNode, after);\r\n            }\r\n\r\n            if (removeCount > 1) {\r\n              // at least one Token object was removed, so we have to do some rematching\r\n              // this can only happen if the current pattern is greedy\r\n\r\n              /** @type {RematchOptions} */\r\n              var nestedRematch = {\r\n                cause: token + ',' + j,\r\n                reach: reach\r\n              };\r\n              matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching\r\n\r\n              if (rematch && nestedRematch.reach > rematch.reach) {\r\n                rematch.reach = nestedRematch.reach;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * @typedef LinkedListNode\r\n     * @property {T} value\r\n     * @property {LinkedListNode<T> | null} prev The previous node.\r\n     * @property {LinkedListNode<T> | null} next The next node.\r\n     * @template T\r\n     * @private\r\n     */\r\n\r\n    /**\r\n     * @template T\r\n     * @private\r\n     */\r\n\r\n\r\n    function LinkedList() {\r\n      /** @type {LinkedListNode<T>} */\r\n      var head = {\r\n        value: null,\r\n        prev: null,\r\n        next: null\r\n      };\r\n      /** @type {LinkedListNode<T>} */\r\n\r\n      var tail = {\r\n        value: null,\r\n        prev: head,\r\n        next: null\r\n      };\r\n      head.next = tail;\r\n      /** @type {LinkedListNode<T>} */\r\n\r\n      this.head = head;\r\n      /** @type {LinkedListNode<T>} */\r\n\r\n      this.tail = tail;\r\n      this.length = 0;\r\n    }\r\n    /**\r\n     * Adds a new node with the given value to the list.\r\n     *\r\n     * @param {LinkedList<T>} list\r\n     * @param {LinkedListNode<T>} node\r\n     * @param {T} value\r\n     * @returns {LinkedListNode<T>} The added node.\r\n     * @template T\r\n     */\r\n\r\n\r\n    function addAfter(list, node, value) {\r\n      // assumes that node != list.tail && values.length >= 0\r\n      var next = node.next;\r\n      var newNode = {\r\n        value: value,\r\n        prev: node,\r\n        next: next\r\n      };\r\n      node.next = newNode;\r\n      next.prev = newNode;\r\n      list.length++;\r\n      return newNode;\r\n    }\r\n    /**\r\n     * Removes `count` nodes after the given node. The given node will not be removed.\r\n     *\r\n     * @param {LinkedList<T>} list\r\n     * @param {LinkedListNode<T>} node\r\n     * @param {number} count\r\n     * @template T\r\n     */\r\n\r\n\r\n    function removeRange(list, node, count) {\r\n      var next = node.next;\r\n\r\n      for (var i = 0; i < count && next !== list.tail; i++) {\r\n        next = next.next;\r\n      }\r\n\r\n      node.next = next;\r\n      next.prev = node;\r\n      list.length -= i;\r\n    }\r\n    /**\r\n     * @param {LinkedList<T>} list\r\n     * @returns {T[]}\r\n     * @template T\r\n     */\r\n\r\n\r\n    function toArray(list) {\r\n      var array = [];\r\n      var node = list.head.next;\r\n\r\n      while (node !== list.tail) {\r\n        array.push(node.value);\r\n        node = node.next;\r\n      }\r\n\r\n      return array;\r\n    }\r\n\r\n    if (!_self.document) {\r\n      if (!_self.addEventListener) {\r\n        // in Node.js\r\n        return _;\r\n      }\r\n\r\n      if (!_.disableWorkerMessageHandler) {\r\n        // In worker\r\n        _self.addEventListener('message', function (evt) {\r\n          var message = JSON.parse(evt.data);\r\n          var lang = message.language;\r\n          var code = message.code;\r\n          var immediateClose = message.immediateClose;\r\n\r\n          _self.postMessage(_.highlight(code, _.languages[lang], lang));\r\n\r\n          if (immediateClose) {\r\n            _self.close();\r\n          }\r\n        }, false);\r\n      }\r\n\r\n      return _;\r\n    } // Get current script and highlight\r\n\r\n\r\n    var script = _.util.currentScript();\r\n\r\n    if (script) {\r\n      _.filename = script.src;\r\n\r\n      if (script.hasAttribute('data-manual')) {\r\n        _.manual = true;\r\n      }\r\n    }\r\n\r\n    function highlightAutomaticallyCallback() {\r\n      if (!_.manual) {\r\n        _.highlightAll();\r\n      }\r\n    }\r\n\r\n    if (!_.manual) {\r\n      // If the document state is \"loading\", then we'll use DOMContentLoaded.\r\n      // If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\r\n      // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\r\n      // might take longer one animation frame to execute which can create a race condition where only some plugins have\r\n      // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\r\n      // See https://github.com/PrismJS/prism/issues/2102\r\n      var readyState = document.readyState;\r\n\r\n      if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\r\n        document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\r\n      } else {\r\n        if (window.requestAnimationFrame) {\r\n          window.requestAnimationFrame(highlightAutomaticallyCallback);\r\n        } else {\r\n          window.setTimeout(highlightAutomaticallyCallback, 16);\r\n        }\r\n      }\r\n    }\r\n\r\n    return _;\r\n  }(_self);\r\n\r\n  if (module.exports) {\r\n    module.exports = Prism;\r\n  } // hack for components to work correctly in node.js\r\n\r\n\r\n  if (typeof commonjsGlobal !== 'undefined') {\r\n    commonjsGlobal.Prism = Prism;\r\n  } // some additional documentation/types\r\n\r\n  /**\r\n   * The expansion of a simple `RegExp` literal to support additional properties.\r\n   *\r\n   * @typedef GrammarToken\r\n   * @property {RegExp} pattern The regular expression of the token.\r\n   * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\r\n   * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\r\n   * @property {boolean} [greedy=false] Whether the token is greedy.\r\n   * @property {string|string[]} [alias] An optional alias or list of aliases.\r\n   * @property {Grammar} [inside] The nested grammar of this token.\r\n   *\r\n   * The `inside` grammar will be used to tokenize the text value of each token of this kind.\r\n   *\r\n   * This can be used to make nested and even recursive language definitions.\r\n   *\r\n   * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\r\n   * each another.\r\n   * @global\r\n   * @public\r\n   */\r\n\r\n  /**\r\n   * @typedef Grammar\r\n   * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\r\n   * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\r\n   * @global\r\n   * @public\r\n   */\r\n\r\n  /**\r\n   * A function which will invoked after an element was successfully highlighted.\r\n   *\r\n   * @callback HighlightCallback\r\n   * @param {Element} element The element successfully highlighted.\r\n   * @returns {void}\r\n   * @global\r\n   * @public\r\n   */\r\n\r\n  /**\r\n   * @callback HookCallback\r\n   * @param {Object<string, any>} env The environment variables of the hook.\r\n   * @returns {void}\r\n   * @global\r\n   * @public\r\n   */\r\n\r\n})(prismCore);\r\n\r\nvar clike_1 = clike$1;\r\nclike$1.displayName = 'clike';\r\nclike$1.aliases = [];\r\n\r\nfunction clike$1(Prism) {\r\n  Prism.languages.clike = {\r\n    comment: [{\r\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\r\n      lookbehind: true,\r\n      greedy: true\r\n    }, {\r\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\r\n      lookbehind: true,\r\n      greedy: true\r\n    }],\r\n    string: {\r\n      pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\r\n      greedy: true\r\n    },\r\n    'class-name': {\r\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\r\n      lookbehind: true,\r\n      inside: {\r\n        punctuation: /[.\\\\]/\r\n      }\r\n    },\r\n    keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\r\n    boolean: /\\b(?:false|true)\\b/,\r\n    function: /\\b\\w+(?=\\()/,\r\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\r\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\r\n    punctuation: /[{}[\\];(),.:]/\r\n  };\r\n}\r\n\r\nvar javascript_1 = javascript;\r\njavascript.displayName = 'javascript';\r\njavascript.aliases = ['js'];\r\n\r\nfunction javascript(Prism) {\r\n  Prism.languages.javascript = Prism.languages.extend('clike', {\r\n    'class-name': [Prism.languages.clike['class-name'], {\r\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\r\n      lookbehind: true\r\n    }],\r\n    keyword: [{\r\n      pattern: /((?:^|\\})\\s*)catch\\b/,\r\n      lookbehind: true\r\n    }, {\r\n      pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\r\n      lookbehind: true\r\n    }],\r\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\r\n    function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\r\n    number: {\r\n      pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\r\n      /NaN|Infinity/.source + '|' + // binary integer\r\n      /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\r\n      /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\r\n      /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\r\n      /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\r\n      /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\r\n      lookbehind: true\r\n    },\r\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\r\n  });\r\n  Prism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\r\n  Prism.languages.insertBefore('javascript', 'keyword', {\r\n    regex: {\r\n      // eslint-disable-next-line regexp/no-dupe-characters-character-class\r\n      pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      inside: {\r\n        'regex-source': {\r\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\r\n          lookbehind: true,\r\n          alias: 'language-regex',\r\n          inside: Prism.languages.regex\r\n        },\r\n        'regex-delimiter': /^\\/|\\/$/,\r\n        'regex-flags': /^[a-z]+$/\r\n      }\r\n    },\r\n    // This must be declared before keyword because we use \"function\" inside the look-forward\r\n    'function-variable': {\r\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\r\n      alias: 'function'\r\n    },\r\n    parameter: [{\r\n      pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\r\n      lookbehind: true,\r\n      inside: Prism.languages.javascript\r\n    }, {\r\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\r\n      lookbehind: true,\r\n      inside: Prism.languages.javascript\r\n    }, {\r\n      pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\r\n      lookbehind: true,\r\n      inside: Prism.languages.javascript\r\n    }, {\r\n      pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\r\n      lookbehind: true,\r\n      inside: Prism.languages.javascript\r\n    }],\r\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\r\n  });\r\n  Prism.languages.insertBefore('javascript', 'string', {\r\n    hashbang: {\r\n      pattern: /^#!.*/,\r\n      greedy: true,\r\n      alias: 'comment'\r\n    },\r\n    'template-string': {\r\n      pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\r\n      greedy: true,\r\n      inside: {\r\n        'template-punctuation': {\r\n          pattern: /^`|`$/,\r\n          alias: 'string'\r\n        },\r\n        interpolation: {\r\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\r\n          lookbehind: true,\r\n          inside: {\r\n            'interpolation-punctuation': {\r\n              pattern: /^\\$\\{|\\}$/,\r\n              alias: 'punctuation'\r\n            },\r\n            rest: Prism.languages.javascript\r\n          }\r\n        },\r\n        string: /[\\s\\S]+/\r\n      }\r\n    },\r\n    'string-property': {\r\n      pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\r\n      lookbehind: true,\r\n      greedy: true,\r\n      alias: 'property'\r\n    }\r\n  });\r\n  Prism.languages.insertBefore('javascript', 'operator', {\r\n    'literal-property': {\r\n      pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\r\n      lookbehind: true,\r\n      alias: 'property'\r\n    }\r\n  });\r\n\r\n  if (Prism.languages.markup) {\r\n    Prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\r\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\r\n\r\n    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\r\n  }\r\n\r\n  Prism.languages.js = Prism.languages.javascript;\r\n}\r\n/* global window, self */\r\n// istanbul ignore next - Don't allow Prism to run on page load in browser or\r\n// to start messaging from workers.\r\n\r\n\r\nvar ctx = (typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) === 'object' ? globalThis : (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === 'object' ? self : (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === 'object' ? window : _typeof(commonjsGlobal) === 'object' ? commonjsGlobal : {};\r\nvar restore = capture();\r\nctx.Prism = {\r\n  manual: true,\r\n  disableWorkerMessageHandler: true\r\n}; // Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\r\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\r\n\r\nvar h = hastscript;\r\nvar decode = parseEntities_1;\r\nvar Prism = prismCore.exports;\r\nvar markup = markup_1;\r\nvar css = css_1;\r\nvar clike = clike_1;\r\nvar js = javascript_1;\r\nrestore();\r\nvar own = {}.hasOwnProperty; // Inherit.\r\n\r\nfunction Refractor() {}\r\n\r\nRefractor.prototype = Prism; // Construct.\r\n\r\nvar refract = new Refractor(); // Expose.\r\n\r\nvar core = refract; // Create.\r\n\r\nrefract.highlight = highlight;\r\nrefract.register = register;\r\nrefract.alias = alias;\r\nrefract.registered = registered;\r\nrefract.listLanguages = listLanguages; // Register bundled grammars.\r\n\r\nregister(markup);\r\nregister(css);\r\nregister(clike);\r\nregister(js);\r\nrefract.util.encode = encode;\r\nrefract.Token.stringify = stringify;\r\n\r\nfunction register(grammar) {\r\n  if (typeof grammar !== 'function' || !grammar.displayName) {\r\n    throw new Error('Expected `function` for `grammar`, got `' + grammar + '`');\r\n  } // Do not duplicate registrations.\r\n\r\n\r\n  if (refract.languages[grammar.displayName] === undefined) {\r\n    grammar(refract);\r\n  }\r\n}\r\n\r\nfunction alias(name, alias) {\r\n  var languages = refract.languages;\r\n  var map = name;\r\n  var key;\r\n  var list;\r\n  var length;\r\n  var index;\r\n\r\n  if (alias) {\r\n    map = {};\r\n    map[name] = alias;\r\n  }\r\n\r\n  for (key in map) {\r\n    list = map[key];\r\n    list = typeof list === 'string' ? [list] : list;\r\n    length = list.length;\r\n    index = -1;\r\n\r\n    while (++index < length) {\r\n      languages[list[index]] = languages[key];\r\n    }\r\n  }\r\n}\r\n\r\nfunction highlight(value, name) {\r\n  var sup = Prism.highlight;\r\n  var grammar;\r\n\r\n  if (typeof value !== 'string') {\r\n    throw new Error('Expected `string` for `value`, got `' + value + '`');\r\n  } // `name` is a grammar object.\r\n\r\n\r\n  if (refract.util.type(name) === 'Object') {\r\n    grammar = name;\r\n    name = null;\r\n  } else {\r\n    if (typeof name !== 'string') {\r\n      throw new Error('Expected `string` for `name`, got `' + name + '`');\r\n    }\r\n\r\n    if (own.call(refract.languages, name)) {\r\n      grammar = refract.languages[name];\r\n    } else {\r\n      throw new Error('Unknown language: `' + name + '` is not registered');\r\n    }\r\n  }\r\n\r\n  return sup.call(this, value, grammar, name);\r\n}\r\n\r\nfunction registered(language) {\r\n  if (typeof language !== 'string') {\r\n    throw new Error('Expected `string` for `language`, got `' + language + '`');\r\n  }\r\n\r\n  return own.call(refract.languages, language);\r\n}\r\n\r\nfunction listLanguages() {\r\n  var languages = refract.languages;\r\n  var list = [];\r\n  var language;\r\n\r\n  for (language in languages) {\r\n    if (own.call(languages, language) && _typeof(languages[language]) === 'object') {\r\n      list.push(language);\r\n    }\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nfunction stringify(value, language, parent) {\r\n  var env;\r\n\r\n  if (typeof value === 'string') {\r\n    return {\r\n      type: 'text',\r\n      value: value\r\n    };\r\n  }\r\n\r\n  if (refract.util.type(value) === 'Array') {\r\n    return stringifyAll(value, language);\r\n  }\r\n\r\n  env = {\r\n    type: value.type,\r\n    content: refract.Token.stringify(value.content, language, parent),\r\n    tag: 'span',\r\n    classes: ['token', value.type],\r\n    attributes: {},\r\n    language: language,\r\n    parent: parent\r\n  };\r\n\r\n  if (value.alias) {\r\n    env.classes = env.classes.concat(value.alias);\r\n  }\r\n\r\n  refract.hooks.run('wrap', env);\r\n  return h(env.tag + '.' + env.classes.join('.'), attributes(env.attributes), env.content);\r\n}\r\n\r\nfunction stringifyAll(values, language) {\r\n  var result = [];\r\n  var length = values.length;\r\n  var index = -1;\r\n  var value;\r\n\r\n  while (++index < length) {\r\n    value = values[index];\r\n\r\n    if (value !== '' && value !== null && value !== undefined) {\r\n      result.push(value);\r\n    }\r\n  }\r\n\r\n  index = -1;\r\n  length = result.length;\r\n\r\n  while (++index < length) {\r\n    value = result[index];\r\n    result[index] = refract.Token.stringify(value, language, result);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction encode(tokens) {\r\n  return tokens;\r\n}\r\n\r\nfunction attributes(attrs) {\r\n  var key;\r\n\r\n  for (key in attrs) {\r\n    attrs[key] = decode(attrs[key]);\r\n  }\r\n\r\n  return attrs;\r\n}\r\n\r\nfunction capture() {\r\n  var defined = ('Prism' in ctx);\r\n  /* istanbul ignore next */\r\n\r\n  var current = defined ? ctx.Prism : undefined;\r\n  return restore;\r\n\r\n  function restore() {\r\n    /* istanbul ignore else - Clean leaks after Prism. */\r\n    if (defined) {\r\n      ctx.Prism = current;\r\n    } else {\r\n      delete ctx.Prism;\r\n    }\r\n\r\n    defined = undefined;\r\n    current = undefined;\r\n  }\r\n}\r\n\r\nvar SyntaxHighlighter$1 = highlight$1(core, {});\r\n\r\nSyntaxHighlighter$1.registerLanguage = function (_, language) {\r\n  return core.register(language);\r\n};\r\n\r\nvar ReactSyntaxHighlighter = SyntaxHighlighter$1;\r\nvar navigator = window_1.navigator,\r\n    document$1 = window_1.document,\r\n    globalWindow = window_1.window;\r\nReactSyntaxHighlighter.registerLanguage('jsextra', jsExtras$1);\r\nReactSyntaxHighlighter.registerLanguage('jsx', jsx$1);\r\nReactSyntaxHighlighter.registerLanguage('json', json$1);\r\nReactSyntaxHighlighter.registerLanguage('yml', yaml$1);\r\nReactSyntaxHighlighter.registerLanguage('md', markdown$1);\r\nReactSyntaxHighlighter.registerLanguage('bash', bash$1);\r\nReactSyntaxHighlighter.registerLanguage('css', css$2);\r\nReactSyntaxHighlighter.registerLanguage('html', markup$2);\r\nReactSyntaxHighlighter.registerLanguage('tsx', tsx$1);\r\nReactSyntaxHighlighter.registerLanguage('typescript', typescript$1);\r\nReactSyntaxHighlighter.registerLanguage('graphql', graphql$1);\r\nvar themedSyntax = memoize(2)(function (theme) {\r\n  return Object.entries(theme.code || {}).reduce(function (acc, _ref8) {\r\n    var _ref9 = _slicedToArray(_ref8, 2),\r\n        key = _ref9[0],\r\n        val = _ref9[1];\r\n\r\n    return Object.assign(Object.assign({}, acc), _defineProperty2({}, \"* .\".concat(key), val));\r\n  }, {});\r\n});\r\nvar copyToClipboard = createCopyToClipboardFunction();\r\n\r\nfunction createCopyToClipboardFunction() {\r\n  var _this = this;\r\n\r\n  if (navigator === null || navigator === void 0 ? void 0 : navigator.clipboard) {\r\n    return function (text) {\r\n      return navigator.clipboard.writeText(text);\r\n    };\r\n  }\r\n\r\n  return function (text) {\r\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\r\n      var tmp, focus;\r\n      return regeneratorRuntime.wrap(function _callee$(_context) {\r\n        while (1) {\r\n          switch (_context.prev = _context.next) {\r\n            case 0:\r\n              tmp = document$1.createElement('TEXTAREA');\r\n              focus = document$1.activeElement;\r\n              tmp.value = text;\r\n              document$1.body.appendChild(tmp);\r\n              tmp.select();\r\n              document$1.execCommand('copy');\r\n              document$1.body.removeChild(tmp);\r\n              focus.focus();\r\n\r\n            case 8:\r\n            case \"end\":\r\n              return _context.stop();\r\n          }\r\n        }\r\n      }, _callee);\r\n    }));\r\n  };\r\n}\r\n\r\nvar Wrapper = styled.div(function (_ref10) {\r\n  var theme = _ref10.theme;\r\n  return {\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    color: theme.color.defaultText\r\n  };\r\n}, function (_ref11) {\r\n  var theme = _ref11.theme,\r\n      bordered = _ref11.bordered;\r\n  return bordered ? {\r\n    border: \"1px solid \".concat(theme.appBorderColor),\r\n    borderRadius: theme.borderRadius,\r\n    background: theme.background.content\r\n  } : {};\r\n});\r\nvar Scroller = styled(function (_ref12) {\r\n  var children = _ref12.children,\r\n      className = _ref12.className;\r\n  return React__default.createElement(ScrollArea, {\r\n    horizontal: true,\r\n    vertical: true,\r\n    className: className\r\n  }, children);\r\n})({\r\n  position: 'relative'\r\n}, function (_ref13) {\r\n  var theme = _ref13.theme;\r\n  return themedSyntax(theme);\r\n});\r\nvar Pre = styled.pre(function (_ref14) {\r\n  var theme = _ref14.theme,\r\n      padded = _ref14.padded;\r\n  return {\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n    margin: 0,\r\n    padding: padded ? theme.layoutMargin : 0\r\n  };\r\n});\r\n/*\r\nWe can't use `code` since PrismJS races for it.\r\nSee https://github.com/storybookjs/storybook/issues/18090\r\n */\r\n\r\nvar Code = styled.div(function (_ref15) {\r\n  var theme = _ref15.theme;\r\n  return {\r\n    flex: 1,\r\n    paddingLeft: 2,\r\n    paddingRight: theme.layoutMargin,\r\n    opacity: 1\r\n  };\r\n}); // copied from @types/react-syntax-highlighter/index.d.ts\r\n\r\nvar SyntaxHighlighter = function SyntaxHighlighter(_a) {\r\n  var children = _a.children,\r\n      _a$language = _a.language,\r\n      language = _a$language === void 0 ? 'jsx' : _a$language,\r\n      _a$copyable = _a.copyable,\r\n      copyable = _a$copyable === void 0 ? false : _a$copyable,\r\n      _a$bordered = _a.bordered,\r\n      bordered = _a$bordered === void 0 ? false : _a$bordered,\r\n      _a$padded = _a.padded,\r\n      padded = _a$padded === void 0 ? false : _a$padded,\r\n      _a$format = _a.format,\r\n      format = _a$format === void 0 ? true : _a$format,\r\n      _a$formatter = _a.formatter,\r\n      formatter = _a$formatter === void 0 ? null : _a$formatter,\r\n      _a$className = _a.className,\r\n      className = _a$className === void 0 ? null : _a$className,\r\n      _a$showLineNumbers = _a.showLineNumbers,\r\n      showLineNumbers = _a$showLineNumbers === void 0 ? false : _a$showLineNumbers,\r\n      rest = __rest(_a, [\"children\", \"language\", \"copyable\", \"bordered\", \"padded\", \"format\", \"formatter\", \"className\", \"showLineNumbers\"]);\r\n\r\n  if (typeof children !== 'string' || !children.trim()) {\r\n    return null;\r\n  }\r\n\r\n  var highlightableCode = formatter ? formatter(format, children) : children.trim();\r\n\r\n  var _useState = useState(false),\r\n      _useState2 = _slicedToArray(_useState, 2),\r\n      copied = _useState2[0],\r\n      setCopied = _useState2[1];\r\n\r\n  var onClick = useCallback(function (e) {\r\n    e.preventDefault();\r\n    var selectedText = globalWindow.getSelection().toString();\r\n    var textToCopy = e.type !== 'click' && selectedText ? selectedText : highlightableCode;\r\n    copyToClipboard(textToCopy).then(function () {\r\n      setCopied(true);\r\n      globalWindow.setTimeout(function () {\r\n        return setCopied(false);\r\n      }, 1500);\r\n    }).catch(logger.error);\r\n  }, []);\r\n  return React__default.createElement(Wrapper, {\r\n    bordered: bordered,\r\n    padded: padded,\r\n    className: className,\r\n    onCopyCapture: onClick\r\n  }, React__default.createElement(Scroller, null, React__default.createElement(ReactSyntaxHighlighter, Object.assign({\r\n    padded: padded || bordered,\r\n    language: language,\r\n    showLineNumbers: showLineNumbers,\r\n    showInlineLineNumbers: showLineNumbers,\r\n    useInlineStyles: false,\r\n    PreTag: Pre,\r\n    CodeTag: Code,\r\n    lineNumberContainerStyle: {}\r\n  }, rest), highlightableCode)), copyable ? React__default.createElement(ActionBar, {\r\n    actionItems: [{\r\n      title: copied ? 'Copied' : 'Copy',\r\n      onClick: onClick\r\n    }]\r\n  }) : null);\r\n};\r\n\r\nexport { SyntaxHighlighter, createCopyToClipboardFunction, SyntaxHighlighter as default };\r\n","var global = require('../internals/global');\r\nvar DESCRIPTORS = require('../internals/descriptors');\r\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\r\nvar regExpFlags = require('../internals/regexp-flags');\r\nvar fails = require('../internals/fails');\r\n\r\n// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\r\nvar RegExp = global.RegExp;\r\nvar RegExpPrototype = RegExp.prototype;\r\n\r\nvar FORCED = DESCRIPTORS && fails(function () {\r\n  var INDICES_SUPPORT = true;\r\n  try {\r\n    RegExp('.', 'd');\r\n  } catch (error) {\r\n    INDICES_SUPPORT = false;\r\n  }\r\n\r\n  var O = {};\r\n  // modern V8 bug\r\n  var calls = '';\r\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\r\n\r\n  var addGetter = function (key, chr) {\r\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\r\n    Object.defineProperty(O, key, { get: function () {\r\n      calls += chr;\r\n      return true;\r\n    } });\r\n  };\r\n\r\n  var pairs = {\r\n    dotAll: 's',\r\n    global: 'g',\r\n    ignoreCase: 'i',\r\n    multiline: 'm',\r\n    sticky: 'y'\r\n  };\r\n\r\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\r\n\r\n  for (var key in pairs) addGetter(key, pairs[key]);\r\n\r\n  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\r\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\r\n\r\n  return result !== expected || calls !== expected;\r\n});\r\n\r\n// `RegExp.prototype.flags` getter\r\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\r\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\r\n  configurable: true,\r\n  get: regExpFlags\r\n});\r\n","var $ = require('../internals/export');\r\nvar uncurryThis = require('../internals/function-uncurry-this');\r\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\r\n\r\nvar $RangeError = RangeError;\r\nvar fromCharCode = String.fromCharCode;\r\n// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing\r\nvar $fromCodePoint = String.fromCodePoint;\r\nvar join = uncurryThis([].join);\r\n\r\n// length should be 1, old FF problem\r\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\r\n\r\n// `String.fromCodePoint` method\r\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\r\n$({ target: 'String', stat: true, arity: 1, forced: INCORRECT_LENGTH }, {\r\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\r\n  fromCodePoint: function fromCodePoint(x) {\r\n    var elements = [];\r\n    var length = arguments.length;\r\n    var i = 0;\r\n    var code;\r\n    while (length > i) {\r\n      code = +arguments[i++];\r\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw $RangeError(code + ' is not a valid code point');\r\n      elements[i] = code < 0x10000\r\n        ? fromCharCode(code)\r\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\r\n    } return join(elements, '');\r\n  }\r\n});\r\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnjUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}